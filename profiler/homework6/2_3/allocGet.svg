<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (261,670 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (156,212 samples, 59.70%)</title><rect x="10.0" y="787.0" width="704.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (156,172 samples, 59.68%)</title><rect x="10.2" y="771.0" width="704.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.2" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (156,172 samples, 59.68%)</title><rect x="10.2" y="755.0" width="704.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (87,269 samples, 33.35%)</title><rect x="10.2" y="739.0" width="393.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.2" y="750.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (13,145 samples, 5.02%)</title><rect x="10.2" y="723.0" width="59.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (13,106 samples, 5.01%)</title><rect x="10.2" y="707.0" width="59.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.2" y="718.0">java/u..</text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniRelay (90 samples, 0.03%)</title><rect x="10.2" y="691.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$144/496278774.apply (13,016 samples, 4.97%)</title><rect x="10.6" y="691.0" width="58.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.6" y="702.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (13,016 samples, 4.97%)</title><rect x="10.6" y="675.0" width="58.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.6" y="686.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (13,016 samples, 4.97%)</title><rect x="10.6" y="659.0" width="58.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.6" y="670.0">jdk/in..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (108 samples, 0.04%)</title><rect x="10.6" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (108 samples, 0.04%)</title><rect x="10.6" y="627.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.6" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$435/748589287.get$Lambda (66 samples, 0.03%)</title><rect x="10.6" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.6" y="622.0"></text>
</g>
<g>
<title>jdk.internal.net.http.MultiExchange$$Lambda$435 (66 samples, 0.03%)</title><rect x="10.6" y="595.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (176 samples, 0.07%)</title><rect x="11.1" y="643.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (176 samples, 0.07%)</title><rect x="11.1" y="627.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniHandle (86 samples, 0.03%)</title><rect x="11.1" y="611.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="14.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (90 samples, 0.03%)</title><rect x="11.5" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="14.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (90 samples, 0.03%)</title><rect x="11.5" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.5" y="606.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (90 samples, 0.03%)</title><rect x="11.5" y="579.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="14.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (384 samples, 0.15%)</title><rect x="11.9" y="643.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (384 samples, 0.15%)</title><rect x="11.9" y="627.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.9" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniCompose (212 samples, 0.08%)</title><rect x="11.9" y="611.0" width="0.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="14.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (172 samples, 0.07%)</title><rect x="12.8" y="611.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (172 samples, 0.07%)</title><rect x="12.8" y="595.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.8" y="606.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (172 samples, 0.07%)</title><rect x="12.8" y="579.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="15.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (12,007 samples, 4.59%)</title><rect x="13.6" y="643.0" width="54.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.6" y="654.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (12,007 samples, 4.59%)</title><rect x="13.6" y="627.0" width="54.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.6" y="638.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (12,007 samples, 4.59%)</title><rect x="13.6" y="611.0" width="54.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="622.0">jdk/i..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (140 samples, 0.05%)</title><rect x="13.6" y="595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (140 samples, 0.05%)</title><rect x="13.6" y="579.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (8,433 samples, 3.22%)</title><rect x="14.2" y="595.0" width="38.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.2" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (8,433 samples, 3.22%)</title><rect x="14.2" y="579.0" width="38.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.2" y="590.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (8,354 samples, 3.19%)</title><rect x="14.2" y="563.0" width="37.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="574.0">jav..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$337/1746647616.apply (8,354 samples, 3.19%)</title><rect x="14.2" y="547.0" width="37.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="558.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (8,354 samples, 3.19%)</title><rect x="14.2" y="531.0" width="37.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="542.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (8,354 samples, 3.19%)</title><rect x="14.2" y="515.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="526.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$174/745402377.apply (8,354 samples, 3.19%)</title><rect x="14.2" y="499.0" width="37.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="510.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (8,354 samples, 3.19%)</title><rect x="14.2" y="483.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="494.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (202 samples, 0.08%)</title><rect x="14.5" y="467.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (202 samples, 0.08%)</title><rect x="14.5" y="451.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.5" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniHandle (91 samples, 0.03%)</title><rect x="14.5" y="435.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="17.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (87 samples, 0.03%)</title><rect x="15.0" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (87 samples, 0.03%)</title><rect x="15.0" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="430.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (87 samples, 0.03%)</title><rect x="15.0" y="403.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="18.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (191 samples, 0.07%)</title><rect x="15.4" y="467.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (191 samples, 0.07%)</title><rect x="15.4" y="451.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniCompose (108 samples, 0.04%)</title><rect x="15.4" y="435.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="18.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="15.9" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="15.9" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.9" y="430.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (82 samples, 0.03%)</title><rect x="15.9" y="403.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="18.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (7,906 samples, 3.02%)</title><rect x="16.3" y="467.0" width="35.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="478.0">jdk..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (82 samples, 0.03%)</title><rect x="16.3" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (82 samples, 0.03%)</title><rect x="16.3" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (6,440 samples, 2.46%)</title><rect x="16.6" y="451.0" width="29.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.6" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (6,440 samples, 2.46%)</title><rect x="16.6" y="435.0" width="29.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.6" y="446.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniRelay (87 samples, 0.03%)</title><rect x="16.6" y="419.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="19.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$416/1681996229.apply (6,198 samples, 2.37%)</title><rect x="17.0" y="419.0" width="28.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="430.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (6,198 samples, 2.37%)</title><rect x="17.0" y="403.0" width="28.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.0" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (158 samples, 0.06%)</title><rect x="17.2" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (158 samples, 0.06%)</title><rect x="17.2" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.2" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (87 samples, 0.03%)</title><rect x="17.2" y="355.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="20.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (71 samples, 0.03%)</title><rect x="17.6" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (71 samples, 0.03%)</title><rect x="17.6" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="350.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (71 samples, 0.03%)</title><rect x="17.6" y="323.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="20.6" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (76 samples, 0.03%)</title><rect x="17.9" y="387.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="20.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (125 samples, 0.05%)</title><rect x="18.3" y="387.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.3" y="398.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$DataPair (61 samples, 0.02%)</title><rect x="18.3" y="371.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="21.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (64 samples, 0.02%)</title><rect x="18.6" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (61 samples, 0.02%)</title><rect x="18.6" y="355.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (61 samples, 0.02%)</title><rect x="18.6" y="339.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (61 samples, 0.02%)</title><rect x="18.6" y="323.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.newNode (61 samples, 0.02%)</title><rect x="18.6" y="307.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.6" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentLinkedDeque$Node (61 samples, 0.02%)</title><rect x="18.6" y="291.0" width="0.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="21.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (227 samples, 0.09%)</title><rect x="18.9" y="387.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (227 samples, 0.09%)</title><rect x="18.9" y="371.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (80 samples, 0.03%)</title><rect x="18.9" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (80 samples, 0.03%)</title><rect x="18.9" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (80 samples, 0.03%)</title><rect x="18.9" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.9" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.SocketTube$InternalWriteSubscriber$WriteSubscription (80 samples, 0.03%)</title><rect x="18.9" y="307.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="21.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (147 samples, 0.06%)</title><rect x="19.2" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (147 samples, 0.06%)</title><rect x="19.2" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.2" y="350.0"></text>
</g>
<g>
<title>jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription (103 samples, 0.04%)</title><rect x="19.2" y="323.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="22.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (5,566 samples, 2.13%)</title><rect x="19.9" y="387.0" width="25.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.9" y="398.0">j..</text>
</g>
<g>
<title>java/lang/String.getBytes (421 samples, 0.16%)</title><rect x="20.1" y="371.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (421 samples, 0.16%)</title><rect x="20.1" y="355.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeASCII (421 samples, 0.16%)</title><rect x="20.1" y="339.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.1" y="350.0"></text>
</g>
<g>
<title>byte[] (421 samples, 0.16%)</title><rect x="20.1" y="323.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="23.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (198 samples, 0.08%)</title><rect x="22.0" y="371.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.0" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (198 samples, 0.08%)</title><rect x="22.0" y="355.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.0" y="366.0"></text>
</g>
<g>
<title>byte[] (198 samples, 0.08%)</title><rect x="22.0" y="339.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="25.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (439 samples, 0.17%)</title><rect x="22.9" y="371.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (439 samples, 0.17%)</title><rect x="22.9" y="355.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.9" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (390 samples, 0.15%)</title><rect x="23.1" y="339.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.1" y="350.0"></text>
</g>
<g>
<title>byte[] (390 samples, 0.15%)</title><rect x="23.1" y="323.0" width="1.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="26.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (129 samples, 0.05%)</title><rect x="24.9" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (129 samples, 0.05%)</title><rect x="24.9" y="355.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (129 samples, 0.05%)</title><rect x="24.9" y="339.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="27.9" y="350.0"></text>
</g>
<g>
<title>java/util/List.of (69 samples, 0.03%)</title><rect x="25.5" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.5" y="382.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (69 samples, 0.03%)</title><rect x="25.5" y="355.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="28.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (3,382 samples, 1.29%)</title><rect x="25.8" y="371.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.8" y="382.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.and (66 samples, 0.03%)</title><rect x="25.8" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.8" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (66 samples, 0.03%)</title><rect x="25.8" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.8" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (66 samples, 0.03%)</title><rect x="25.8" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.8" y="334.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$463/1030327494.get$Lambda (66 samples, 0.03%)</title><rect x="25.8" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.8" y="318.0"></text>
</g>
<g>
<title>java.util.function.BiPredicate$$Lambda$463 (66 samples, 0.03%)</title><rect x="25.8" y="291.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="28.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (1,757 samples, 0.67%)</title><rect x="26.1" y="355.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1,064 samples, 0.41%)</title><rect x="26.1" y="339.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.1" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1,064 samples, 0.41%)</title><rect x="26.1" y="323.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.1" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1,064 samples, 0.41%)</title><rect x="26.1" y="307.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.1" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,064 samples, 0.41%)</title><rect x="26.1" y="291.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.1" y="302.0"></text>
</g>
<g>
<title>byte[] (1,064 samples, 0.41%)</title><rect x="26.1" y="275.0" width="4.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="29.1" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (140 samples, 0.05%)</title><rect x="30.9" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.9" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (140 samples, 0.05%)</title><rect x="30.9" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.9" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntrySet.iterator (140 samples, 0.05%)</title><rect x="30.9" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.9" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntryIterator (140 samples, 0.05%)</title><rect x="30.9" y="291.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="33.9" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (184 samples, 0.07%)</title><rect x="31.5" y="339.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.5" y="350.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet (98 samples, 0.04%)</title><rect x="31.5" y="323.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="34.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.entrySet (86 samples, 0.03%)</title><rect x="32.0" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.0" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntrySet (86 samples, 0.03%)</title><rect x="32.0" y="307.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="35.0" y="318.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$463/1030327494.test (369 samples, 0.14%)</title><rect x="32.3" y="339.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.3" y="350.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (369 samples, 0.14%)</title><rect x="32.3" y="323.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$92/680779399.test (369 samples, 0.14%)</title><rect x="32.3" y="307.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (369 samples, 0.14%)</title><rect x="32.3" y="291.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.3" y="302.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$81/1210898719.test (369 samples, 0.14%)</title><rect x="32.3" y="275.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.3" y="286.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (369 samples, 0.14%)</title><rect x="32.3" y="259.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$80/274722023.test (369 samples, 0.14%)</title><rect x="32.3" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (369 samples, 0.14%)</title><rect x="32.3" y="227.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (369 samples, 0.14%)</title><rect x="32.3" y="211.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (369 samples, 0.14%)</title><rect x="32.3" y="195.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.3" y="206.0"></text>
</g>
<g>
<title>java.lang.String (180 samples, 0.07%)</title><rect x="32.3" y="179.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="35.3" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (189 samples, 0.07%)</title><rect x="33.2" y="179.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.2" y="190.0"></text>
</g>
<g>
<title>byte[] (189 samples, 0.07%)</title><rect x="33.2" y="163.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="36.2" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (1,559 samples, 0.60%)</title><rect x="34.0" y="355.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.0" y="366.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (1,559 samples, 0.60%)</title><rect x="34.0" y="339.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.0" y="350.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1,559 samples, 0.60%)</title><rect x="34.0" y="323.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.0" y="334.0"></text>
</g>
<g>
<title>java.util.ArrayList (56 samples, 0.02%)</title><rect x="34.2" y="307.0" width="0.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="37.2" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap (126 samples, 0.05%)</title><rect x="34.4" y="307.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="37.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (79 samples, 0.03%)</title><rect x="35.2" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.2" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (79 samples, 0.03%)</title><rect x="35.2" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.2" y="302.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.get$Lambda (79 samples, 0.03%)</title><rect x="35.2" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.2" y="286.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$126 (79 samples, 0.03%)</title><rect x="35.2" y="259.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="38.2" y="270.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (75 samples, 0.03%)</title><rect x="35.5" y="307.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.5" y="318.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap (75 samples, 0.03%)</title><rect x="35.5" y="291.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="38.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (1,027 samples, 0.39%)</title><rect x="35.9" y="307.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.9" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.accept (1,027 samples, 0.39%)</title><rect x="35.9" y="291.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.9" y="302.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (1,027 samples, 0.39%)</title><rect x="35.9" y="275.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (190 samples, 0.07%)</title><rect x="35.9" y="259.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (190 samples, 0.07%)</title><rect x="35.9" y="243.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.9" y="254.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.get$Lambda (190 samples, 0.07%)</title><rect x="35.9" y="227.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.9" y="238.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$129 (190 samples, 0.07%)</title><rect x="35.9" y="211.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="38.9" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (159 samples, 0.06%)</title><rect x="36.7" y="259.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.7" y="270.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.accept (159 samples, 0.06%)</title><rect x="36.7" y="243.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.7" y="254.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (159 samples, 0.06%)</title><rect x="36.7" y="227.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.7" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (159 samples, 0.06%)</title><rect x="36.7" y="211.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.7" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (159 samples, 0.06%)</title><rect x="36.7" y="195.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.7" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (159 samples, 0.06%)</title><rect x="36.7" y="179.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.7" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (159 samples, 0.06%)</title><rect x="36.7" y="163.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (159 samples, 0.06%)</title><rect x="36.7" y="147.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.7" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (159 samples, 0.06%)</title><rect x="36.7" y="131.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="39.7" y="142.0"></text>
</g>
<g>
<title>java/util/List.copyOf (372 samples, 0.14%)</title><rect x="37.4" y="259.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.4" y="270.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (372 samples, 0.14%)</title><rect x="37.4" y="243.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (193 samples, 0.07%)</title><rect x="37.4" y="227.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.4" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (193 samples, 0.07%)</title><rect x="37.4" y="211.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.4" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (193 samples, 0.07%)</title><rect x="37.4" y="195.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="40.4" y="206.0"></text>
</g>
<g>
<title>java/util/List.of (179 samples, 0.07%)</title><rect x="38.3" y="227.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.3" y="238.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (179 samples, 0.07%)</title><rect x="38.3" y="211.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="41.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (306 samples, 0.12%)</title><rect x="39.1" y="259.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.1" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (306 samples, 0.12%)</title><rect x="39.1" y="243.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="42.1" y="254.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (119 samples, 0.05%)</title><rect x="40.5" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.5" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap (119 samples, 0.05%)</title><rect x="40.5" y="291.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="43.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (212 samples, 0.08%)</title><rect x="41.0" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.0" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (158 samples, 0.06%)</title><rect x="41.3" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (158 samples, 0.06%)</title><rect x="41.3" y="339.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/662822946.invoke (158 samples, 0.06%)</title><rect x="41.3" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (158 samples, 0.06%)</title><rect x="41.3" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (69 samples, 0.03%)</title><rect x="41.3" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.3" y="302.0"></text>
</g>
<g>
<title>java.lang.String (69 samples, 0.03%)</title><rect x="41.3" y="275.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="44.3" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (89 samples, 0.03%)</title><rect x="41.6" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="44.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (89 samples, 0.03%)</title><rect x="41.6" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.6" y="286.0"></text>
</g>
<g>
<title>byte[] (89 samples, 0.03%)</title><rect x="41.6" y="259.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="44.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (177 samples, 0.07%)</title><rect x="42.0" y="371.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (177 samples, 0.07%)</title><rect x="42.0" y="355.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.0" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (177 samples, 0.07%)</title><rect x="42.0" y="339.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.0" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (177 samples, 0.07%)</title><rect x="42.0" y="323.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/662822946.invoke (177 samples, 0.07%)</title><rect x="42.0" y="307.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (177 samples, 0.07%)</title><rect x="42.0" y="291.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (67 samples, 0.03%)</title><rect x="42.0" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.0" y="286.0"></text>
</g>
<g>
<title>java.lang.String (67 samples, 0.03%)</title><rect x="42.0" y="259.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="45.0" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (110 samples, 0.04%)</title><rect x="42.3" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (110 samples, 0.04%)</title><rect x="42.3" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.3" y="270.0"></text>
</g>
<g>
<title>byte[] (110 samples, 0.04%)</title><rect x="42.3" y="243.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="45.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (485 samples, 0.19%)</title><rect x="42.8" y="371.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.8" y="382.0"></text>
</g>
<g>
<title>java.util.ArrayList (151 samples, 0.06%)</title><rect x="42.8" y="355.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="45.8" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (126 samples, 0.05%)</title><rect x="43.5" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.5" y="366.0"></text>
</g>
<g>
<title>java.lang.Object[] (126 samples, 0.05%)</title><rect x="43.5" y="339.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="46.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (208 samples, 0.08%)</title><rect x="44.0" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.0" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (208 samples, 0.08%)</title><rect x="44.0" y="339.0" width="1.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="47.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (155 samples, 0.06%)</title><rect x="45.0" y="419.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (155 samples, 0.06%)</title><rect x="45.0" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.0" y="414.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (155 samples, 0.06%)</title><rect x="45.0" y="387.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="48.0" y="398.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response (245 samples, 0.09%)</title><rect x="45.7" y="451.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="48.7" y="462.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (99 samples, 0.04%)</title><rect x="46.8" y="451.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="49.8" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (1,040 samples, 0.40%)</title><rect x="47.2" y="451.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.2" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (85 samples, 0.03%)</title><rect x="47.2" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.2" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (85 samples, 0.03%)</title><rect x="47.2" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.2" y="430.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1HeaderParser (97 samples, 0.04%)</title><rect x="47.6" y="435.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="50.6" y="446.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response$BodyReader (112 samples, 0.04%)</title><rect x="48.0" y="435.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="51.0" y="446.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response$HeadersReader (108 samples, 0.04%)</title><rect x="48.6" y="435.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="51.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (284 samples, 0.11%)</title><rect x="49.0" y="435.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (284 samples, 0.11%)</title><rect x="49.0" y="419.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (284 samples, 0.11%)</title><rect x="49.0" y="403.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (284 samples, 0.11%)</title><rect x="49.0" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="52.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (284 samples, 0.11%)</title><rect x="49.0" y="371.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (284 samples, 0.11%)</title><rect x="49.0" y="355.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$312/807283364.run (284 samples, 0.11%)</title><rect x="49.0" y="339.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (284 samples, 0.11%)</title><rect x="49.0" y="323.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (284 samples, 0.11%)</title><rect x="49.0" y="307.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (105 samples, 0.04%)</title><rect x="49.0" y="291.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (105 samples, 0.04%)</title><rect x="49.0" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$374/333994348.get$Lambda (60 samples, 0.02%)</title><rect x="49.2" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.2" y="270.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver$$Lambda$374 (60 samples, 0.02%)</title><rect x="49.2" y="243.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="52.2" y="254.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver$Http1AsyncDelegateSubscription (81 samples, 0.03%)</title><rect x="49.5" y="291.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="52.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.&lt;init&gt; (98 samples, 0.04%)</title><rect x="49.9" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AbstractSubscription.&lt;init&gt; (98 samples, 0.04%)</title><rect x="49.9" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.&lt;init&gt; (59 samples, 0.02%)</title><rect x="50.1" y="259.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.1" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicLong (59 samples, 0.02%)</title><rect x="50.1" y="243.0" width="0.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="53.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (267 samples, 0.10%)</title><rect x="50.3" y="435.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.3" y="446.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (59 samples, 0.02%)</title><rect x="50.3" y="419.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="53.3" y="430.0"></text>
</g>
<g>
<title>java.util.HashMap (128 samples, 0.05%)</title><rect x="50.6" y="419.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="53.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (80 samples, 0.03%)</title><rect x="51.2" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.2" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (80 samples, 0.03%)</title><rect x="51.2" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.2" y="414.0"></text>
</g>
<g>
<title>byte[] (80 samples, 0.03%)</title><rect x="51.2" y="387.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="54.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.start (87 samples, 0.03%)</title><rect x="51.5" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.5" y="446.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (87 samples, 0.03%)</title><rect x="51.5" y="419.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="54.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (79 samples, 0.03%)</title><rect x="51.9" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (79 samples, 0.03%)</title><rect x="51.9" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.9" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (79 samples, 0.03%)</title><rect x="51.9" y="531.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="54.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (167 samples, 0.06%)</title><rect x="52.3" y="595.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (167 samples, 0.06%)</title><rect x="52.3" y="579.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.3" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniRelay (85 samples, 0.03%)</title><rect x="52.3" y="563.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="55.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="52.7" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="52.7" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.7" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (82 samples, 0.03%)</title><rect x="52.7" y="531.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="55.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (3,267 samples, 1.25%)</title><rect x="53.0" y="595.0" width="14.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (109 samples, 0.04%)</title><rect x="53.0" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (109 samples, 0.04%)</title><rect x="53.0" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$319/256851160.get$Lambda (58 samples, 0.02%)</title><rect x="53.0" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.0" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Exchange$$Lambda$319 (58 samples, 0.02%)</title><rect x="53.0" y="531.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="56.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (157 samples, 0.06%)</title><rect x="53.5" y="579.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (157 samples, 0.06%)</title><rect x="53.5" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$327/1321561247.apply (80 samples, 0.03%)</title><rect x="53.5" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$establishExchange$2 (80 samples, 0.03%)</title><rect x="53.5" y="531.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (80 samples, 0.03%)</title><rect x="53.5" y="515.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.5" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (80 samples, 0.03%)</title><rect x="53.5" y="499.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="56.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (77 samples, 0.03%)</title><rect x="53.9" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (77 samples, 0.03%)</title><rect x="53.9" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.9" y="542.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (77 samples, 0.03%)</title><rect x="53.9" y="515.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="56.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (97 samples, 0.04%)</title><rect x="54.2" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (97 samples, 0.04%)</title><rect x="54.2" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (97 samples, 0.04%)</title><rect x="54.2" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (97 samples, 0.04%)</title><rect x="54.2" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.2" y="542.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (97 samples, 0.04%)</title><rect x="54.2" y="515.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="57.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (2,904 samples, 1.11%)</title><rect x="54.7" y="579.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (2,904 samples, 1.11%)</title><rect x="54.7" y="563.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.7" y="574.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange (232 samples, 0.09%)</title><rect x="54.7" y="547.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="57.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (2,588 samples, 0.99%)</title><rect x="55.7" y="547.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="558.0"></text>
</g>
<g>
<title>java.util.LinkedList (77 samples, 0.03%)</title><rect x="55.9" y="531.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="58.9" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (133 samples, 0.05%)</title><rect x="56.5" y="531.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (133 samples, 0.05%)</title><rect x="56.5" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.5" y="526.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (133 samples, 0.05%)</title><rect x="56.5" y="499.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="59.5" y="510.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver (222 samples, 0.08%)</title><rect x="57.3" y="531.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="60.3" y="542.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$Http1Publisher (125 samples, 0.05%)</title><rect x="58.3" y="531.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="61.3" y="542.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Request (135 samples, 0.05%)</title><rect x="58.8" y="531.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="61.8" y="542.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (166 samples, 0.06%)</title><rect x="59.5" y="531.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="62.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.&lt;init&gt; (796 samples, 0.30%)</title><rect x="60.2" y="531.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.2" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicLong (56 samples, 0.02%)</title><rect x="60.6" y="515.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="63.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;init&gt; (67 samples, 0.03%)</title><rect x="61.3" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.3" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentLinkedDeque$Node (67 samples, 0.03%)</title><rect x="61.3" y="499.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="64.3" y="510.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver$Http1TubeSubscriber (64 samples, 0.02%)</title><rect x="61.6" y="515.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="64.6" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (93 samples, 0.04%)</title><rect x="61.9" y="515.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="64.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.synchronizedScheduler (338 samples, 0.13%)</title><rect x="62.3" y="515.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.3" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask (71 samples, 0.03%)</title><rect x="62.3" y="499.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="65.3" y="510.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.SequentialScheduler (84 samples, 0.03%)</title><rect x="62.6" y="499.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="65.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.&lt;init&gt; (130 samples, 0.05%)</title><rect x="63.2" y="499.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (502 samples, 0.19%)</title><rect x="63.8" y="531.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.&lt;init&gt; (65 samples, 0.02%)</title><rect x="64.3" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.3" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicLong (65 samples, 0.02%)</title><rect x="64.3" y="499.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="67.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.synchronizedScheduler (320 samples, 0.12%)</title><rect x="64.6" y="515.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.6" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.SequentialScheduler$SynchronizedRestartableTask (65 samples, 0.02%)</title><rect x="64.6" y="499.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="67.6" y="510.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.SequentialScheduler (89 samples, 0.03%)</title><rect x="64.9" y="499.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="67.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.&lt;init&gt; (118 samples, 0.05%)</title><rect x="65.5" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (85 samples, 0.03%)</title><rect x="66.1" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (85 samples, 0.03%)</title><rect x="66.1" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (85 samples, 0.03%)</title><rect x="66.1" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (85 samples, 0.03%)</title><rect x="66.1" y="483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (85 samples, 0.03%)</title><rect x="66.1" y="467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (85 samples, 0.03%)</title><rect x="66.1" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.1" y="462.0"></text>
</g>
<g>
<title>java.lang.Object[] (85 samples, 0.03%)</title><rect x="66.1" y="435.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="69.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (208 samples, 0.08%)</title><rect x="66.4" y="531.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.4" y="542.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (171 samples, 0.07%)</title><rect x="66.6" y="515.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$206/316910096.run (171 samples, 0.07%)</title><rect x="66.6" y="499.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (171 samples, 0.07%)</title><rect x="66.6" y="483.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.6" y="494.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (121 samples, 0.05%)</title><rect x="66.8" y="467.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.8" y="478.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (68 samples, 0.03%)</title><rect x="67.1" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.1" y="462.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (68 samples, 0.03%)</title><rect x="67.1" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.1" y="446.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (68 samples, 0.03%)</title><rect x="67.1" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.1" y="430.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (68 samples, 0.03%)</title><rect x="67.1" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.1" y="414.0"></text>
</g>
<g>
<title>java.net.InetAddress[] (66 samples, 0.03%)</title><rect x="67.1" y="387.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="70.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (84 samples, 0.03%)</title><rect x="67.4" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.4" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (84 samples, 0.03%)</title><rect x="67.4" y="531.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="70.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (94 samples, 0.04%)</title><rect x="67.8" y="643.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.8" y="654.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (94 samples, 0.04%)</title><rect x="67.8" y="627.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.8" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (94 samples, 0.04%)</title><rect x="67.8" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.8" y="622.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (94 samples, 0.04%)</title><rect x="67.8" y="595.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="70.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (247 samples, 0.09%)</title><rect x="68.2" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.2" y="654.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ResponseTimerEvent (179 samples, 0.07%)</title><rect x="68.2" y="627.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="71.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (68 samples, 0.03%)</title><rect x="69.0" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (68 samples, 0.03%)</title><rect x="69.0" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.0" y="622.0"></text>
</g>
<g>
<title>java/time/Instant.plus (68 samples, 0.03%)</title><rect x="69.0" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.0" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.addTo (68 samples, 0.03%)</title><rect x="69.0" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.0" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.plus (68 samples, 0.03%)</title><rect x="69.0" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.0" y="574.0"></text>
</g>
<g>
<title>java/time/Instant.plus (68 samples, 0.03%)</title><rect x="69.0" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.0" y="558.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (68 samples, 0.03%)</title><rect x="69.0" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.0" y="542.0"></text>
</g>
<g>
<title>java/time/Instant.plus (68 samples, 0.03%)</title><rect x="69.0" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.0" y="526.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (68 samples, 0.03%)</title><rect x="69.0" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.0" y="510.0"></text>
</g>
<g>
<title>java/time/Instant.create (68 samples, 0.03%)</title><rect x="69.0" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.0" y="494.0"></text>
</g>
<g>
<title>java.time.Instant (68 samples, 0.03%)</title><rect x="69.0" y="467.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="72.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager$$Lambda$626/500869858.get (74,124 samples, 28.33%)</title><rect x="69.5" y="723.0" width="334.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.5" y="734.0">ru/mail/polis/service/alexander/marashov/DaoM..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.lambda$rowGet$2 (74,124 samples, 28.33%)</title><rect x="69.5" y="707.0" width="334.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.5" y="718.0">ru/mail/polis/service/alexander/marashov/DaoM..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (74,124 samples, 28.33%)</title><rect x="69.5" y="691.0" width="334.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.5" y="702.0">ru/mail/polis/dao/DAO.rowGet</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,554 samples, 1.36%)</title><rect x="69.5" y="675.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,554 samples, 1.36%)</title><rect x="69.5" y="659.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.5" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,554 samples, 1.36%)</title><rect x="69.5" y="643.0" width="16.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.5" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,554 samples, 1.36%)</title><rect x="69.5" y="627.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.5" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,554 samples, 1.36%)</title><rect x="69.5" y="611.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.5" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,554 samples, 1.36%)</title><rect x="69.5" y="595.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.5" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,554 samples, 1.36%)</title><rect x="69.5" y="579.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,554 samples, 1.36%)</title><rect x="69.5" y="563.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3,554 samples, 1.36%)</title><rect x="69.5" y="547.0" width="16.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,554 samples, 1.36%)</title><rect x="69.5" y="531.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,554 samples, 1.36%)</title><rect x="69.5" y="515.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (231 samples, 0.09%)</title><rect x="69.5" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.5" y="510.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (231 samples, 0.09%)</title><rect x="69.5" y="483.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="72.5" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (122 samples, 0.05%)</title><rect x="70.5" y="499.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="73.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (1,203 samples, 0.46%)</title><rect x="71.1" y="499.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (445 samples, 0.17%)</title><rect x="71.1" y="483.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (445 samples, 0.17%)</title><rect x="71.1" y="467.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.1" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (258 samples, 0.10%)</title><rect x="71.1" y="451.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="74.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (187 samples, 0.07%)</title><rect x="72.2" y="451.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="75.2" y="462.0"></text>
</g>
<g>
<title>byte[] (187 samples, 0.07%)</title><rect x="72.2" y="435.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="75.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (405 samples, 0.15%)</title><rect x="73.1" y="483.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (405 samples, 0.15%)</title><rect x="73.1" y="467.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.1" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (279 samples, 0.11%)</title><rect x="73.1" y="451.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="76.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (126 samples, 0.05%)</title><rect x="74.3" y="451.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.3" y="462.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.05%)</title><rect x="74.3" y="435.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="77.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (353 samples, 0.13%)</title><rect x="74.9" y="483.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (353 samples, 0.13%)</title><rect x="74.9" y="467.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (252 samples, 0.10%)</title><rect x="74.9" y="451.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="77.9" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (101 samples, 0.04%)</title><rect x="76.0" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.0" y="462.0"></text>
</g>
<g>
<title>byte[] (101 samples, 0.04%)</title><rect x="76.0" y="435.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="79.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (1,998 samples, 0.76%)</title><rect x="76.5" y="499.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.5" y="510.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (127 samples, 0.05%)</title><rect x="76.5" y="483.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="79.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (401 samples, 0.15%)</title><rect x="77.1" y="483.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (401 samples, 0.15%)</title><rect x="77.1" y="467.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.1" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (251 samples, 0.10%)</title><rect x="77.1" y="451.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="80.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (150 samples, 0.06%)</title><rect x="78.2" y="451.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.2" y="462.0"></text>
</g>
<g>
<title>byte[] (150 samples, 0.06%)</title><rect x="78.2" y="435.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="81.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (741 samples, 0.28%)</title><rect x="78.9" y="483.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (741 samples, 0.28%)</title><rect x="78.9" y="467.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (519 samples, 0.20%)</title><rect x="78.9" y="451.0" width="2.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="81.9" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (222 samples, 0.08%)</title><rect x="81.2" y="451.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.2" y="462.0"></text>
</g>
<g>
<title>byte[] (222 samples, 0.08%)</title><rect x="81.2" y="435.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="84.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (373 samples, 0.14%)</title><rect x="82.2" y="483.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (373 samples, 0.14%)</title><rect x="82.2" y="467.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.2" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (253 samples, 0.10%)</title><rect x="82.2" y="451.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="85.2" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (120 samples, 0.05%)</title><rect x="83.4" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.4" y="462.0"></text>
</g>
<g>
<title>byte[] (120 samples, 0.05%)</title><rect x="83.4" y="435.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="86.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (356 samples, 0.14%)</title><rect x="83.9" y="483.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (356 samples, 0.14%)</title><rect x="83.9" y="467.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (246 samples, 0.09%)</title><rect x="83.9" y="451.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="86.9" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (110 samples, 0.04%)</title><rect x="85.0" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.0" y="462.0"></text>
</g>
<g>
<title>byte[] (110 samples, 0.04%)</title><rect x="85.0" y="435.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="88.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (70,570 samples, 26.97%)</title><rect x="85.5" y="675.0" width="318.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.5" y="686.0">ru/mail/polis/dao/alexander/marashov/DAOImp..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (12,504 samples, 4.78%)</title><rect x="85.5" y="659.0" width="56.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.5" y="670.0">com/go..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (88 samples, 0.03%)</title><rect x="85.5" y="643.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="88.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (12,416 samples, 4.74%)</title><rect x="85.9" y="643.0" width="56.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.9" y="654.0">com/g..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (111 samples, 0.04%)</title><rect x="85.9" y="627.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="88.9" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (480 samples, 0.18%)</title><rect x="86.4" y="627.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.4" y="638.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (480 samples, 0.18%)</title><rect x="86.4" y="611.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="89.4" y="622.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (138 samples, 0.05%)</title><rect x="88.6" y="627.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="91.6" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (107 samples, 0.04%)</title><rect x="89.2" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.2" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (107 samples, 0.04%)</title><rect x="89.2" y="611.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="92.2" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10,322 samples, 3.94%)</title><rect x="89.7" y="627.0" width="46.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.7" y="638.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (10,322 samples, 3.94%)</title><rect x="89.7" y="611.0" width="46.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.7" y="622.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (195 samples, 0.07%)</title><rect x="89.7" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.7" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (195 samples, 0.07%)</title><rect x="89.7" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.7" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (195 samples, 0.07%)</title><rect x="89.7" y="563.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="92.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10,127 samples, 3.87%)</title><rect x="90.5" y="595.0" width="45.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="606.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10,127 samples, 3.87%)</title><rect x="90.5" y="579.0" width="45.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.5" y="590.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,127 samples, 3.87%)</title><rect x="90.5" y="563.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.5" y="574.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,127 samples, 3.87%)</title><rect x="90.5" y="547.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.5" y="558.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (10,127 samples, 3.87%)</title><rect x="90.5" y="531.0" width="45.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.5" y="542.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (10,127 samples, 3.87%)</title><rect x="90.5" y="515.0" width="45.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.5" y="526.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (10,127 samples, 3.87%)</title><rect x="90.5" y="499.0" width="45.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.5" y="510.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (725 samples, 0.28%)</title><rect x="90.5" y="483.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (725 samples, 0.28%)</title><rect x="90.5" y="467.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="93.5" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (318 samples, 0.12%)</title><rect x="93.8" y="483.0" width="1.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="96.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (3,313 samples, 1.27%)</title><rect x="95.2" y="483.0" width="15.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (1,160 samples, 0.44%)</title><rect x="95.2" y="467.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,160 samples, 0.44%)</title><rect x="95.2" y="451.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.2" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (705 samples, 0.27%)</title><rect x="95.2" y="435.0" width="3.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="98.2" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (455 samples, 0.17%)</title><rect x="98.4" y="435.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.4" y="446.0"></text>
</g>
<g>
<title>byte[] (455 samples, 0.17%)</title><rect x="98.4" y="419.0" width="2.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="101.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (1,063 samples, 0.41%)</title><rect x="100.5" y="467.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,063 samples, 0.41%)</title><rect x="100.5" y="451.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.5" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (685 samples, 0.26%)</title><rect x="100.5" y="435.0" width="3.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="103.5" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (378 samples, 0.14%)</title><rect x="103.6" y="435.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.6" y="446.0"></text>
</g>
<g>
<title>byte[] (378 samples, 0.14%)</title><rect x="103.6" y="419.0" width="1.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="106.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (1,090 samples, 0.42%)</title><rect x="105.3" y="467.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,090 samples, 0.42%)</title><rect x="105.3" y="451.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.3" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (733 samples, 0.28%)</title><rect x="105.3" y="435.0" width="3.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="108.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (357 samples, 0.14%)</title><rect x="108.6" y="435.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.6" y="446.0"></text>
</g>
<g>
<title>byte[] (357 samples, 0.14%)</title><rect x="108.6" y="419.0" width="1.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="111.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (5,771 samples, 2.21%)</title><rect x="110.2" y="483.0" width="26.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.2" y="494.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (364 samples, 0.14%)</title><rect x="110.2" y="467.0" width="1.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="113.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (1,210 samples, 0.46%)</title><rect x="111.8" y="467.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,210 samples, 0.46%)</title><rect x="111.8" y="451.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.8" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (754 samples, 0.29%)</title><rect x="111.8" y="435.0" width="3.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="114.8" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (456 samples, 0.17%)</title><rect x="115.2" y="435.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.2" y="446.0"></text>
</g>
<g>
<title>byte[] (456 samples, 0.17%)</title><rect x="115.2" y="419.0" width="2.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="118.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (2,106 samples, 0.80%)</title><rect x="117.3" y="467.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,106 samples, 0.80%)</title><rect x="117.3" y="451.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.3" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,423 samples, 0.54%)</title><rect x="117.3" y="435.0" width="6.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="120.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (683 samples, 0.26%)</title><rect x="123.7" y="435.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.7" y="446.0"></text>
</g>
<g>
<title>byte[] (683 samples, 0.26%)</title><rect x="123.7" y="419.0" width="3.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="126.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (1,063 samples, 0.41%)</title><rect x="126.8" y="467.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,063 samples, 0.41%)</title><rect x="126.8" y="451.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.8" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (733 samples, 0.28%)</title><rect x="126.8" y="435.0" width="3.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="129.8" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (330 samples, 0.13%)</title><rect x="130.1" y="435.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.1" y="446.0"></text>
</g>
<g>
<title>byte[] (330 samples, 0.13%)</title><rect x="130.1" y="419.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="133.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (1,028 samples, 0.39%)</title><rect x="131.6" y="467.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,028 samples, 0.39%)</title><rect x="131.6" y="451.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.6" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (717 samples, 0.27%)</title><rect x="131.6" y="435.0" width="3.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="134.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (311 samples, 0.12%)</title><rect x="134.8" y="435.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.8" y="446.0"></text>
</g>
<g>
<title>byte[] (311 samples, 0.12%)</title><rect x="134.8" y="419.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="137.8" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1,258 samples, 0.48%)</title><rect x="136.2" y="627.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1,258 samples, 0.48%)</title><rect x="136.2" y="611.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1,258 samples, 0.48%)</title><rect x="136.2" y="595.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (453 samples, 0.17%)</title><rect x="136.2" y="579.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="139.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$619/1670596738.getAsBoolean (453 samples, 0.17%)</title><rect x="136.2" y="563.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (453 samples, 0.17%)</title><rect x="136.2" y="547.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (453 samples, 0.17%)</title><rect x="136.2" y="531.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (106 samples, 0.04%)</title><rect x="136.2" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (106 samples, 0.04%)</title><rect x="136.2" y="499.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.2" y="510.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (106 samples, 0.04%)</title><rect x="136.2" y="483.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="139.2" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (347 samples, 0.13%)</title><rect x="136.7" y="515.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$610/1629801061.apply (347 samples, 0.13%)</title><rect x="136.7" y="499.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (347 samples, 0.13%)</title><rect x="136.7" y="483.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (230 samples, 0.09%)</title><rect x="136.7" y="467.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.7" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (230 samples, 0.09%)</title><rect x="136.7" y="451.0" width="1.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="139.7" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (117 samples, 0.04%)</title><rect x="137.7" y="467.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="140.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (805 samples, 0.31%)</title><rect x="138.3" y="579.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.3" y="590.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (171 samples, 0.07%)</title><rect x="138.3" y="563.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="141.3" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (140 samples, 0.05%)</title><rect x="139.0" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.0" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (140 samples, 0.05%)</title><rect x="139.0" y="547.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$616/1755286514.get$Lambda (75 samples, 0.03%)</title><rect x="139.0" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.0" y="542.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$616 (75 samples, 0.03%)</title><rect x="139.0" y="515.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="142.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$619/1670596738.get$Lambda (65 samples, 0.02%)</title><rect x="139.4" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.4" y="542.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$619 (65 samples, 0.02%)</title><rect x="139.4" y="515.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="142.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (124 samples, 0.05%)</title><rect x="139.7" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (124 samples, 0.05%)</title><rect x="139.7" y="547.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.7" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (124 samples, 0.05%)</title><rect x="139.7" y="531.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="142.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (370 samples, 0.14%)</title><rect x="140.2" y="563.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.2" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (370 samples, 0.14%)</title><rect x="140.2" y="547.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="143.2" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList (293 samples, 0.11%)</title><rect x="141.9" y="659.0" width="1.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="144.9" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (148 samples, 0.06%)</title><rect x="143.2" y="659.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.2" y="670.0"></text>
</g>
<g>
<title>java.lang.Object[] (148 samples, 0.06%)</title><rect x="143.2" y="643.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="146.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (293 samples, 0.11%)</title><rect x="143.9" y="659.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.9" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (293 samples, 0.11%)</title><rect x="143.9" y="643.0" width="1.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="146.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3,671 samples, 1.40%)</title><rect x="145.2" y="659.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.2" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (125 samples, 0.05%)</title><rect x="145.2" y="643.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="148.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3,546 samples, 1.36%)</title><rect x="145.8" y="643.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.8" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,546 samples, 1.36%)</title><rect x="145.8" y="627.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.8" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,546 samples, 1.36%)</title><rect x="145.8" y="611.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.8" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,546 samples, 1.36%)</title><rect x="145.8" y="595.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.8" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,546 samples, 1.36%)</title><rect x="145.8" y="579.0" width="15.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.8" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,546 samples, 1.36%)</title><rect x="145.8" y="563.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.8" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,546 samples, 1.36%)</title><rect x="145.8" y="547.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.8" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,546 samples, 1.36%)</title><rect x="145.8" y="531.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3,546 samples, 1.36%)</title><rect x="145.8" y="515.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,546 samples, 1.36%)</title><rect x="145.8" y="499.0" width="15.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,546 samples, 1.36%)</title><rect x="145.8" y="483.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (253 samples, 0.10%)</title><rect x="145.8" y="467.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.8" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (253 samples, 0.10%)</title><rect x="145.8" y="451.0" width="1.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="148.8" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (134 samples, 0.05%)</title><rect x="146.9" y="467.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="149.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (1,130 samples, 0.43%)</title><rect x="147.5" y="467.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (394 samples, 0.15%)</title><rect x="147.5" y="451.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (394 samples, 0.15%)</title><rect x="147.5" y="435.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.5" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (247 samples, 0.09%)</title><rect x="147.5" y="419.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="150.5" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (147 samples, 0.06%)</title><rect x="148.6" y="419.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.6" y="430.0"></text>
</g>
<g>
<title>byte[] (147 samples, 0.06%)</title><rect x="148.6" y="403.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="151.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (371 samples, 0.14%)</title><rect x="149.3" y="451.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (371 samples, 0.14%)</title><rect x="149.3" y="435.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (254 samples, 0.10%)</title><rect x="149.3" y="419.0" width="1.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="152.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (117 samples, 0.04%)</title><rect x="150.4" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.4" y="430.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.04%)</title><rect x="150.4" y="403.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="153.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (365 samples, 0.14%)</title><rect x="151.0" y="451.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (365 samples, 0.14%)</title><rect x="151.0" y="435.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.0" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (235 samples, 0.09%)</title><rect x="151.0" y="419.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="154.0" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (130 samples, 0.05%)</title><rect x="152.0" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.0" y="430.0"></text>
</g>
<g>
<title>byte[] (130 samples, 0.05%)</title><rect x="152.0" y="403.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="155.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (2,029 samples, 0.78%)</title><rect x="152.6" y="467.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.6" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (104 samples, 0.04%)</title><rect x="152.6" y="451.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="155.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (417 samples, 0.16%)</title><rect x="153.1" y="451.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (417 samples, 0.16%)</title><rect x="153.1" y="435.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.1" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (247 samples, 0.09%)</title><rect x="153.1" y="419.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="156.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (170 samples, 0.06%)</title><rect x="154.2" y="419.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.2" y="430.0"></text>
</g>
<g>
<title>byte[] (170 samples, 0.06%)</title><rect x="154.2" y="403.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="157.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (760 samples, 0.29%)</title><rect x="154.9" y="451.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (760 samples, 0.29%)</title><rect x="154.9" y="435.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.9" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (513 samples, 0.20%)</title><rect x="154.9" y="419.0" width="2.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="157.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (247 samples, 0.09%)</title><rect x="157.3" y="419.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.3" y="430.0"></text>
</g>
<g>
<title>byte[] (247 samples, 0.09%)</title><rect x="157.3" y="403.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="160.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (352 samples, 0.13%)</title><rect x="158.4" y="451.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (352 samples, 0.13%)</title><rect x="158.4" y="435.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.4" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (227 samples, 0.09%)</title><rect x="158.4" y="419.0" width="1.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="161.4" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (125 samples, 0.05%)</title><rect x="159.4" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.4" y="430.0"></text>
</g>
<g>
<title>byte[] (125 samples, 0.05%)</title><rect x="159.4" y="403.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="162.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (396 samples, 0.15%)</title><rect x="160.0" y="451.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (396 samples, 0.15%)</title><rect x="160.0" y="435.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.0" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (244 samples, 0.09%)</title><rect x="160.0" y="419.0" width="1.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="163.0" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (152 samples, 0.06%)</title><rect x="161.1" y="419.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.1" y="430.0"></text>
</g>
<g>
<title>byte[] (152 samples, 0.06%)</title><rect x="161.1" y="403.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="164.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (1,498 samples, 0.57%)</title><rect x="161.7" y="659.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collection.stream (399 samples, 0.15%)</title><rect x="161.7" y="643.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (139 samples, 0.05%)</title><rect x="161.7" y="627.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.7" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (139 samples, 0.05%)</title><rect x="161.7" y="611.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="164.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (260 samples, 0.10%)</title><rect x="162.4" y="627.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.4" y="638.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (260 samples, 0.10%)</title><rect x="162.4" y="611.0" width="1.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="165.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (87 samples, 0.03%)</title><rect x="163.5" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="166.5" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (87 samples, 0.03%)</title><rect x="163.5" y="627.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="166.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (233 samples, 0.09%)</title><rect x="163.9" y="643.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (233 samples, 0.09%)</title><rect x="163.9" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (233 samples, 0.09%)</title><rect x="163.9" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.9" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (233 samples, 0.09%)</title><rect x="163.9" y="595.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="166.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (470 samples, 0.18%)</title><rect x="165.0" y="643.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.0" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (136 samples, 0.05%)</title><rect x="165.0" y="627.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.0" y="638.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (136 samples, 0.05%)</title><rect x="165.0" y="611.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="168.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (334 samples, 0.13%)</title><rect x="165.6" y="627.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (78 samples, 0.03%)</title><rect x="165.6" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.6" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (78 samples, 0.03%)</title><rect x="165.6" y="595.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$612/2010322870.get$Lambda (78 samples, 0.03%)</title><rect x="165.6" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.6" y="590.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$612 (78 samples, 0.03%)</title><rect x="165.6" y="563.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="168.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (256 samples, 0.10%)</title><rect x="166.0" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.0" y="622.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (256 samples, 0.10%)</title><rect x="166.0" y="595.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="169.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (309 samples, 0.12%)</title><rect x="167.1" y="643.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="170.1" y="654.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (309 samples, 0.12%)</title><rect x="167.1" y="627.0" width="1.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="170.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (52,163 samples, 19.93%)</title><rect x="168.5" y="659.0" width="235.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.5" y="670.0">ru/mail/polis/dao/alexander/mar..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (360 samples, 0.14%)</title><rect x="168.5" y="643.0" width="1.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="171.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (51,803 samples, 19.80%)</title><rect x="170.1" y="643.0" width="233.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.1" y="654.0">ru/mail/polis/dao/alexander/mar..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (51,803 samples, 19.80%)</title><rect x="170.1" y="627.0" width="233.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.1" y="638.0">ru/mail/polis/dao/alexander/mar..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (51,803 samples, 19.80%)</title><rect x="170.1" y="611.0" width="233.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.1" y="622.0">ru/mail/polis/dao/alexander/mar..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (18,006 samples, 6.88%)</title><rect x="170.1" y="595.0" width="81.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.1" y="606.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18,006 samples, 6.88%)</title><rect x="170.1" y="579.0" width="81.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.1" y="590.0">java/nio/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,204 samples, 4.28%)</title><rect x="170.1" y="563.0" width="50.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="173.1" y="574.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6,802 samples, 2.60%)</title><rect x="220.7" y="563.0" width="30.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.7" y="574.0">ja..</text>
</g>
<g>
<title>byte[] (6,802 samples, 2.60%)</title><rect x="220.7" y="547.0" width="30.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="223.7" y="558.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (16,760 samples, 6.41%)</title><rect x="251.3" y="595.0" width="75.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.3" y="606.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16,760 samples, 6.41%)</title><rect x="251.3" y="579.0" width="75.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.3" y="590.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,090 samples, 4.24%)</title><rect x="251.3" y="563.0" width="50.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="254.3" y="574.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,670 samples, 2.17%)</title><rect x="301.3" y="563.0" width="25.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.3" y="574.0">j..</text>
</g>
<g>
<title>byte[] (5,670 samples, 2.17%)</title><rect x="301.3" y="547.0" width="25.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="304.3" y="558.0">b..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (17,037 samples, 6.51%)</title><rect x="326.9" y="595.0" width="76.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.9" y="606.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,037 samples, 6.51%)</title><rect x="326.9" y="579.0" width="76.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.9" y="590.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,481 samples, 4.39%)</title><rect x="326.9" y="563.0" width="51.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="329.9" y="574.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,556 samples, 2.12%)</title><rect x="378.7" y="563.0" width="25.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.7" y="574.0">j..</text>
</g>
<g>
<title>byte[] (5,556 samples, 2.12%)</title><rect x="378.7" y="547.0" width="25.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="381.7" y="558.0">b..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (34,440 samples, 13.16%)</title><rect x="403.7" y="739.0" width="155.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.7" y="750.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (34,440 samples, 13.16%)</title><rect x="403.7" y="723.0" width="155.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.7" y="734.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (13,620 samples, 5.21%)</title><rect x="403.7" y="707.0" width="61.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.7" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (13,620 samples, 5.21%)</title><rect x="403.7" y="691.0" width="61.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.7" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (13,620 samples, 5.21%)</title><rect x="403.7" y="675.0" width="61.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.7" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13,620 samples, 5.21%)</title><rect x="403.7" y="659.0" width="61.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.7" y="670.0">java/u..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$195/1649027778.accept (13,522 samples, 5.17%)</title><rect x="403.7" y="643.0" width="61.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.7" y="654.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$respond$2 (13,522 samples, 5.17%)</title><rect x="403.7" y="627.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.7" y="638.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (13,522 samples, 5.17%)</title><rect x="403.7" y="611.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.7" y="622.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13,522 samples, 5.17%)</title><rect x="403.7" y="595.0" width="61.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.7" y="606.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13,522 samples, 5.17%)</title><rect x="403.7" y="579.0" width="61.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.7" y="590.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10,792 samples, 4.12%)</title><rect x="403.7" y="563.0" width="48.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.7" y="574.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (10,792 samples, 4.12%)</title><rect x="403.7" y="547.0" width="48.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.7" y="558.0">one/..</text>
</g>
<g>
<title>byte[] (4,151 samples, 1.59%)</title><rect x="403.7" y="531.0" width="18.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="406.7" y="542.0"></text>
</g>
<g>
<title>byte[] (6,641 samples, 2.54%)</title><rect x="422.5" y="531.0" width="29.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="425.5" y="542.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (2,730 samples, 1.04%)</title><rect x="452.4" y="563.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.4" y="574.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,730 samples, 1.04%)</title><rect x="452.4" y="547.0" width="12.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="455.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer$$Lambda$187/42186313.accept (98 samples, 0.04%)</title><rect x="464.7" y="643.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="467.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer.lambda$atLeastAsync$0 (98 samples, 0.04%)</title><rect x="464.7" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (98 samples, 0.04%)</title><rect x="464.7" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.7" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (98 samples, 0.04%)</title><rect x="464.7" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.7" y="606.0"></text>
</g>
<g>
<title>java.lang.Object[] (98 samples, 0.04%)</title><rect x="464.7" y="579.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="467.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$627/320685865.apply (20,620 samples, 7.88%)</title><rect x="465.2" y="707.0" width="92.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.2" y="718.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$0 (20,620 samples, 7.88%)</title><rect x="465.2" y="691.0" width="92.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.2" y="702.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/112466394.linkToTargetMethod (8,206 samples, 3.14%)</title><rect x="465.2" y="675.0" width="37.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.2" y="686.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1740267528.invoke (8,206 samples, 3.14%)</title><rect x="465.2" y="659.0" width="37.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.2" y="670.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8,206 samples, 3.14%)</title><rect x="465.2" y="643.0" width="37.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.2" y="654.0">jav..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2,865 samples, 1.09%)</title><rect x="465.2" y="627.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.2" y="638.0"></text>
</g>
<g>
<title>java.lang.String (2,865 samples, 1.09%)</title><rect x="465.2" y="611.0" width="12.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="468.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (5,341 samples, 2.04%)</title><rect x="478.1" y="627.0" width="24.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.1" y="638.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (5,341 samples, 2.04%)</title><rect x="478.1" y="611.0" width="24.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="481.1" y="622.0">j..</text>
</g>
<g>
<title>byte[] (5,341 samples, 2.04%)</title><rect x="478.1" y="595.0" width="24.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="481.1" y="606.0">b..</text>
</g>
<g>
<title>one.nio.http.Response (2,454 samples, 0.94%)</title><rect x="502.2" y="675.0" width="11.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="505.2" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9,960 samples, 3.81%)</title><rect x="513.2" y="675.0" width="44.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.2" y="686.0">one/..</text>
</g>
<g>
<title>byte[] (3,755 samples, 1.44%)</title><rect x="513.2" y="659.0" width="17.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="516.2" y="670.0"></text>
</g>
<g>
<title>java.lang.String[] (4,297 samples, 1.64%)</title><rect x="530.2" y="659.0" width="19.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="533.2" y="670.0"></text>
</g>
<g>
<title>java.lang.String (1,908 samples, 0.73%)</title><rect x="549.5" y="659.0" width="8.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="552.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$629/1730022905.apply (200 samples, 0.08%)</title><rect x="558.1" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ValuesAnalyzer.analyze (200 samples, 0.08%)</title><rect x="558.1" y="691.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.1" y="702.0"></text>
</g>
<g>
<title>one.nio.http.Response (79 samples, 0.03%)</title><rect x="558.1" y="675.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="561.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (121 samples, 0.05%)</title><rect x="558.5" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="561.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4,296 samples, 1.64%)</title><rect x="559.0" y="739.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="562.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (4,296 samples, 1.64%)</title><rect x="559.0" y="723.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4,248 samples, 1.62%)</title><rect x="559.0" y="707.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4,248 samples, 1.62%)</title><rect x="559.0" y="691.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.0" y="702.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (4,248 samples, 1.62%)</title><rect x="559.0" y="675.0" width="19.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="562.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$462/368169172.run (1,350 samples, 0.52%)</title><rect x="578.4" y="739.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1,350 samples, 0.52%)</title><rect x="578.4" y="723.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.4" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1,350 samples, 0.52%)</title><rect x="578.4" y="707.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (1,350 samples, 0.52%)</title><rect x="578.4" y="691.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1,350 samples, 0.52%)</title><rect x="578.4" y="675.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1,350 samples, 0.52%)</title><rect x="578.4" y="659.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1,350 samples, 0.52%)</title><rect x="578.4" y="643.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="581.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (1,350 samples, 0.52%)</title><rect x="578.4" y="627.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1,350 samples, 0.52%)</title><rect x="578.4" y="611.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (1,350 samples, 0.52%)</title><rect x="578.4" y="595.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1,350 samples, 0.52%)</title><rect x="578.4" y="579.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (1,196 samples, 0.46%)</title><rect x="578.4" y="563.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.4" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (124 samples, 0.05%)</title><rect x="578.4" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.4" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (124 samples, 0.05%)</title><rect x="578.4" y="531.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="581.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$470/1224839093.get$Lambda (67 samples, 0.03%)</title><rect x="578.4" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="581.4" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$$Lambda$470 (67 samples, 0.03%)</title><rect x="578.4" y="499.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="581.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$496/468503346.get$Lambda (57 samples, 0.02%)</title><rect x="578.7" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.7" y="526.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$$Lambda$496 (57 samples, 0.02%)</title><rect x="578.7" y="499.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="581.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (1,072 samples, 0.41%)</title><rect x="579.0" y="547.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.0" y="558.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$AsyncSupply (108 samples, 0.04%)</title><rect x="579.0" y="531.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="582.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (964 samples, 0.37%)</title><rect x="579.5" y="531.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (964 samples, 0.37%)</title><rect x="579.5" y="515.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (964 samples, 0.37%)</title><rect x="579.5" y="499.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (448 samples, 0.17%)</title><rect x="579.5" y="483.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="582.5" y="494.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniRelay (163 samples, 0.06%)</title><rect x="579.5" y="467.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="582.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$489/1154830608.apply (276 samples, 0.11%)</title><rect x="580.2" y="467.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (276 samples, 0.11%)</title><rect x="580.2" y="451.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="583.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (276 samples, 0.11%)</title><rect x="580.2" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (224 samples, 0.09%)</title><rect x="580.4" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (180 samples, 0.07%)</title><rect x="580.6" y="403.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (180 samples, 0.07%)</title><rect x="580.6" y="387.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.6" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniApply (100 samples, 0.04%)</title><rect x="580.6" y="371.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="583.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (80 samples, 0.03%)</title><rect x="581.1" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (80 samples, 0.03%)</title><rect x="581.1" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="584.1" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (80 samples, 0.03%)</title><rect x="581.1" y="339.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="584.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (516 samples, 0.20%)</title><rect x="581.5" y="483.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (516 samples, 0.20%)</title><rect x="581.5" y="467.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$431/995154411.apply (516 samples, 0.20%)</title><rect x="581.5" y="451.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (516 samples, 0.20%)</title><rect x="581.5" y="435.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (516 samples, 0.20%)</title><rect x="581.5" y="419.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$166/336834840.apply (516 samples, 0.20%)</title><rect x="581.5" y="403.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (516 samples, 0.20%)</title><rect x="581.5" y="387.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (177 samples, 0.07%)</title><rect x="581.7" y="371.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="584.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (177 samples, 0.07%)</title><rect x="581.7" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.7" y="366.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniCompose (95 samples, 0.04%)</title><rect x="581.7" y="339.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="584.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="582.1" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="582.1" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.1" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (82 samples, 0.03%)</title><rect x="582.1" y="307.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="585.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (301 samples, 0.12%)</title><rect x="582.4" y="371.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="585.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.completeSubscriber (168 samples, 0.06%)</title><rect x="582.4" y="355.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.4" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$Http1BodySubscriber$1 (84 samples, 0.03%)</title><rect x="582.4" y="339.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="585.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber$1.&lt;init&gt; (84 samples, 0.03%)</title><rect x="582.8" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="585.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.&lt;init&gt; (84 samples, 0.03%)</title><rect x="582.8" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.8" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (84 samples, 0.03%)</title><rect x="582.8" y="307.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="585.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (133 samples, 0.05%)</title><rect x="583.2" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.2" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Exchange$DataPair (58 samples, 0.02%)</title><rect x="583.2" y="339.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="586.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (75 samples, 0.03%)</title><rect x="583.5" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (75 samples, 0.03%)</title><rect x="583.5" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="586.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (75 samples, 0.03%)</title><rect x="583.5" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (75 samples, 0.03%)</title><rect x="583.5" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="586.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.newNode (75 samples, 0.03%)</title><rect x="583.5" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.5" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentLinkedDeque$Node (75 samples, 0.03%)</title><rect x="583.5" y="259.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="586.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (154 samples, 0.06%)</title><rect x="583.8" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="586.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (154 samples, 0.06%)</title><rect x="583.8" y="547.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (154 samples, 0.06%)</title><rect x="583.8" y="531.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (154 samples, 0.06%)</title><rect x="583.8" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (154 samples, 0.06%)</title><rect x="583.8" y="499.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.8" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (154 samples, 0.06%)</title><rect x="583.8" y="483.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.8" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (59 samples, 0.02%)</title><rect x="583.8" y="467.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.8" y="478.0"></text>
</g>
<g>
<title>java.nio.ByteBuffer[] (59 samples, 0.02%)</title><rect x="583.8" y="451.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="586.8" y="462.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableList.iterator (95 samples, 0.04%)</title><rect x="584.1" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.1" y="478.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$ListItr (95 samples, 0.04%)</title><rect x="584.1" y="451.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="587.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (13,392 samples, 5.12%)</title><rect x="584.5" y="739.0" width="60.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.5" y="750.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (13,392 samples, 5.12%)</title><rect x="584.5" y="723.0" width="60.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.5" y="734.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (11,274 samples, 4.31%)</title><rect x="584.5" y="707.0" width="50.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.5" y="718.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$312/807283364.run (11,274 samples, 4.31%)</title><rect x="584.5" y="691.0" width="50.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="587.5" y="702.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (11,274 samples, 4.31%)</title><rect x="584.5" y="675.0" width="50.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.5" y="686.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (181 samples, 0.07%)</title><rect x="584.5" y="659.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (181 samples, 0.07%)</title><rect x="584.5" y="643.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="587.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (181 samples, 0.07%)</title><rect x="584.5" y="627.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="587.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (181 samples, 0.07%)</title><rect x="584.5" y="611.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/112466394.linkToTargetMethod (109 samples, 0.04%)</title><rect x="584.5" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="587.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/589835301.invoke (109 samples, 0.04%)</title><rect x="584.5" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (109 samples, 0.04%)</title><rect x="584.5" y="563.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.5" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (109 samples, 0.04%)</title><rect x="584.5" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (109 samples, 0.04%)</title><rect x="584.5" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="587.5" y="542.0"></text>
</g>
<g>
<title>byte[] (109 samples, 0.04%)</title><rect x="584.5" y="515.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="587.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (72 samples, 0.03%)</title><rect x="585.0" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (72 samples, 0.03%)</title><rect x="585.0" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (72 samples, 0.03%)</title><rect x="585.0" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$460/216711122.get$Lambda (72 samples, 0.03%)</title><rect x="585.0" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.0" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$460 (72 samples, 0.03%)</title><rect x="585.0" y="531.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="588.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (11,093 samples, 4.24%)</title><rect x="585.3" y="659.0" width="50.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.3" y="670.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (11,093 samples, 4.24%)</title><rect x="585.3" y="643.0" width="50.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.3" y="654.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (11,093 samples, 4.24%)</title><rect x="585.3" y="627.0" width="50.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.3" y="638.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (11,093 samples, 4.24%)</title><rect x="585.3" y="611.0" width="50.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="588.3" y="622.0">jdk/i..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5,005 samples, 1.91%)</title><rect x="585.3" y="595.0" width="22.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.3" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5,005 samples, 1.91%)</title><rect x="585.3" y="579.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.3" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (5,005 samples, 1.91%)</title><rect x="585.3" y="563.0" width="22.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.3" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5,005 samples, 1.91%)</title><rect x="585.3" y="547.0" width="22.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.3" y="558.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (5,005 samples, 1.91%)</title><rect x="585.3" y="531.0" width="22.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.3" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (5,005 samples, 1.91%)</title><rect x="585.3" y="515.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.3" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (5,005 samples, 1.91%)</title><rect x="585.3" y="499.0" width="22.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.3" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4,892 samples, 1.87%)</title><rect x="585.3" y="483.0" width="22.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.3" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4,892 samples, 1.87%)</title><rect x="585.3" y="467.0" width="22.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.3" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (4,795 samples, 1.83%)</title><rect x="585.3" y="451.0" width="21.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.3" y="462.0">j..</text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniRelay (72 samples, 0.03%)</title><rect x="585.3" y="435.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="588.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$148/1113343332.apply (4,563 samples, 1.74%)</title><rect x="585.6" y="435.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="588.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (4,563 samples, 1.74%)</title><rect x="585.6" y="419.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (58 samples, 0.02%)</title><rect x="585.6" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (58 samples, 0.02%)</title><rect x="585.6" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.6" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$591/871888476.get$Lambda (58 samples, 0.02%)</title><rect x="585.6" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.6" y="382.0"></text>
</g>
<g>
<title>jdk.internal.net.http.MultiExchange$$Lambda$591 (58 samples, 0.02%)</title><rect x="585.6" y="355.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="588.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (187 samples, 0.07%)</title><rect x="585.9" y="403.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (187 samples, 0.07%)</title><rect x="585.9" y="387.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.9" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniApply (102 samples, 0.04%)</title><rect x="585.9" y="371.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="588.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (85 samples, 0.03%)</title><rect x="586.4" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="589.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (85 samples, 0.03%)</title><rect x="586.4" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="589.4" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (85 samples, 0.03%)</title><rect x="586.4" y="339.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="589.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (4,318 samples, 1.65%)</title><rect x="586.7" y="403.0" width="19.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="589.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (180 samples, 0.07%)</title><rect x="587.0" y="387.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (180 samples, 0.07%)</title><rect x="587.0" y="371.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="590.0" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (107 samples, 0.04%)</title><rect x="587.0" y="355.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="590.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (73 samples, 0.03%)</title><rect x="587.5" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (73 samples, 0.03%)</title><rect x="587.5" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.5" y="350.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (73 samples, 0.03%)</title><rect x="587.5" y="323.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="590.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (4,084 samples, 1.56%)</title><rect x="587.8" y="387.0" width="18.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="590.8" y="398.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ResponseInfoImpl (82 samples, 0.03%)</title><rect x="587.8" y="371.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="590.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (3,040 samples, 1.16%)</title><rect x="588.2" y="371.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (77 samples, 0.03%)</title><rect x="588.2" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="591.2" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (77 samples, 0.03%)</title><rect x="588.2" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="591.2" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/298107102.linkToTargetMethod (100 samples, 0.04%)</title><rect x="588.5" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.5" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/737814753.invokeStatic (100 samples, 0.04%)</title><rect x="588.5" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="591.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$517/993983476.get$Lambda (100 samples, 0.04%)</title><rect x="588.5" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="591.5" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response$$Lambda$517 (100 samples, 0.04%)</title><rect x="588.5" y="307.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="591.5" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (550 samples, 0.21%)</title><rect x="589.0" y="355.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.0" y="366.0"></text>
</g>
<g>
<title>java/util/Collection.stream (224 samples, 0.09%)</title><rect x="589.0" y="339.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="592.0" y="350.0"></text>
</g>
<g>
<title>java/util/List.spliterator (81 samples, 0.03%)</title><rect x="589.0" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="592.0" y="334.0"></text>
</g>
<g>
<title>java.util.AbstractList$RandomAccessSpliterator (81 samples, 0.03%)</title><rect x="589.0" y="307.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="592.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (143 samples, 0.05%)</title><rect x="589.3" y="323.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.3" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (143 samples, 0.05%)</title><rect x="589.3" y="307.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="592.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (176 samples, 0.07%)</title><rect x="590.0" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="593.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (176 samples, 0.07%)</title><rect x="590.0" y="323.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (176 samples, 0.07%)</title><rect x="590.0" y="307.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (64 samples, 0.02%)</title><rect x="590.0" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.0" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (64 samples, 0.02%)</title><rect x="590.0" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.0" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5.opWrapSink (64 samples, 0.02%)</title><rect x="590.0" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.0" y="270.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$5$1 (64 samples, 0.02%)</title><rect x="590.0" y="243.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="593.0" y="254.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.get (59 samples, 0.02%)</title><rect x="590.5" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.get (59 samples, 0.02%)</title><rect x="590.5" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.5" y="286.0"></text>
</g>
<g>
<title>java/util/OptionalLong.of (59 samples, 0.02%)</title><rect x="590.5" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.5" y="270.0"></text>
</g>
<g>
<title>java.util.OptionalLong (59 samples, 0.02%)</title><rect x="590.5" y="243.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="593.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.mapToLong (150 samples, 0.06%)</title><rect x="590.8" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="593.8" y="350.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$5 (150 samples, 0.06%)</title><rect x="590.8" y="323.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="593.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (376 samples, 0.14%)</title><rect x="591.4" y="355.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (173 samples, 0.07%)</title><rect x="591.4" y="339.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.4" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (103 samples, 0.04%)</title><rect x="591.4" y="323.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="594.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (70 samples, 0.03%)</title><rect x="591.9" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (70 samples, 0.03%)</title><rect x="591.9" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.9" y="318.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (70 samples, 0.03%)</title><rect x="591.9" y="291.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="594.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (203 samples, 0.08%)</title><rect x="592.2" y="339.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (203 samples, 0.08%)</title><rect x="592.2" y="323.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="595.2" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (111 samples, 0.04%)</title><rect x="592.2" y="307.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="595.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (92 samples, 0.04%)</title><rect x="592.7" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="595.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (92 samples, 0.04%)</title><rect x="592.7" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="595.7" y="302.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (92 samples, 0.04%)</title><rect x="592.7" y="275.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="595.7" y="286.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response$Http1BodySubscriber (81 samples, 0.03%)</title><rect x="593.4" y="355.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="596.4" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (92 samples, 0.04%)</title><rect x="593.7" y="355.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="596.7" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1,458 samples, 0.56%)</title><rect x="594.3" y="355.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$517/993983476.run (1,458 samples, 0.56%)</title><rect x="594.3" y="339.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (1,458 samples, 0.56%)</title><rect x="594.3" y="323.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (176 samples, 0.07%)</title><rect x="594.3" y="307.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (176 samples, 0.07%)</title><rect x="594.3" y="291.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$557/551867614.get$Lambda (80 samples, 0.03%)</title><rect x="594.8" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.8" y="286.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1Response$$Lambda$557 (80 samples, 0.03%)</title><rect x="594.8" y="259.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="597.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (171 samples, 0.07%)</title><rect x="595.1" y="307.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (171 samples, 0.07%)</title><rect x="595.1" y="291.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.1" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (97 samples, 0.04%)</title><rect x="595.1" y="275.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="598.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (74 samples, 0.03%)</title><rect x="595.6" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (74 samples, 0.03%)</title><rect x="595.6" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="598.6" y="270.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (74 samples, 0.03%)</title><rect x="595.6" y="243.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="598.6" y="254.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ResponseContent (93 samples, 0.04%)</title><rect x="595.9" y="307.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="598.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.start (80 samples, 0.03%)</title><rect x="596.3" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.3" y="318.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (80 samples, 0.03%)</title><rect x="596.3" y="291.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="599.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (263 samples, 0.10%)</title><rect x="596.7" y="307.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (263 samples, 0.10%)</title><rect x="596.7" y="291.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (209 samples, 0.08%)</title><rect x="596.9" y="275.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (209 samples, 0.08%)</title><rect x="596.9" y="259.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (209 samples, 0.08%)</title><rect x="596.9" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.9" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (113 samples, 0.04%)</title><rect x="596.9" y="227.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="599.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (96 samples, 0.04%)</title><rect x="597.4" y="227.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (96 samples, 0.04%)</title><rect x="597.4" y="211.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="600.4" y="222.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (96 samples, 0.04%)</title><rect x="597.4" y="195.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="600.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.&lt;init&gt; (214 samples, 0.08%)</title><rect x="597.9" y="307.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.9" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (214 samples, 0.08%)</title><rect x="597.9" y="291.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.9" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/399931359.invoke (214 samples, 0.08%)</title><rect x="597.9" y="275.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (214 samples, 0.08%)</title><rect x="597.9" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (163 samples, 0.06%)</title><rect x="598.1" y="243.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (163 samples, 0.06%)</title><rect x="598.1" y="227.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.1" y="238.0"></text>
</g>
<g>
<title>byte[] (163 samples, 0.06%)</title><rect x="598.1" y="211.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="601.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.getBodyParser (461 samples, 0.18%)</title><rect x="598.8" y="307.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.8" y="318.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ResponseContent$FixedLengthBodyParser (144 samples, 0.06%)</title><rect x="598.8" y="291.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="601.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.&lt;init&gt; (317 samples, 0.12%)</title><rect x="599.5" y="291.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="602.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (317 samples, 0.12%)</title><rect x="599.5" y="275.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="602.5" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/399931359.invoke (317 samples, 0.12%)</title><rect x="599.5" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="602.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (317 samples, 0.12%)</title><rect x="599.5" y="243.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="602.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (61 samples, 0.02%)</title><rect x="599.5" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.5" y="238.0"></text>
</g>
<g>
<title>java.lang.String (61 samples, 0.02%)</title><rect x="599.5" y="211.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="602.5" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (256 samples, 0.10%)</title><rect x="599.8" y="227.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (256 samples, 0.10%)</title><rect x="599.8" y="211.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.8" y="222.0"></text>
</g>
<g>
<title>byte[] (256 samples, 0.10%)</title><rect x="599.8" y="195.0" width="1.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="602.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.getBody (214 samples, 0.08%)</title><rect x="600.9" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (214 samples, 0.08%)</title><rect x="600.9" y="339.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (214 samples, 0.08%)</title><rect x="600.9" y="323.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (214 samples, 0.08%)</title><rect x="600.9" y="307.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.9" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniApply (123 samples, 0.05%)</title><rect x="600.9" y="291.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="603.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (91 samples, 0.03%)</title><rect x="601.5" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (91 samples, 0.03%)</title><rect x="601.5" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.5" y="286.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (91 samples, 0.03%)</title><rect x="601.5" y="259.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="604.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/bodyhandlers/BodyHandlerGet.apply (962 samples, 0.37%)</title><rect x="601.9" y="371.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.9" y="382.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (666 samples, 0.25%)</title><rect x="602.0" y="355.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.0" y="366.0"></text>
</g>
<g>
<title>java/util/Collection.stream (241 samples, 0.09%)</title><rect x="602.0" y="339.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.0" y="350.0"></text>
</g>
<g>
<title>java/util/List.spliterator (89 samples, 0.03%)</title><rect x="602.0" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.0" y="334.0"></text>
</g>
<g>
<title>java.util.AbstractList$RandomAccessSpliterator (89 samples, 0.03%)</title><rect x="602.0" y="307.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="605.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (152 samples, 0.06%)</title><rect x="602.4" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="605.4" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (152 samples, 0.06%)</title><rect x="602.4" y="307.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="605.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (291 samples, 0.11%)</title><rect x="603.1" y="339.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.1" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (291 samples, 0.11%)</title><rect x="603.1" y="323.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (291 samples, 0.11%)</title><rect x="603.1" y="307.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (186 samples, 0.07%)</title><rect x="603.1" y="291.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (109 samples, 0.04%)</title><rect x="603.1" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (109 samples, 0.04%)</title><rect x="603.1" y="259.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="606.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (109 samples, 0.04%)</title><rect x="603.1" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.1" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (109 samples, 0.04%)</title><rect x="603.1" y="227.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="606.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (109 samples, 0.04%)</title><rect x="603.1" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.accept (56 samples, 0.02%)</title><rect x="603.4" y="195.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.4" y="206.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (56 samples, 0.02%)</title><rect x="603.4" y="179.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="606.4" y="190.0"></text>
</g>
<g>
<title>java.lang.Long (56 samples, 0.02%)</title><rect x="603.4" y="163.0" width="0.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="606.4" y="174.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (77 samples, 0.03%)</title><rect x="603.6" y="275.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.6" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5.opWrapSink (77 samples, 0.03%)</title><rect x="603.6" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.6" y="270.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$5$1 (77 samples, 0.03%)</title><rect x="603.6" y="243.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="606.6" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.mapToLong (134 samples, 0.05%)</title><rect x="604.4" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.4" y="350.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$5 (134 samples, 0.05%)</title><rect x="604.4" y="323.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="607.4" y="334.0"></text>
</g>
<g>
<title>java/net/http/HttpResponse$BodySubscribers.ofByteArray (215 samples, 0.08%)</title><rect x="605.2" y="355.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="608.2" y="366.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ResponseSubscribers$ByteArraySubscriber (76 samples, 0.03%)</title><rect x="605.2" y="339.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="608.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.&lt;init&gt; (139 samples, 0.05%)</title><rect x="605.6" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.6" y="350.0"></text>
</g>
<g>
<title>java.util.ArrayList (58 samples, 0.02%)</title><rect x="605.6" y="323.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="608.6" y="334.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (81 samples, 0.03%)</title><rect x="605.9" y="323.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="608.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$435/748589287.apply (160 samples, 0.06%)</title><rect x="606.2" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (160 samples, 0.06%)</title><rect x="606.2" y="419.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (69 samples, 0.03%)</title><rect x="606.2" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.2" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.descendingIterator (69 samples, 0.03%)</title><rect x="606.2" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.2" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.&lt;init&gt; (69 samples, 0.03%)</title><rect x="606.2" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.2" y="382.0"></text>
</g>
<g>
<title>java.util.LinkedList$ListItr (69 samples, 0.03%)</title><rect x="606.2" y="355.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="609.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (91 samples, 0.03%)</title><rect x="606.5" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.5" y="414.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (91 samples, 0.03%)</title><rect x="606.5" y="387.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="609.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (97 samples, 0.04%)</title><rect x="606.9" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (97 samples, 0.04%)</title><rect x="606.9" y="435.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$442/1098648480.apply (97 samples, 0.04%)</title><rect x="606.9" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (97 samples, 0.04%)</title><rect x="606.9" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (97 samples, 0.04%)</title><rect x="606.9" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.9" y="398.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (97 samples, 0.04%)</title><rect x="606.9" y="371.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="609.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$498/1789183129.apply (113 samples, 0.04%)</title><rect x="607.4" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (113 samples, 0.04%)</title><rect x="607.4" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="610.4" y="478.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Response (113 samples, 0.04%)</title><rect x="607.4" y="451.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="610.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (6,088 samples, 2.33%)</title><rect x="607.9" y="595.0" width="27.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="610.9" y="606.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (434 samples, 0.17%)</title><rect x="607.9" y="579.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (434 samples, 0.17%)</title><rect x="607.9" y="563.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.9" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (434 samples, 0.17%)</title><rect x="607.9" y="547.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (434 samples, 0.17%)</title><rect x="607.9" y="531.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.9" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (434 samples, 0.17%)</title><rect x="607.9" y="515.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.9" y="526.0"></text>
</g>
<g>
<title>byte[] (434 samples, 0.17%)</title><rect x="607.9" y="499.0" width="1.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="610.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readStatusLineFeed (414 samples, 0.16%)</title><rect x="609.8" y="579.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="612.8" y="590.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (63 samples, 0.02%)</title><rect x="609.8" y="563.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="612.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (73 samples, 0.03%)</title><rect x="610.1" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (73 samples, 0.03%)</title><rect x="610.1" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (73 samples, 0.03%)</title><rect x="610.1" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.1" y="542.0"></text>
</g>
<g>
<title>byte[] (73 samples, 0.03%)</title><rect x="610.1" y="515.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="613.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (79 samples, 0.03%)</title><rect x="610.5" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.5" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (79 samples, 0.03%)</title><rect x="610.5" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.5" y="558.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.03%)</title><rect x="610.5" y="531.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="613.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (199 samples, 0.08%)</title><rect x="610.8" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (199 samples, 0.08%)</title><rect x="610.8" y="547.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.8" y="558.0"></text>
</g>
<g>
<title>java.lang.String (114 samples, 0.04%)</title><rect x="610.8" y="531.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="613.8" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (85 samples, 0.03%)</title><rect x="611.3" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="614.3" y="542.0"></text>
</g>
<g>
<title>byte[] (85 samples, 0.03%)</title><rect x="611.3" y="515.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="614.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (1,548 samples, 0.59%)</title><rect x="611.7" y="579.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="614.7" y="590.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (1,548 samples, 0.59%)</title><rect x="611.7" y="563.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.7" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1,548 samples, 0.59%)</title><rect x="611.7" y="547.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.7" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList (73 samples, 0.03%)</title><rect x="611.9" y="531.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="614.9" y="542.0"></text>
</g>
<g>
<title>java.util.TreeMap (127 samples, 0.05%)</title><rect x="612.2" y="531.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="615.2" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (80 samples, 0.03%)</title><rect x="613.0" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.0" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (80 samples, 0.03%)</title><rect x="613.0" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.0" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.get$Lambda (80 samples, 0.03%)</title><rect x="613.0" y="499.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.0" y="510.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$126 (80 samples, 0.03%)</title><rect x="613.0" y="483.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="616.0" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (82 samples, 0.03%)</title><rect x="613.3" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.3" y="542.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap (82 samples, 0.03%)</title><rect x="613.3" y="515.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="616.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (986 samples, 0.38%)</title><rect x="613.7" y="531.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.7" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.accept (986 samples, 0.38%)</title><rect x="613.7" y="515.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.7" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (986 samples, 0.38%)</title><rect x="613.7" y="499.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.7" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (161 samples, 0.06%)</title><rect x="613.7" y="483.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="616.7" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (161 samples, 0.06%)</title><rect x="613.7" y="467.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.7" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.get$Lambda (161 samples, 0.06%)</title><rect x="613.7" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="616.7" y="462.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$129 (161 samples, 0.06%)</title><rect x="613.7" y="435.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="616.7" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (149 samples, 0.06%)</title><rect x="614.4" y="483.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.4" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.accept (149 samples, 0.06%)</title><rect x="614.4" y="467.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.4" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (149 samples, 0.06%)</title><rect x="614.4" y="451.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.4" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (149 samples, 0.06%)</title><rect x="614.4" y="435.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.4" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (149 samples, 0.06%)</title><rect x="614.4" y="419.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.4" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (149 samples, 0.06%)</title><rect x="614.4" y="403.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.4" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (149 samples, 0.06%)</title><rect x="614.4" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.4" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (149 samples, 0.06%)</title><rect x="614.4" y="371.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.4" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (149 samples, 0.06%)</title><rect x="614.4" y="355.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="617.4" y="366.0"></text>
</g>
<g>
<title>java/util/List.copyOf (378 samples, 0.14%)</title><rect x="615.1" y="483.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="618.1" y="494.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (378 samples, 0.14%)</title><rect x="615.1" y="467.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.1" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (212 samples, 0.08%)</title><rect x="615.1" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.1" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (212 samples, 0.08%)</title><rect x="615.1" y="435.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.1" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (212 samples, 0.08%)</title><rect x="615.1" y="419.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="618.1" y="430.0"></text>
</g>
<g>
<title>java/util/List.of (166 samples, 0.06%)</title><rect x="616.0" y="451.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.0" y="462.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (166 samples, 0.06%)</title><rect x="616.0" y="435.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="619.0" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (298 samples, 0.11%)</title><rect x="616.8" y="483.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.8" y="494.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (298 samples, 0.11%)</title><rect x="616.8" y="467.0" width="1.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="619.8" y="478.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (125 samples, 0.05%)</title><rect x="618.1" y="531.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.1" y="542.0"></text>
</g>
<g>
<title>java.util.TreeMap (125 samples, 0.05%)</title><rect x="618.1" y="515.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="621.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (3,692 samples, 1.41%)</title><rect x="618.7" y="579.0" width="16.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.7" y="590.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (158 samples, 0.06%)</title><rect x="618.7" y="563.0" width="0.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="621.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (258 samples, 0.10%)</title><rect x="619.4" y="563.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.4" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (258 samples, 0.10%)</title><rect x="619.4" y="547.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.4" y="558.0"></text>
</g>
<g>
<title>byte[] (258 samples, 0.10%)</title><rect x="619.4" y="531.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="622.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (493 samples, 0.19%)</title><rect x="620.6" y="563.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (493 samples, 0.19%)</title><rect x="620.6" y="547.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.6" y="558.0"></text>
</g>
<g>
<title>java.lang.String (192 samples, 0.07%)</title><rect x="620.6" y="531.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="623.6" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (301 samples, 0.12%)</title><rect x="621.4" y="531.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="624.4" y="542.0"></text>
</g>
<g>
<title>byte[] (301 samples, 0.12%)</title><rect x="621.4" y="515.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="624.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (2,783 samples, 1.06%)</title><rect x="622.8" y="563.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="625.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (890 samples, 0.34%)</title><rect x="622.8" y="547.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (890 samples, 0.34%)</title><rect x="622.8" y="531.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="625.8" y="542.0"></text>
</g>
<g>
<title>java.lang.String (413 samples, 0.16%)</title><rect x="622.8" y="515.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="625.8" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (477 samples, 0.18%)</title><rect x="624.7" y="515.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.7" y="526.0"></text>
</g>
<g>
<title>byte[] (477 samples, 0.18%)</title><rect x="624.7" y="499.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="627.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (432 samples, 0.17%)</title><rect x="626.8" y="547.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (432 samples, 0.17%)</title><rect x="626.8" y="531.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.8" y="542.0"></text>
</g>
<g>
<title>byte[] (234 samples, 0.09%)</title><rect x="626.8" y="515.0" width="1.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="629.8" y="526.0"></text>
</g>
<g>
<title>java.lang.String (198 samples, 0.08%)</title><rect x="627.9" y="515.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="630.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.trim (428 samples, 0.16%)</title><rect x="628.8" y="547.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="631.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (428 samples, 0.16%)</title><rect x="628.8" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (428 samples, 0.16%)</title><rect x="628.8" y="515.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="631.8" y="526.0"></text>
</g>
<g>
<title>java.lang.String (190 samples, 0.07%)</title><rect x="628.8" y="499.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="631.8" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (238 samples, 0.09%)</title><rect x="629.6" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.6" y="510.0"></text>
</g>
<g>
<title>byte[] (238 samples, 0.09%)</title><rect x="629.6" y="483.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="632.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (414 samples, 0.16%)</title><rect x="630.7" y="547.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.7" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (414 samples, 0.16%)</title><rect x="630.7" y="531.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.7" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (414 samples, 0.16%)</title><rect x="630.7" y="515.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.7" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (414 samples, 0.16%)</title><rect x="630.7" y="499.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (414 samples, 0.16%)</title><rect x="630.7" y="483.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.7" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (414 samples, 0.16%)</title><rect x="630.7" y="467.0" width="1.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="633.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (619 samples, 0.24%)</title><rect x="632.5" y="547.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (244 samples, 0.09%)</title><rect x="632.5" y="531.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.5" y="542.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (244 samples, 0.09%)</title><rect x="632.5" y="515.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="635.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (203 samples, 0.08%)</title><rect x="633.6" y="531.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.6" y="542.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (203 samples, 0.08%)</title><rect x="633.6" y="515.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="636.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser$$Lambda$505/1217157280.apply (172 samples, 0.07%)</title><rect x="634.6" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.lambda$addHeaderFromString$0 (172 samples, 0.07%)</title><rect x="634.6" y="515.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.6" y="526.0"></text>
</g>
<g>
<title>java.util.ArrayList (172 samples, 0.07%)</title><rect x="634.6" y="499.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="637.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2,118 samples, 0.81%)</title><rect x="635.3" y="707.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2,118 samples, 0.81%)</title><rect x="635.3" y="691.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2,118 samples, 0.81%)</title><rect x="635.3" y="675.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$312/807283364.run (2,118 samples, 0.81%)</title><rect x="635.3" y="659.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (2,118 samples, 0.81%)</title><rect x="635.3" y="643.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (303 samples, 0.12%)</title><rect x="635.3" y="627.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (110 samples, 0.04%)</title><rect x="635.3" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (110 samples, 0.04%)</title><rect x="635.3" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$374/333994348.get$Lambda (59 samples, 0.02%)</title><rect x="635.6" y="579.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.6" y="590.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver$$Lambda$374 (59 samples, 0.02%)</title><rect x="635.6" y="563.0" width="0.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="638.6" y="574.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Http1AsyncReceiver$Http1AsyncDelegateSubscription (82 samples, 0.03%)</title><rect x="635.8" y="611.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="638.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.&lt;init&gt; (111 samples, 0.04%)</title><rect x="636.2" y="611.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AbstractSubscription.&lt;init&gt; (111 samples, 0.04%)</title><rect x="636.2" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.&lt;init&gt; (67 samples, 0.03%)</title><rect x="636.4" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.4" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicLong (67 samples, 0.03%)</title><rect x="636.4" y="563.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="639.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (1,810 samples, 0.69%)</title><rect x="636.7" y="627.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (1,810 samples, 0.69%)</title><rect x="636.7" y="611.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (1,810 samples, 0.69%)</title><rect x="636.7" y="595.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (1,810 samples, 0.69%)</title><rect x="636.7" y="579.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (1,810 samples, 0.69%)</title><rect x="636.7" y="563.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (1,810 samples, 0.69%)</title><rect x="636.7" y="547.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (129 samples, 0.05%)</title><rect x="636.7" y="531.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (129 samples, 0.05%)</title><rect x="636.7" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="639.7" y="526.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (129 samples, 0.05%)</title><rect x="636.7" y="499.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="639.7" y="510.0"></text>
</g>
<g>
<title>java/util/List.of (74 samples, 0.03%)</title><rect x="637.3" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.3" y="542.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (74 samples, 0.03%)</title><rect x="637.3" y="515.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="640.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$529/1767851527.run (1,004 samples, 0.38%)</title><rect x="637.6" y="531.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (1,004 samples, 0.38%)</title><rect x="637.6" y="515.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (1,004 samples, 0.38%)</title><rect x="637.6" y="499.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.6" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (307 samples, 0.12%)</title><rect x="637.6" y="483.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.6" y="494.0"></text>
</g>
<g>
<title>java/util/Collection.stream (208 samples, 0.08%)</title><rect x="637.6" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.6" y="478.0"></text>
</g>
<g>
<title>java/util/List.spliterator (76 samples, 0.03%)</title><rect x="637.6" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.6" y="462.0"></text>
</g>
<g>
<title>java.util.AbstractList$RandomAccessSpliterator (76 samples, 0.03%)</title><rect x="637.6" y="435.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="640.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (132 samples, 0.05%)</title><rect x="638.0" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.0" y="462.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (132 samples, 0.05%)</title><rect x="638.0" y="435.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="641.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (99 samples, 0.04%)</title><rect x="638.6" y="467.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (99 samples, 0.04%)</title><rect x="638.6" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (99 samples, 0.04%)</title><rect x="638.6" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="641.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (697 samples, 0.27%)</title><rect x="639.0" y="483.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.0" y="494.0"></text>
</g>
<g>
<title>java/time/Instant.now (64 samples, 0.02%)</title><rect x="639.0" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.0" y="478.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (64 samples, 0.02%)</title><rect x="639.0" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.0" y="462.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (64 samples, 0.02%)</title><rect x="639.0" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.0" y="446.0"></text>
</g>
<g>
<title>java/time/Instant.create (64 samples, 0.02%)</title><rect x="639.0" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.0" y="430.0"></text>
</g>
<g>
<title>java.time.Instant (64 samples, 0.02%)</title><rect x="639.0" y="403.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="642.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (633 samples, 0.24%)</title><rect x="639.3" y="467.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (258 samples, 0.10%)</title><rect x="639.3" y="451.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="642.3" y="462.0"></text>
</g>
<g>
<title>java/time/Instant.plus (60 samples, 0.02%)</title><rect x="639.3" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.3" y="446.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (60 samples, 0.02%)</title><rect x="639.3" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.3" y="430.0"></text>
</g>
<g>
<title>java/time/Instant.plus (60 samples, 0.02%)</title><rect x="639.3" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.3" y="414.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (60 samples, 0.02%)</title><rect x="639.3" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.3" y="398.0"></text>
</g>
<g>
<title>java/time/Instant.create (60 samples, 0.02%)</title><rect x="639.3" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.3" y="382.0"></text>
</g>
<g>
<title>java.time.Instant (60 samples, 0.02%)</title><rect x="639.3" y="355.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="642.3" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (69 samples, 0.03%)</title><rect x="639.6" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.6" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (69 samples, 0.03%)</title><rect x="639.6" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.6" y="430.0"></text>
</g>
<g>
<title>java.util.LinkedList$ListItr (69 samples, 0.03%)</title><rect x="639.6" y="403.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="642.6" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (62 samples, 0.02%)</title><rect x="639.9" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.9" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (62 samples, 0.02%)</title><rect x="639.9" y="419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.9" y="430.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (62 samples, 0.02%)</title><rect x="639.9" y="403.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="642.9" y="414.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ConnectionPool$ExpiryEntry (62 samples, 0.02%)</title><rect x="640.2" y="435.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="643.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (124 samples, 0.05%)</title><rect x="640.5" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.5" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (70 samples, 0.03%)</title><rect x="640.7" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.7" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (70 samples, 0.03%)</title><rect x="640.7" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.7" y="430.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (70 samples, 0.03%)</title><rect x="640.7" y="403.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="643.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (251 samples, 0.10%)</title><rect x="641.0" y="451.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (196 samples, 0.07%)</title><rect x="641.3" y="435.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (148 samples, 0.06%)</title><rect x="641.5" y="419.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (148 samples, 0.06%)</title><rect x="641.5" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.5" y="414.0"></text>
</g>
<g>
<title>jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription (109 samples, 0.04%)</title><rect x="641.5" y="387.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="644.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (401 samples, 0.15%)</title><rect x="642.2" y="531.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (401 samples, 0.15%)</title><rect x="642.2" y="515.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (401 samples, 0.15%)</title><rect x="642.2" y="499.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (401 samples, 0.15%)</title><rect x="642.2" y="483.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (314 samples, 0.12%)</title><rect x="642.2" y="467.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (314 samples, 0.12%)</title><rect x="642.2" y="451.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (176 samples, 0.07%)</title><rect x="642.2" y="435.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/bodyhandlers/BodyHandlerGet$$Lambda$637/96987729.apply (176 samples, 0.07%)</title><rect x="642.2" y="419.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/bodyhandlers/BodyHandlerGet.lambda$apply$0 (176 samples, 0.07%)</title><rect x="642.2" y="403.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (113 samples, 0.04%)</title><rect x="642.2" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (113 samples, 0.04%)</title><rect x="642.2" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (113 samples, 0.04%)</title><rect x="642.2" y="355.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="645.2" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (63 samples, 0.02%)</title><rect x="642.7" y="387.0" width="0.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="645.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (138 samples, 0.05%)</title><rect x="642.9" y="435.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (138 samples, 0.05%)</title><rect x="642.9" y="419.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$570/671483565.accept (138 samples, 0.05%)</title><rect x="642.9" y="403.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (138 samples, 0.05%)</title><rect x="642.9" y="387.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (138 samples, 0.05%)</title><rect x="642.9" y="371.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (138 samples, 0.05%)</title><rect x="642.9" y="355.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (138 samples, 0.05%)</title><rect x="642.9" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$591/871888476.apply (138 samples, 0.05%)</title><rect x="642.9" y="323.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$3 (138 samples, 0.05%)</title><rect x="642.9" y="307.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.9" y="318.0"></text>
</g>
<g>
<title>jdk.internal.net.http.HttpResponseImpl (138 samples, 0.05%)</title><rect x="642.9" y="291.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="645.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (87 samples, 0.03%)</title><rect x="643.6" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="646.6" y="478.0"></text>
</g>
<g>
<title>byte[] (87 samples, 0.03%)</title><rect x="643.6" y="451.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="646.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="531.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="515.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="499.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="483.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.0" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="467.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (202 samples, 0.08%)</title><rect x="644.0" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.0" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.addAll (202 samples, 0.08%)</title><rect x="644.0" y="435.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.0" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (72 samples, 0.03%)</title><rect x="644.0" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.0" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (72 samples, 0.03%)</title><rect x="644.0" y="403.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="647.0" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (130 samples, 0.05%)</title><rect x="644.3" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.3" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (130 samples, 0.05%)</title><rect x="644.3" y="403.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.3" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (130 samples, 0.05%)</title><rect x="644.3" y="387.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="647.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$623/2089019041.run (11,585 samples, 4.43%)</title><rect x="644.9" y="739.0" width="52.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.9" y="750.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$3 (11,585 samples, 4.43%)</title><rect x="644.9" y="723.0" width="52.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.9" y="734.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.get (9,765 samples, 3.73%)</title><rect x="644.9" y="707.0" width="44.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="647.9" y="718.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (515 samples, 0.20%)</title><rect x="645.0" y="691.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (515 samples, 0.20%)</title><rect x="645.0" y="675.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.0" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniApply (313 samples, 0.12%)</title><rect x="645.0" y="659.0" width="1.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="648.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (118 samples, 0.05%)</title><rect x="646.4" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.4" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (118 samples, 0.05%)</title><rect x="646.4" y="643.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="649.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (81 samples, 0.03%)</title><rect x="647.0" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="650.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (81 samples, 0.03%)</title><rect x="647.0" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.0" y="654.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (81 samples, 0.03%)</title><rect x="647.0" y="627.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="650.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (5,190 samples, 1.98%)</title><rect x="647.3" y="691.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.3" y="702.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (5,190 samples, 1.98%)</title><rect x="647.3" y="675.0" width="23.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.3" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (5,190 samples, 1.98%)</title><rect x="647.3" y="659.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.3" y="670.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (5,190 samples, 1.98%)</title><rect x="647.3" y="643.0" width="23.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="650.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (182 samples, 0.07%)</title><rect x="647.5" y="627.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (182 samples, 0.07%)</title><rect x="647.5" y="611.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.5" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (100 samples, 0.04%)</title><rect x="647.5" y="595.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="650.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="647.9" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="650.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (82 samples, 0.03%)</title><rect x="647.9" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.9" y="590.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (82 samples, 0.03%)</title><rect x="647.9" y="563.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="650.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (172 samples, 0.07%)</title><rect x="648.3" y="627.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="651.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (172 samples, 0.07%)</title><rect x="648.3" y="611.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.3" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (98 samples, 0.04%)</title><rect x="648.3" y="595.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="651.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (74 samples, 0.03%)</title><rect x="648.8" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (74 samples, 0.03%)</title><rect x="648.8" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.8" y="590.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (74 samples, 0.03%)</title><rect x="648.8" y="563.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="651.8" y="574.0"></text>
</g>
<g>
<title>jdk.internal.net.http.HttpRequestImpl (153 samples, 0.06%)</title><rect x="649.1" y="627.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="652.1" y="638.0"></text>
</g>
<g>
<title>jdk.internal.net.http.MultiExchange (231 samples, 0.09%)</title><rect x="649.8" y="627.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="652.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (2,550 samples, 0.97%)</title><rect x="650.8" y="627.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.8" y="638.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (277 samples, 0.11%)</title><rect x="650.8" y="611.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (220 samples, 0.08%)</title><rect x="650.8" y="595.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.8" y="606.0"></text>
</g>
<g>
<title>java/util/List.spliterator (73 samples, 0.03%)</title><rect x="650.8" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.8" y="590.0"></text>
</g>
<g>
<title>java.util.AbstractList$RandomAccessSpliterator (73 samples, 0.03%)</title><rect x="650.8" y="563.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="653.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (147 samples, 0.06%)</title><rect x="651.2" y="579.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.2" y="590.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (147 samples, 0.06%)</title><rect x="651.2" y="563.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="654.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (57 samples, 0.02%)</title><rect x="651.8" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (57 samples, 0.02%)</title><rect x="651.8" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (57 samples, 0.02%)</title><rect x="651.8" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfRef$$Lambda$59/1613255205.get (57 samples, 0.02%)</title><rect x="651.8" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="654.8" y="558.0"></text>
</g>
<g>
<title>java.util.stream.FindOps$FindSink$OfRef (57 samples, 0.02%)</title><rect x="651.8" y="531.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="654.8" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (1,013 samples, 0.39%)</title><rect x="652.1" y="611.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="655.1" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1,013 samples, 0.39%)</title><rect x="652.1" y="595.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.1" y="606.0"></text>
</g>
<g>
<title>java.util.TreeMap (140 samples, 0.05%)</title><rect x="652.5" y="579.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="655.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (67 samples, 0.03%)</title><rect x="653.3" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.3" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (67 samples, 0.03%)</title><rect x="653.3" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.3" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.get$Lambda (67 samples, 0.03%)</title><rect x="653.3" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.3" y="558.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$126 (67 samples, 0.03%)</title><rect x="653.3" y="531.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="656.3" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (484 samples, 0.18%)</title><rect x="653.6" y="579.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (484 samples, 0.18%)</title><rect x="653.6" y="563.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.6" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.accept (484 samples, 0.18%)</title><rect x="653.6" y="547.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.6" y="558.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (484 samples, 0.18%)</title><rect x="653.6" y="531.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="656.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (224 samples, 0.09%)</title><rect x="653.6" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.6" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.accept (149 samples, 0.06%)</title><rect x="653.6" y="499.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.6" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (149 samples, 0.06%)</title><rect x="653.6" y="483.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (149 samples, 0.06%)</title><rect x="653.6" y="467.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.6" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (149 samples, 0.06%)</title><rect x="653.6" y="451.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.6" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (149 samples, 0.06%)</title><rect x="653.6" y="435.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.6" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (149 samples, 0.06%)</title><rect x="653.6" y="419.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.6" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (149 samples, 0.06%)</title><rect x="653.6" y="403.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.6" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (149 samples, 0.06%)</title><rect x="653.6" y="387.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="656.6" y="398.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableList.iterator (75 samples, 0.03%)</title><rect x="654.3" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.3" y="510.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$ListItr (75 samples, 0.03%)</title><rect x="654.3" y="483.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="657.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (64 samples, 0.02%)</title><rect x="654.6" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.6" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (64 samples, 0.02%)</title><rect x="654.6" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.6" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.get$Lambda (64 samples, 0.02%)</title><rect x="654.6" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.6" y="494.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$129 (64 samples, 0.02%)</title><rect x="654.6" y="467.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="657.6" y="478.0"></text>
</g>
<g>
<title>java/util/List.copyOf (121 samples, 0.05%)</title><rect x="654.9" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.9" y="526.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (121 samples, 0.05%)</title><rect x="654.9" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.9" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (63 samples, 0.02%)</title><rect x="654.9" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.9" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (63 samples, 0.02%)</title><rect x="654.9" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.9" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (63 samples, 0.02%)</title><rect x="654.9" y="451.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="657.9" y="462.0"></text>
</g>
<g>
<title>java/util/List.of (58 samples, 0.02%)</title><rect x="655.2" y="483.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.2" y="494.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (58 samples, 0.02%)</title><rect x="655.2" y="467.0" width="0.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="658.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (75 samples, 0.03%)</title><rect x="655.4" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.4" y="526.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (75 samples, 0.03%)</title><rect x="655.4" y="499.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="658.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (87 samples, 0.03%)</title><rect x="655.8" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.8" y="590.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap (87 samples, 0.03%)</title><rect x="655.8" y="563.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="658.8" y="574.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (108 samples, 0.04%)</title><rect x="656.2" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="590.0"></text>
</g>
<g>
<title>java.util.TreeMap (108 samples, 0.04%)</title><rect x="656.2" y="563.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="659.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (884 samples, 0.34%)</title><rect x="656.8" y="611.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.8" y="622.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (884 samples, 0.34%)</title><rect x="656.8" y="595.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.8" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (806 samples, 0.31%)</title><rect x="656.8" y="579.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.8" y="590.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (806 samples, 0.31%)</title><rect x="656.8" y="563.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="659.8" y="574.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (806 samples, 0.31%)</title><rect x="656.8" y="547.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.8" y="558.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (178 samples, 0.07%)</title><rect x="656.8" y="531.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="659.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (241 samples, 0.09%)</title><rect x="657.6" y="531.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.6" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (241 samples, 0.09%)</title><rect x="657.6" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.6" y="526.0"></text>
</g>
<g>
<title>byte[] (241 samples, 0.09%)</title><rect x="657.6" y="499.0" width="1.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="660.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (387 samples, 0.15%)</title><rect x="658.7" y="531.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (387 samples, 0.15%)</title><rect x="658.7" y="515.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.7" y="526.0"></text>
</g>
<g>
<title>java.lang.String (161 samples, 0.06%)</title><rect x="658.7" y="499.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="661.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (226 samples, 0.09%)</title><rect x="659.4" y="499.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.4" y="510.0"></text>
</g>
<g>
<title>byte[] (226 samples, 0.09%)</title><rect x="659.4" y="483.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="662.4" y="494.0"></text>
</g>
<g>
<title>sun.net.spi.DefaultProxySelector$4 (78 samples, 0.03%)</title><rect x="660.4" y="579.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="663.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.&lt;init&gt; (107 samples, 0.04%)</title><rect x="660.8" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="622.0"></text>
</g>
<g>
<title>java.util.TreeMap (107 samples, 0.04%)</title><rect x="660.8" y="595.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="663.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (236 samples, 0.09%)</title><rect x="661.3" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="664.3" y="622.0"></text>
</g>
<g>
<title>java.util.ArrayList (74 samples, 0.03%)</title><rect x="661.3" y="595.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="664.3" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (71 samples, 0.03%)</title><rect x="661.6" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="664.6" y="606.0"></text>
</g>
<g>
<title>java.lang.Object[] (71 samples, 0.03%)</title><rect x="661.6" y="579.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="664.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (91 samples, 0.03%)</title><rect x="661.9" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.9" y="606.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (91 samples, 0.03%)</title><rect x="661.9" y="579.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="664.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (1,305 samples, 0.50%)</title><rect x="662.3" y="627.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.3" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.map (128 samples, 0.05%)</title><rect x="662.5" y="611.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$136/1080137905.apply (128 samples, 0.05%)</title><rect x="662.5" y="595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.5" y="606.0"></text>
</g>
<g>
<title>jdk.internal.net.http.MultiExchange$ConnectTimeoutTracker (68 samples, 0.03%)</title><rect x="662.5" y="579.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="665.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$ConnectTimeoutTracker.&lt;init&gt; (60 samples, 0.02%)</title><rect x="662.8" y="579.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.8" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.atomic.AtomicLong (60 samples, 0.02%)</title><rect x="662.8" y="563.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="665.8" y="574.0"></text>
</g>
<g>
<title>jdk.internal.net.http.Exchange (168 samples, 0.06%)</title><rect x="663.1" y="611.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="666.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (888 samples, 0.34%)</title><rect x="664.2" y="611.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (888 samples, 0.34%)</title><rect x="664.2" y="595.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.2" y="606.0"></text>
</g>
<g>
<title>java.lang.Class[] (74 samples, 0.03%)</title><rect x="664.2" y="579.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="667.2" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (75 samples, 0.03%)</title><rect x="664.5" y="579.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="667.5" y="590.0"></text>
</g>
<g>
<title>java.util.LinkedList (92 samples, 0.04%)</title><rect x="664.9" y="579.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="667.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (352 samples, 0.13%)</title><rect x="665.3" y="579.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/ReflectionFactory.copyConstructor (352 samples, 0.13%)</title><rect x="665.3" y="563.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.3" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyConstructor (352 samples, 0.13%)</title><rect x="665.3" y="547.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.3" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (352 samples, 0.13%)</title><rect x="665.3" y="531.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.3" y="542.0"></text>
</g>
<g>
<title>java.lang.reflect.Constructor (352 samples, 0.13%)</title><rect x="665.3" y="515.0" width="1.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="668.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (120 samples, 0.05%)</title><rect x="666.9" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (120 samples, 0.05%)</title><rect x="666.9" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor9.newInstance (87 samples, 0.03%)</title><rect x="667.0" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.0" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.RedirectFilter (87 samples, 0.03%)</title><rect x="667.0" y="531.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="670.0" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (72 samples, 0.03%)</title><rect x="667.4" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.4" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (72 samples, 0.03%)</title><rect x="667.4" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.4" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (72 samples, 0.03%)</title><rect x="667.4" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.4" y="558.0"></text>
</g>
<g>
<title>java.util.LinkedList$ListItr (72 samples, 0.03%)</title><rect x="667.4" y="531.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="670.4" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (103 samples, 0.04%)</title><rect x="667.7" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.7" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (103 samples, 0.04%)</title><rect x="667.7" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.7" y="574.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (103 samples, 0.04%)</title><rect x="667.7" y="547.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="670.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (564 samples, 0.22%)</title><rect x="668.2" y="627.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (62 samples, 0.02%)</title><rect x="668.2" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.2" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$AsyncSupply (58 samples, 0.02%)</title><rect x="668.2" y="595.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="671.2" y="606.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (79 samples, 0.03%)</title><rect x="668.5" y="611.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="671.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (423 samples, 0.16%)</title><rect x="668.8" y="611.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (62 samples, 0.02%)</title><rect x="668.8" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (62 samples, 0.02%)</title><rect x="668.8" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (361 samples, 0.14%)</title><rect x="669.1" y="595.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (361 samples, 0.14%)</title><rect x="669.1" y="579.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.1" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniCompose (197 samples, 0.08%)</title><rect x="669.1" y="563.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="672.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (164 samples, 0.06%)</title><rect x="670.0" y="563.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (164 samples, 0.06%)</title><rect x="670.0" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.0" y="558.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (164 samples, 0.06%)</title><rect x="670.0" y="531.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="673.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (1,045 samples, 0.40%)</title><rect x="670.8" y="691.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.8" y="702.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ImmutableHttpRequest (84 samples, 0.03%)</title><rect x="670.8" y="675.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="673.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (961 samples, 0.37%)</title><rect x="671.1" y="675.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.1" y="686.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (927 samples, 0.35%)</title><rect x="671.1" y="659.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="674.1" y="670.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (927 samples, 0.35%)</title><rect x="671.1" y="643.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.1" y="654.0"></text>
</g>
<g>
<title>java.util.ArrayList (59 samples, 0.02%)</title><rect x="671.3" y="627.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="674.3" y="638.0"></text>
</g>
<g>
<title>java.util.TreeMap (109 samples, 0.04%)</title><rect x="671.6" y="627.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="674.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (77 samples, 0.03%)</title><rect x="672.2" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="675.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (77 samples, 0.03%)</title><rect x="672.2" y="611.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.2" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.get$Lambda (77 samples, 0.03%)</title><rect x="672.2" y="595.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.2" y="606.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$126 (77 samples, 0.03%)</title><rect x="672.2" y="579.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="675.2" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (69 samples, 0.03%)</title><rect x="672.6" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="675.6" y="638.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap (69 samples, 0.03%)</title><rect x="672.6" y="611.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="675.6" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (415 samples, 0.16%)</title><rect x="672.9" y="627.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.9" y="638.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/1651491428.accept (415 samples, 0.16%)</title><rect x="672.9" y="611.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.9" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (415 samples, 0.16%)</title><rect x="672.9" y="595.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (65 samples, 0.02%)</title><rect x="672.9" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (65 samples, 0.02%)</title><rect x="672.9" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.9" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.get$Lambda (65 samples, 0.02%)</title><rect x="672.9" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.9" y="558.0"></text>
</g>
<g>
<title>java.net.http.HttpHeaders$$Lambda$129 (65 samples, 0.02%)</title><rect x="672.9" y="531.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="675.9" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (152 samples, 0.06%)</title><rect x="673.2" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.2" y="590.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$129/677985599.accept (152 samples, 0.06%)</title><rect x="673.2" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.2" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (152 samples, 0.06%)</title><rect x="673.2" y="547.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.2" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (152 samples, 0.06%)</title><rect x="673.2" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.2" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (152 samples, 0.06%)</title><rect x="673.2" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="676.2" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (152 samples, 0.06%)</title><rect x="673.2" y="499.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.2" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (152 samples, 0.06%)</title><rect x="673.2" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="676.2" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (152 samples, 0.06%)</title><rect x="673.2" y="467.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.2" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (152 samples, 0.06%)</title><rect x="673.2" y="451.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="676.2" y="462.0"></text>
</g>
<g>
<title>java/util/List.copyOf (108 samples, 0.04%)</title><rect x="673.9" y="579.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.9" y="590.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (108 samples, 0.04%)</title><rect x="673.9" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="676.9" y="574.0"></text>
</g>
<g>
<title>java/util/List.of (56 samples, 0.02%)</title><rect x="674.1" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.1" y="558.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$List12 (56 samples, 0.02%)</title><rect x="674.1" y="531.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="677.1" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (90 samples, 0.03%)</title><rect x="674.4" y="579.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.4" y="590.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (90 samples, 0.03%)</title><rect x="674.4" y="563.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="677.4" y="574.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (122 samples, 0.05%)</title><rect x="674.8" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.8" y="638.0"></text>
</g>
<g>
<title>java.util.TreeMap (122 samples, 0.05%)</title><rect x="674.8" y="611.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="677.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (209 samples, 0.08%)</title><rect x="675.5" y="691.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (209 samples, 0.08%)</title><rect x="675.5" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.addHeader (209 samples, 0.08%)</title><rect x="675.5" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.5" y="670.0"></text>
</g>
<g>
<title>java/util/Map.computeIfAbsent (209 samples, 0.08%)</title><rect x="675.5" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.5" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (86 samples, 0.03%)</title><rect x="675.5" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.5" y="638.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (86 samples, 0.03%)</title><rect x="675.5" y="611.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="678.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder$$Lambda$123/180582291.apply (123 samples, 0.05%)</title><rect x="675.9" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="678.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.lambda$addHeader$0 (123 samples, 0.05%)</title><rect x="675.9" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.9" y="622.0"></text>
</g>
<g>
<title>java.util.ArrayList (66 samples, 0.03%)</title><rect x="675.9" y="595.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="678.9" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (57 samples, 0.02%)</title><rect x="676.2" y="595.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.2" y="606.0"></text>
</g>
<g>
<title>java.lang.Object[] (57 samples, 0.02%)</title><rect x="676.2" y="579.0" width="0.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="679.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (175 samples, 0.07%)</title><rect x="676.4" y="691.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (175 samples, 0.07%)</title><rect x="676.4" y="675.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="679.4" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (175 samples, 0.07%)</title><rect x="676.4" y="659.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.4" y="670.0"></text>
</g>
<g>
<title>java.lang.String (96 samples, 0.04%)</title><rect x="676.4" y="643.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="679.4" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (79 samples, 0.03%)</title><rect x="676.8" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.8" y="654.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.03%)</title><rect x="676.8" y="627.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="679.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (346 samples, 0.13%)</title><rect x="677.2" y="691.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.2" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (115 samples, 0.04%)</title><rect x="677.2" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (115 samples, 0.04%)</title><rect x="677.2" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager$$Lambda$626/500869858.get$Lambda (115 samples, 0.04%)</title><rect x="677.2" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.2" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.DaoManager$$Lambda$626 (115 samples, 0.04%)</title><rect x="677.2" y="627.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="680.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (231 samples, 0.09%)</title><rect x="677.7" y="675.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (231 samples, 0.09%)</title><rect x="677.7" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.7" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$AsyncSupply (116 samples, 0.04%)</title><rect x="677.7" y="643.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="680.7" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (112 samples, 0.04%)</title><rect x="678.2" y="643.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="681.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.requestForReplicaBuilder (1,553 samples, 0.59%)</title><rect x="678.8" y="691.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.8" y="702.0"></text>
</g>
<g>
<title>java.net.URI (197 samples, 0.08%)</title><rect x="678.8" y="675.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="681.8" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (235 samples, 0.09%)</title><rect x="679.6" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (235 samples, 0.09%)</title><rect x="679.6" y="659.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/662822946.invoke (235 samples, 0.09%)</title><rect x="679.6" y="643.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (235 samples, 0.09%)</title><rect x="679.6" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (74 samples, 0.03%)</title><rect x="679.6" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.6" y="622.0"></text>
</g>
<g>
<title>java.lang.String (74 samples, 0.03%)</title><rect x="679.6" y="595.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="682.6" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (161 samples, 0.06%)</title><rect x="680.0" y="611.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="683.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (161 samples, 0.06%)</title><rect x="680.0" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.0" y="606.0"></text>
</g>
<g>
<title>byte[] (161 samples, 0.06%)</title><rect x="680.0" y="579.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="683.0" y="590.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (846 samples, 0.32%)</title><rect x="680.7" y="675.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.7" y="686.0"></text>
</g>
<g>
<title>java.net.URI$Parser (92 samples, 0.04%)</title><rect x="680.7" y="659.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="683.7" y="670.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (754 samples, 0.29%)</title><rect x="681.1" y="659.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="684.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (145 samples, 0.06%)</title><rect x="681.1" y="643.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (145 samples, 0.06%)</title><rect x="681.1" y="627.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="684.1" y="638.0"></text>
</g>
<g>
<title>java.lang.String (69 samples, 0.03%)</title><rect x="681.1" y="611.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="684.1" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (76 samples, 0.03%)</title><rect x="681.4" y="611.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.4" y="622.0"></text>
</g>
<g>
<title>byte[] (76 samples, 0.03%)</title><rect x="681.4" y="595.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="684.4" y="606.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (609 samples, 0.23%)</title><rect x="681.8" y="643.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (309 samples, 0.12%)</title><rect x="681.8" y="627.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (309 samples, 0.12%)</title><rect x="681.8" y="611.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.8" y="622.0"></text>
</g>
<g>
<title>java.lang.String (143 samples, 0.05%)</title><rect x="681.8" y="595.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="684.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (166 samples, 0.06%)</title><rect x="682.4" y="595.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.4" y="606.0"></text>
</g>
<g>
<title>byte[] (166 samples, 0.06%)</title><rect x="682.4" y="579.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="685.4" y="590.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (300 samples, 0.11%)</title><rect x="683.2" y="627.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (163 samples, 0.06%)</title><rect x="683.2" y="611.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (163 samples, 0.06%)</title><rect x="683.2" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.2" y="606.0"></text>
</g>
<g>
<title>java.lang.String (66 samples, 0.03%)</title><rect x="683.2" y="579.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="686.2" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (97 samples, 0.04%)</title><rect x="683.5" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="686.5" y="590.0"></text>
</g>
<g>
<title>byte[] (97 samples, 0.04%)</title><rect x="683.5" y="563.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="686.5" y="574.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (137 samples, 0.05%)</title><rect x="683.9" y="611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.9" y="622.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (137 samples, 0.05%)</title><rect x="683.9" y="595.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (137 samples, 0.05%)</title><rect x="683.9" y="579.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (137 samples, 0.05%)</title><rect x="683.9" y="563.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.9" y="574.0"></text>
</g>
<g>
<title>java.lang.String (61 samples, 0.02%)</title><rect x="683.9" y="547.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="686.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (76 samples, 0.03%)</title><rect x="684.2" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="687.2" y="558.0"></text>
</g>
<g>
<title>byte[] (76 samples, 0.03%)</title><rect x="684.2" y="531.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="687.2" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpRequest.newBuilder (275 samples, 0.11%)</title><rect x="684.5" y="675.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.5" y="686.0"></text>
</g>
<g>
<title>jdk.internal.net.http.HttpRequestBuilderImpl (105 samples, 0.04%)</title><rect x="684.5" y="659.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="687.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.&lt;init&gt; (170 samples, 0.06%)</title><rect x="685.0" y="659.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.&lt;init&gt; (131 samples, 0.05%)</title><rect x="685.2" y="643.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.2" y="654.0"></text>
</g>
<g>
<title>java.util.TreeMap (131 samples, 0.05%)</title><rect x="685.2" y="627.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="688.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer.atLeastAsync (523 samples, 0.20%)</title><rect x="685.8" y="691.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (380 samples, 0.15%)</title><rect x="686.2" y="675.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer$$Lambda$183/2011463167.accept (380 samples, 0.15%)</title><rect x="686.2" y="659.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="689.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer.lambda$atLeastAsync$1 (380 samples, 0.15%)</title><rect x="686.2" y="643.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/633976346.linkToTargetMethod (132 samples, 0.05%)</title><rect x="686.2" y="627.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/761960786.invokeStatic (132 samples, 0.05%)</title><rect x="686.2" y="611.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/FutureAnalyzer$$Lambda$187/42186313.get$Lambda (132 samples, 0.05%)</title><rect x="686.2" y="595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.2" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.FutureAnalyzer$$Lambda$187 (132 samples, 0.05%)</title><rect x="686.2" y="579.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="689.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (248 samples, 0.09%)</title><rect x="686.8" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (248 samples, 0.09%)</title><rect x="686.8" y="611.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.8" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (146 samples, 0.06%)</title><rect x="686.8" y="595.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="689.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (72 samples, 0.03%)</title><rect x="687.6" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="690.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (72 samples, 0.03%)</title><rect x="687.6" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="690.6" y="590.0"></text>
</g>
<g>
<title>jdk.internal.net.http.common.MinimalFuture (72 samples, 0.03%)</title><rect x="687.6" y="563.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="690.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (179 samples, 0.07%)</title><rect x="688.1" y="691.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (179 samples, 0.07%)</title><rect x="688.1" y="675.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.1" y="686.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (84 samples, 0.03%)</title><rect x="688.5" y="659.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="691.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.respond (391 samples, 0.15%)</title><rect x="688.9" y="707.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.9" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (109 samples, 0.04%)</title><rect x="688.9" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="691.9" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (109 samples, 0.04%)</title><rect x="688.9" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$195/1649027778.get$Lambda (109 samples, 0.04%)</title><rect x="688.9" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="691.9" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$195 (109 samples, 0.04%)</title><rect x="688.9" y="643.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="691.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (282 samples, 0.11%)</title><rect x="689.4" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="692.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (282 samples, 0.11%)</title><rect x="689.4" y="675.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.4" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (176 samples, 0.07%)</title><rect x="689.4" y="659.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="692.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (106 samples, 0.04%)</title><rect x="690.2" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.2" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (106 samples, 0.04%)</title><rect x="690.2" y="643.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="693.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (1,429 samples, 0.55%)</title><rect x="690.7" y="707.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (186 samples, 0.07%)</title><rect x="690.7" y="691.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.7" y="702.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (186 samples, 0.07%)</title><rect x="690.7" y="675.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (186 samples, 0.07%)</title><rect x="690.7" y="659.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.7" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (186 samples, 0.07%)</title><rect x="690.7" y="643.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.7" y="654.0"></text>
</g>
<g>
<title>byte[] (186 samples, 0.07%)</title><rect x="690.7" y="627.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="693.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (260 samples, 0.10%)</title><rect x="691.5" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (260 samples, 0.10%)</title><rect x="691.5" y="675.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.5" y="686.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (260 samples, 0.10%)</title><rect x="691.5" y="659.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="694.5" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (174 samples, 0.07%)</title><rect x="692.7" y="691.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="695.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (809 samples, 0.31%)</title><rect x="693.5" y="691.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.5" y="702.0"></text>
</g>
<g>
<title>int[] (480 samples, 0.18%)</title><rect x="693.5" y="675.0" width="2.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="696.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (329 samples, 0.13%)</title><rect x="695.7" y="675.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (329 samples, 0.13%)</title><rect x="695.7" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.7" y="670.0"></text>
</g>
<g>
<title>java.lang.String (264 samples, 0.10%)</title><rect x="695.7" y="643.0" width="1.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="698.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (65 samples, 0.02%)</title><rect x="696.8" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.8" y="654.0"></text>
</g>
<g>
<title>byte[] (65 samples, 0.02%)</title><rect x="696.8" y="627.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="699.8" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (3,840 samples, 1.47%)</title><rect x="697.1" y="739.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.1" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3,840 samples, 1.47%)</title><rect x="697.1" y="723.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.1" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$675/1870761692.run (3,840 samples, 1.47%)</title><rect x="697.1" y="707.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.1" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (3,840 samples, 1.47%)</title><rect x="697.1" y="691.0" width="17.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.1" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (3,840 samples, 1.47%)</title><rect x="697.1" y="675.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.1" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (3,840 samples, 1.47%)</title><rect x="697.1" y="659.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.1" y="670.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (63 samples, 0.02%)</title><rect x="697.1" y="643.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="700.1" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (3,775 samples, 1.44%)</title><rect x="697.4" y="643.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.4" y="654.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3,683 samples, 1.41%)</title><rect x="697.4" y="627.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.4" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3,683 samples, 1.41%)</title><rect x="697.4" y="611.0" width="16.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="700.4" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3,683 samples, 1.41%)</title><rect x="697.4" y="595.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.4" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (3,683 samples, 1.41%)</title><rect x="697.4" y="579.0" width="16.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.4" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2,544 samples, 0.97%)</title><rect x="697.4" y="563.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2,544 samples, 0.97%)</title><rect x="697.4" y="547.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (2,527 samples, 0.97%)</title><rect x="697.5" y="531.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.5" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (2,527 samples, 0.97%)</title><rect x="697.5" y="515.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.5" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (2,456 samples, 0.94%)</title><rect x="697.5" y="499.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="700.5" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (2,456 samples, 0.94%)</title><rect x="697.5" y="483.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="700.5" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (2,456 samples, 0.94%)</title><rect x="697.5" y="467.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.5" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (2,456 samples, 0.94%)</title><rect x="697.5" y="451.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="700.5" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (2,456 samples, 0.94%)</title><rect x="697.5" y="435.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.5" y="446.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (2,455 samples, 0.94%)</title><rect x="697.5" y="419.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.5" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (2,455 samples, 0.94%)</title><rect x="697.5" y="403.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.5" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (2,455 samples, 0.94%)</title><rect x="697.5" y="387.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.5" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (2,455 samples, 0.94%)</title><rect x="697.5" y="371.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.5" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2,455 samples, 0.94%)</title><rect x="697.5" y="355.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.5" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2,455 samples, 0.94%)</title><rect x="697.5" y="339.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.5" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2,455 samples, 0.94%)</title><rect x="697.5" y="323.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.5" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2,455 samples, 0.94%)</title><rect x="697.5" y="307.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.5" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2,199 samples, 0.84%)</title><rect x="697.5" y="291.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.5" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2,199 samples, 0.84%)</title><rect x="697.5" y="275.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.5" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2,192 samples, 0.84%)</title><rect x="697.5" y="259.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.5" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2,192 samples, 0.84%)</title><rect x="697.5" y="243.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.5" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (833 samples, 0.32%)</title><rect x="697.5" y="227.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.5" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (674 samples, 0.26%)</title><rect x="697.5" y="211.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.5" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (631 samples, 0.24%)</title><rect x="697.5" y="195.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.5" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (631 samples, 0.24%)</title><rect x="697.5" y="179.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.5" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (343 samples, 0.13%)</title><rect x="697.8" y="163.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.8" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (58 samples, 0.02%)</title><rect x="697.8" y="147.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="700.8" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (285 samples, 0.11%)</title><rect x="698.0" y="147.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="701.0" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (245 samples, 0.09%)</title><rect x="698.2" y="131.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="701.2" y="142.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (245 samples, 0.09%)</title><rect x="698.2" y="115.0" width="1.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="701.2" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (223 samples, 0.09%)</title><rect x="699.3" y="163.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="702.3" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (223 samples, 0.09%)</title><rect x="699.3" y="147.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="702.3" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (159 samples, 0.06%)</title><rect x="700.5" y="211.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.5" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (98 samples, 0.04%)</title><rect x="700.6" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.6" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (59 samples, 0.02%)</title><rect x="700.8" y="179.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.8" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (81 samples, 0.03%)</title><rect x="701.2" y="227.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="704.2" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (685 samples, 0.26%)</title><rect x="701.8" y="227.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="704.8" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (86 samples, 0.03%)</title><rect x="701.8" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.8" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (599 samples, 0.23%)</title><rect x="702.1" y="211.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="705.1" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (562 samples, 0.21%)</title><rect x="702.3" y="195.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.3" y="206.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (562 samples, 0.21%)</title><rect x="702.3" y="179.0" width="2.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="705.3" y="190.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (554 samples, 0.21%)</title><rect x="704.9" y="227.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.9" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (489 samples, 0.19%)</title><rect x="704.9" y="211.0" width="2.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="707.9" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (65 samples, 0.02%)</title><rect x="707.1" y="211.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (65 samples, 0.02%)</title><rect x="707.1" y="195.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="710.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (65 samples, 0.02%)</title><rect x="707.1" y="179.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.1" y="190.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (65 samples, 0.02%)</title><rect x="707.1" y="163.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.1" y="174.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (65 samples, 0.02%)</title><rect x="707.1" y="147.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.1" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (65 samples, 0.02%)</title><rect x="707.1" y="131.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.1" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (256 samples, 0.10%)</title><rect x="707.4" y="291.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.4" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (256 samples, 0.10%)</title><rect x="707.4" y="275.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (256 samples, 0.10%)</title><rect x="707.4" y="259.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (256 samples, 0.10%)</title><rect x="707.4" y="243.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.4" y="254.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (256 samples, 0.10%)</title><rect x="707.4" y="227.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.4" y="238.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (256 samples, 0.10%)</title><rect x="707.4" y="211.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (256 samples, 0.10%)</title><rect x="707.4" y="195.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (256 samples, 0.10%)</title><rect x="707.4" y="179.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.4" y="190.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (256 samples, 0.10%)</title><rect x="707.4" y="163.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.4" y="174.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (253 samples, 0.10%)</title><rect x="707.4" y="147.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.4" y="158.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (81 samples, 0.03%)</title><rect x="707.7" y="131.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="710.7" y="142.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (94 samples, 0.04%)</title><rect x="708.1" y="131.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.1" y="142.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (94 samples, 0.04%)</title><rect x="708.1" y="115.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="711.1" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (66 samples, 0.03%)</title><rect x="708.2" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.2" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (66 samples, 0.03%)</title><rect x="708.2" y="83.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.2" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1315150250.invoke (66 samples, 0.03%)</title><rect x="708.2" y="67.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.2" y="78.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (66 samples, 0.03%)</title><rect x="708.2" y="51.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.2" y="62.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (65 samples, 0.02%)</title><rect x="708.6" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.6" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (900 samples, 0.34%)</title><rect x="708.9" y="563.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.9" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (900 samples, 0.34%)</title><rect x="708.9" y="547.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.9" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (900 samples, 0.34%)</title><rect x="708.9" y="531.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.9" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (897 samples, 0.34%)</title><rect x="708.9" y="515.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.9" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (897 samples, 0.34%)</title><rect x="708.9" y="499.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.9" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (862 samples, 0.33%)</title><rect x="708.9" y="483.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.9" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (854 samples, 0.33%)</title><rect x="708.9" y="467.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (854 samples, 0.33%)</title><rect x="708.9" y="451.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (831 samples, 0.32%)</title><rect x="709.1" y="435.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.1" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (794 samples, 0.30%)</title><rect x="709.1" y="419.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="712.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (788 samples, 0.30%)</title><rect x="709.1" y="403.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (743 samples, 0.28%)</title><rect x="709.3" y="387.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.3" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (725 samples, 0.28%)</title><rect x="709.4" y="371.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (725 samples, 0.28%)</title><rect x="709.4" y="355.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (725 samples, 0.28%)</title><rect x="709.4" y="339.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (725 samples, 0.28%)</title><rect x="709.4" y="323.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.4" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (694 samples, 0.27%)</title><rect x="709.4" y="307.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.4" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (694 samples, 0.27%)</title><rect x="709.4" y="291.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.4" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (280 samples, 0.11%)</title><rect x="709.4" y="275.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.4" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (69 samples, 0.03%)</title><rect x="709.4" y="259.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.4" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (58 samples, 0.02%)</title><rect x="709.4" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.4" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (211 samples, 0.08%)</title><rect x="709.7" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.7" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (179 samples, 0.07%)</title><rect x="709.7" y="243.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.7" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (126 samples, 0.05%)</title><rect x="710.0" y="227.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (126 samples, 0.05%)</title><rect x="710.0" y="211.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.0" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (107 samples, 0.04%)</title><rect x="710.1" y="195.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.1" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (80 samples, 0.03%)</title><rect x="710.1" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="713.1" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (73 samples, 0.03%)</title><rect x="710.1" y="163.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.1" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (57 samples, 0.02%)</title><rect x="710.2" y="147.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.2" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (194 samples, 0.07%)</title><rect x="710.7" y="275.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.7" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (158 samples, 0.06%)</title><rect x="710.9" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.9" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (158 samples, 0.06%)</title><rect x="710.9" y="243.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="713.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (152 samples, 0.06%)</title><rect x="710.9" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (135 samples, 0.05%)</title><rect x="710.9" y="211.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (129 samples, 0.05%)</title><rect x="710.9" y="195.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (113 samples, 0.04%)</title><rect x="711.0" y="179.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.0" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (99 samples, 0.04%)</title><rect x="711.0" y="163.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="714.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (99 samples, 0.04%)</title><rect x="711.0" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (99 samples, 0.04%)</title><rect x="711.0" y="131.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.0" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (99 samples, 0.04%)</title><rect x="711.0" y="115.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.0" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (75 samples, 0.03%)</title><rect x="711.1" y="99.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="714.1" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (75 samples, 0.03%)</title><rect x="711.1" y="83.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.1" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (58 samples, 0.02%)</title><rect x="711.1" y="67.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.1" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (58 samples, 0.02%)</title><rect x="711.1" y="51.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.1" y="62.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (58 samples, 0.02%)</title><rect x="711.1" y="35.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.1" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (217 samples, 0.08%)</title><rect x="711.6" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.6" y="286.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (217 samples, 0.08%)</title><rect x="711.6" y="259.0" width="1.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="714.6" y="270.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (94 samples, 0.04%)</title><rect x="713.0" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.0" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (88 samples, 0.03%)</title><rect x="713.0" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="716.0" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (88 samples, 0.03%)</title><rect x="713.0" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="716.0" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (88 samples, 0.03%)</title><rect x="713.0" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="716.0" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (71 samples, 0.03%)</title><rect x="713.1" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="716.1" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (141 samples, 0.05%)</title><rect x="713.4" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.4" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (138 samples, 0.05%)</title><rect x="713.4" y="547.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.4" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (135 samples, 0.05%)</title><rect x="713.4" y="531.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="716.4" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (135 samples, 0.05%)</title><rect x="713.4" y="515.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="716.4" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (135 samples, 0.05%)</title><rect x="713.4" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.4" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (135 samples, 0.05%)</title><rect x="713.4" y="483.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.4" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (77 samples, 0.03%)</title><rect x="713.5" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="716.5" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (86 samples, 0.03%)</title><rect x="714.1" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (83 samples, 0.03%)</title><rect x="714.1" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.1" y="622.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (83 samples, 0.03%)</title><rect x="714.1" y="595.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.1" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (83 samples, 0.03%)</title><rect x="714.1" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.1" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (59 samples, 0.02%)</title><rect x="714.1" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="717.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (300 samples, 0.11%)</title><rect x="714.5" y="787.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (300 samples, 0.11%)</title><rect x="714.5" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="717.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (300 samples, 0.11%)</title><rect x="714.5" y="755.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (300 samples, 0.11%)</title><rect x="714.5" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (300 samples, 0.11%)</title><rect x="714.5" y="723.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (300 samples, 0.11%)</title><rect x="714.5" y="707.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="717.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (300 samples, 0.11%)</title><rect x="714.5" y="691.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="717.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (300 samples, 0.11%)</title><rect x="714.5" y="675.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="717.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (300 samples, 0.11%)</title><rect x="714.5" y="659.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (300 samples, 0.11%)</title><rect x="714.5" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (300 samples, 0.11%)</title><rect x="714.5" y="627.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (300 samples, 0.11%)</title><rect x="714.5" y="611.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (300 samples, 0.11%)</title><rect x="714.5" y="595.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="717.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (300 samples, 0.11%)</title><rect x="714.5" y="579.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="717.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (300 samples, 0.11%)</title><rect x="714.5" y="563.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (300 samples, 0.11%)</title><rect x="714.5" y="547.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.5" y="558.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (300 samples, 0.11%)</title><rect x="714.5" y="531.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="717.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (2,602 samples, 0.99%)</title><rect x="715.8" y="787.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (61 samples, 0.02%)</title><rect x="715.8" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (61 samples, 0.02%)</title><rect x="715.8" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (479 samples, 0.18%)</title><rect x="716.3" y="771.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$449/429036175.accept (428 samples, 0.16%)</title><rect x="716.3" y="755.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (428 samples, 0.16%)</title><rect x="716.3" y="739.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (428 samples, 0.16%)</title><rect x="716.3" y="723.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (428 samples, 0.16%)</title><rect x="716.3" y="707.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (428 samples, 0.16%)</title><rect x="716.3" y="691.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (428 samples, 0.16%)</title><rect x="716.3" y="675.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (428 samples, 0.16%)</title><rect x="716.3" y="659.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (428 samples, 0.16%)</title><rect x="716.3" y="643.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (428 samples, 0.16%)</title><rect x="716.3" y="627.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (428 samples, 0.16%)</title><rect x="716.3" y="611.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$250/1750372623.run (428 samples, 0.16%)</title><rect x="716.3" y="595.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="719.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (428 samples, 0.16%)</title><rect x="716.3" y="579.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (332 samples, 0.13%)</title><rect x="716.7" y="563.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.append (134 samples, 0.05%)</title><rect x="716.7" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (94 samples, 0.04%)</title><rect x="716.7" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.7" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (94 samples, 0.04%)</title><rect x="716.7" y="515.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="719.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.getBuffer (198 samples, 0.08%)</title><rect x="717.3" y="547.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection$$Lambda$229/864064016.get (198 samples, 0.08%)</title><rect x="717.3" y="531.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getBuffer (198 samples, 0.08%)</title><rect x="717.3" y="515.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (198 samples, 0.08%)</title><rect x="717.3" y="499.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="720.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (198 samples, 0.08%)</title><rect x="717.3" y="483.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="720.3" y="494.0"></text>
</g>
<g>
<title>byte[] (182 samples, 0.07%)</title><rect x="717.4" y="467.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="720.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (259 samples, 0.10%)</title><rect x="718.4" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.4" y="782.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (259 samples, 0.10%)</title><rect x="718.4" y="755.0" width="1.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="721.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (113 samples, 0.04%)</title><rect x="719.6" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (58 samples, 0.02%)</title><rect x="719.6" y="755.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (58 samples, 0.02%)</title><rect x="719.6" y="739.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="722.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (58 samples, 0.02%)</title><rect x="719.6" y="723.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (58 samples, 0.02%)</title><rect x="719.6" y="707.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (58 samples, 0.02%)</title><rect x="719.6" y="691.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (58 samples, 0.02%)</title><rect x="719.6" y="675.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.6" y="686.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (58 samples, 0.02%)</title><rect x="719.6" y="659.0" width="0.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="722.6" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (178 samples, 0.07%)</title><rect x="720.1" y="771.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$267/1319721399.run (96 samples, 0.04%)</title><rect x="720.1" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (96 samples, 0.04%)</title><rect x="720.1" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (96 samples, 0.04%)</title><rect x="720.1" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (96 samples, 0.04%)</title><rect x="720.1" y="707.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (96 samples, 0.04%)</title><rect x="720.1" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (96 samples, 0.04%)</title><rect x="720.1" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$250/1750372623.run (96 samples, 0.04%)</title><rect x="720.1" y="659.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (96 samples, 0.04%)</title><rect x="720.1" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (96 samples, 0.04%)</title><rect x="720.1" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (96 samples, 0.04%)</title><rect x="720.1" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (92 samples, 0.04%)</title><rect x="720.1" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (92 samples, 0.04%)</title><rect x="720.1" y="579.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (92 samples, 0.04%)</title><rect x="720.1" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.1" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/112466394.linkToTargetMethod (67 samples, 0.03%)</title><rect x="720.1" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/589835301.invoke (67 samples, 0.03%)</title><rect x="720.1" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.1" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (67 samples, 0.03%)</title><rect x="720.1" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.1" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (67 samples, 0.03%)</title><rect x="720.1" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (67 samples, 0.03%)</title><rect x="720.1" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.1" y="494.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.03%)</title><rect x="720.1" y="467.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="723.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$286/1600672828.run (82 samples, 0.03%)</title><rect x="720.5" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (82 samples, 0.03%)</title><rect x="720.5" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (78 samples, 0.03%)</title><rect x="720.5" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (78 samples, 0.03%)</title><rect x="720.5" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$462/368169172.get$Lambda (78 samples, 0.03%)</title><rect x="720.5" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.5" y="702.0"></text>
</g>
<g>
<title>jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$462 (78 samples, 0.03%)</title><rect x="720.5" y="675.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="723.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (892 samples, 0.34%)</title><rect x="720.9" y="771.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.9" y="782.0"></text>
</g>
<g>
<title>java/time/Instant.now (162 samples, 0.06%)</title><rect x="720.9" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.9" y="766.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (162 samples, 0.06%)</title><rect x="720.9" y="739.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.9" y="750.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (162 samples, 0.06%)</title><rect x="720.9" y="723.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.9" y="734.0"></text>
</g>
<g>
<title>java/time/Instant.create (162 samples, 0.06%)</title><rect x="720.9" y="707.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.9" y="718.0"></text>
</g>
<g>
<title>java.time.Instant (162 samples, 0.06%)</title><rect x="720.9" y="691.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="723.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (730 samples, 0.28%)</title><rect x="721.6" y="755.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (103 samples, 0.04%)</title><rect x="721.6" y="739.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (103 samples, 0.04%)</title><rect x="721.6" y="723.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="724.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$$Lambda$607/713526296.get$Lambda (103 samples, 0.04%)</title><rect x="721.6" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.6" y="718.0"></text>
</g>
<g>
<title>jdk.internal.net.http.ConnectionPool$$Lambda$607 (103 samples, 0.04%)</title><rect x="721.6" y="691.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="724.6" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (206 samples, 0.08%)</title><rect x="722.1" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="725.1" y="750.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (206 samples, 0.08%)</title><rect x="722.1" y="723.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="725.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.nextExpiryDeadline (98 samples, 0.04%)</title><rect x="723.0" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="726.0" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.of (98 samples, 0.04%)</title><rect x="723.0" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.0" y="734.0"></text>
</g>
<g>
<title>java.util.Optional (98 samples, 0.04%)</title><rect x="723.0" y="707.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="726.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (323 samples, 0.12%)</title><rect x="723.5" y="739.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="726.5" y="750.0"></text>
</g>
<g>
<title>java.util.ArrayList (135 samples, 0.05%)</title><rect x="723.5" y="723.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="726.5" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList.descendingIterator (188 samples, 0.07%)</title><rect x="724.1" y="723.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.1" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.&lt;init&gt; (188 samples, 0.07%)</title><rect x="724.1" y="707.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="727.1" y="718.0"></text>
</g>
<g>
<title>java.util.LinkedList$ListItr (188 samples, 0.07%)</title><rect x="724.1" y="691.0" width="0.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="727.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.events (360 samples, 0.14%)</title><rect x="724.9" y="771.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="727.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collection.stream (209 samples, 0.08%)</title><rect x="725.0" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.spliterator (98 samples, 0.04%)</title><rect x="725.0" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.0" y="750.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySpliterator (98 samples, 0.04%)</title><rect x="725.0" y="723.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="728.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (111 samples, 0.04%)</title><rect x="725.5" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.5" y="750.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (111 samples, 0.04%)</title><rect x="725.5" y="723.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="728.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (122 samples, 0.05%)</title><rect x="726.0" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="729.0" y="766.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (122 samples, 0.05%)</title><rect x="726.0" y="739.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="729.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (112 samples, 0.04%)</title><rect x="726.5" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (112 samples, 0.04%)</title><rect x="726.5" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (112 samples, 0.04%)</title><rect x="726.5" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (112 samples, 0.04%)</title><rect x="726.5" y="723.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (65 samples, 0.02%)</title><rect x="726.8" y="707.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (65 samples, 0.02%)</title><rect x="726.8" y="691.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 0.02%)</title><rect x="726.8" y="675.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (65 samples, 0.02%)</title><rect x="726.8" y="659.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (65 samples, 0.02%)</title><rect x="726.8" y="643.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.8" y="654.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (65 samples, 0.02%)</title><rect x="726.8" y="627.0" width="0.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="729.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (71 samples, 0.03%)</title><rect x="727.2" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (71 samples, 0.03%)</title><rect x="727.2" y="755.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (71 samples, 0.03%)</title><rect x="727.2" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.2" y="750.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (71 samples, 0.03%)</title><rect x="727.2" y="723.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="730.2" y="734.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (102,553 samples, 39.19%)</title><rect x="727.5" y="787.0" width="462.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.5" y="798.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (3,792 samples, 1.45%)</title><rect x="727.5" y="771.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.5" y="782.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (3,792 samples, 1.45%)</title><rect x="727.5" y="755.0" width="17.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="730.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (98,761 samples, 37.74%)</title><rect x="744.6" y="771.0" width="445.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.6" y="782.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (98,761 samples, 37.74%)</title><rect x="744.6" y="755.0" width="445.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.6" y="766.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (98,761 samples, 37.74%)</title><rect x="744.6" y="739.0" width="445.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.6" y="750.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (19,039 samples, 7.28%)</title><rect x="744.6" y="723.0" width="85.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.6" y="734.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (19,039 samples, 7.28%)</title><rect x="744.6" y="707.0" width="85.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.6" y="718.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (9,970 samples, 3.81%)</title><rect x="744.6" y="691.0" width="45.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.6" y="702.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (862 samples, 0.33%)</title><rect x="744.6" y="675.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (862 samples, 0.33%)</title><rect x="744.6" y="659.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (862 samples, 0.33%)</title><rect x="744.6" y="643.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.6" y="654.0"></text>
</g>
<g>
<title>java.lang.String (202 samples, 0.08%)</title><rect x="744.6" y="627.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="747.6" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (660 samples, 0.25%)</title><rect x="745.5" y="627.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.5" y="638.0"></text>
</g>
<g>
<title>byte[] (660 samples, 0.25%)</title><rect x="745.5" y="611.0" width="3.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="748.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5,530 samples, 2.11%)</title><rect x="748.5" y="675.0" width="25.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="751.5" y="686.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5,530 samples, 2.11%)</title><rect x="748.5" y="659.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.5" y="670.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (5,530 samples, 2.11%)</title><rect x="748.5" y="643.0" width="25.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.5" y="654.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5,530 samples, 2.11%)</title><rect x="748.5" y="627.0" width="25.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.5" y="638.0">j..</text>
</g>
<g>
<title>java.lang.String (3,968 samples, 1.52%)</title><rect x="748.5" y="611.0" width="17.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="751.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,562 samples, 0.60%)</title><rect x="766.4" y="611.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.4" y="622.0"></text>
</g>
<g>
<title>byte[] (1,562 samples, 0.60%)</title><rect x="766.4" y="595.0" width="7.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="769.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (3,578 samples, 1.37%)</title><rect x="773.5" y="675.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/491258471.linkToTargetMethod (3,523 samples, 1.35%)</title><rect x="773.5" y="659.0" width="15.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,523 samples, 1.35%)</title><rect x="773.5" y="643.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$623/2089019041.get$Lambda (3,523 samples, 1.35%)</title><rect x="773.5" y="627.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.5" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$623 (3,523 samples, 1.35%)</title><rect x="773.5" y="611.0" width="15.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="776.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9,069 samples, 3.47%)</title><rect x="789.6" y="691.0" width="40.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.6" y="702.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (9,069 samples, 3.47%)</title><rect x="789.6" y="675.0" width="40.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="792.6" y="686.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9,069 samples, 3.47%)</title><rect x="789.6" y="659.0" width="40.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="792.6" y="670.0">jav..</text>
</g>
<g>
<title>java.lang.String (4,650 samples, 1.78%)</title><rect x="789.6" y="643.0" width="21.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="792.6" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,419 samples, 1.69%)</title><rect x="810.6" y="643.0" width="19.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="813.6" y="654.0"></text>
</g>
<g>
<title>byte[] (4,419 samples, 1.69%)</title><rect x="810.6" y="627.0" width="19.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="813.6" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (27,525 samples, 10.52%)</title><rect x="830.5" y="723.0" width="124.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.5" y="734.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (4,834 samples, 1.85%)</title><rect x="830.5" y="707.0" width="21.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="833.5" y="718.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5,839 samples, 2.23%)</title><rect x="852.3" y="707.0" width="26.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.3" y="718.0">o..</text>
</g>
<g>
<title>java.lang.String[] (4,264 samples, 1.63%)</title><rect x="852.3" y="691.0" width="19.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="855.3" y="702.0"></text>
</g>
<g>
<title>java.lang.String[] (1,575 samples, 0.60%)</title><rect x="871.5" y="691.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="874.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,852 samples, 6.44%)</title><rect x="878.6" y="707.0" width="76.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.6" y="718.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,852 samples, 6.44%)</title><rect x="878.6" y="691.0" width="76.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.6" y="702.0">one/nio/..</text>
</g>
<g>
<title>char[] (3,836 samples, 1.47%)</title><rect x="878.6" y="675.0" width="17.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="881.6" y="686.0"></text>
</g>
<g>
<title>char[] (3,707 samples, 1.42%)</title><rect x="895.9" y="675.0" width="16.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="898.9" y="686.0"></text>
</g>
<g>
<title>java.lang.String (2,200 samples, 0.84%)</title><rect x="912.6" y="675.0" width="10.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="915.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,109 samples, 2.72%)</title><rect x="922.6" y="675.0" width="32.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.6" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,109 samples, 2.72%)</title><rect x="922.6" y="659.0" width="32.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="925.6" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7,109 samples, 2.72%)</title><rect x="922.6" y="643.0" width="32.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.6" y="654.0">ja..</text>
</g>
<g>
<title>byte[] (7,106 samples, 2.72%)</title><rect x="922.6" y="627.0" width="32.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="925.6" y="638.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (918 samples, 0.35%)</title><rect x="954.6" y="723.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.6" y="734.0"></text>
</g>
<g>
<title>byte[] (918 samples, 0.35%)</title><rect x="954.6" y="707.0" width="4.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="957.6" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3,114 samples, 1.19%)</title><rect x="958.8" y="723.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,114 samples, 1.19%)</title><rect x="958.8" y="707.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.8" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,114 samples, 1.19%)</title><rect x="958.8" y="691.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.8" y="702.0"></text>
</g>
<g>
<title>java.lang.String (2,250 samples, 0.86%)</title><rect x="958.8" y="675.0" width="10.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="961.8" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (864 samples, 0.33%)</title><rect x="968.9" y="675.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="971.9" y="686.0"></text>
</g>
<g>
<title>byte[] (864 samples, 0.33%)</title><rect x="968.9" y="659.0" width="3.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="971.9" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (48,165 samples, 18.41%)</title><rect x="972.8" y="723.0" width="217.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.8" y="734.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (48,165 samples, 18.41%)</title><rect x="972.8" y="707.0" width="217.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.8" y="718.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (16,744 samples, 6.40%)</title><rect x="972.8" y="691.0" width="75.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="975.8" y="702.0">char[]</text>
</g>
<g>
<title>char[] (9,401 samples, 3.59%)</title><rect x="1048.3" y="691.0" width="42.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1051.3" y="702.0">char[]</text>
</g>
<g>
<title>java.lang.String (5,188 samples, 1.98%)</title><rect x="1090.7" y="691.0" width="23.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1093.7" y="702.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16,832 samples, 6.43%)</title><rect x="1114.1" y="691.0" width="75.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.1" y="702.0">java/lan..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16,832 samples, 6.43%)</title><rect x="1114.1" y="675.0" width="75.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.1" y="686.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16,832 samples, 6.43%)</title><rect x="1114.1" y="659.0" width="75.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.1" y="670.0">java/lan..</text>
</g>
<g>
<title>byte[] (16,772 samples, 6.41%)</title><rect x="1114.1" y="643.0" width="75.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1117.1" y="654.0">byte[]</text>
</g>
<g>
<title>byte[] (60 samples, 0.02%)</title><rect x="1189.7" y="643.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1192.7" y="654.0"></text>
</g>
</g>
</svg>
