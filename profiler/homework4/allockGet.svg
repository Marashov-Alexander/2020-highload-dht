<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (62,744 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (43,996 samples, 70.12%)</title><rect x="10.0" y="771.0" width="827.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (17 samples, 0.03%)</title><rect x="10.0" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (17 samples, 0.03%)</title><rect x="10.0" y="739.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/357421829.linkToTargetMethod (17 samples, 0.03%)</title><rect x="10.0" y="723.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1724699331.invoke (17 samples, 0.03%)</title><rect x="10.0" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (17 samples, 0.03%)</title><rect x="10.0" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (17 samples, 0.03%)</title><rect x="10.0" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (17 samples, 0.03%)</title><rect x="10.0" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.03%)</title><rect x="10.0" y="643.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (43,979 samples, 70.09%)</title><rect x="10.3" y="755.0" width="827.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.3" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (43,979 samples, 70.09%)</title><rect x="10.3" y="739.0" width="827.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.3" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (93 samples, 0.15%)</title><rect x="10.3" y="723.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (93 samples, 0.15%)</title><rect x="10.3" y="707.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (90 samples, 0.14%)</title><rect x="10.3" y="691.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (90 samples, 0.14%)</title><rect x="10.3" y="675.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.3" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (90 samples, 0.14%)</title><rect x="10.3" y="659.0" width="1.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$129/964019704.run (42,885 samples, 68.35%)</title><rect x="12.1" y="723.0" width="806.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="734.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$129/964019704.run</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$1 (42,885 samples, 68.35%)</title><rect x="12.1" y="707.0" width="806.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="718.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$1</text>
</g>
<g>
<title>java/lang/String.getBytes (586 samples, 0.93%)</title><rect x="12.1" y="691.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (586 samples, 0.93%)</title><rect x="12.1" y="675.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (586 samples, 0.93%)</title><rect x="12.1" y="659.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (586 samples, 0.93%)</title><rect x="12.1" y="643.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="654.0"></text>
</g>
<g>
<title>byte[] (586 samples, 0.93%)</title><rect x="12.1" y="627.0" width="11.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="15.1" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (90 samples, 0.14%)</title><rect x="23.1" y="691.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (90 samples, 0.14%)</title><rect x="23.1" y="675.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="686.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (90 samples, 0.14%)</title><rect x="23.1" y="659.0" width="1.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="26.1" y="670.0"></text>
</g>
<g>
<title>one.nio.http.Response (162 samples, 0.26%)</title><rect x="24.8" y="691.0" width="3.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="27.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (234 samples, 0.37%)</title><rect x="27.8" y="691.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.8" y="702.0"></text>
</g>
<g>
<title>byte[] (74 samples, 0.12%)</title><rect x="27.8" y="675.0" width="1.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="30.8" y="686.0"></text>
</g>
<g>
<title>java.lang.String[] (140 samples, 0.22%)</title><rect x="29.2" y="675.0" width="2.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="32.2" y="686.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.03%)</title><rect x="31.9" y="675.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="34.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (13,976 samples, 22.27%)</title><rect x="32.2" y="691.0" width="262.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.2" y="702.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (368 samples, 0.59%)</title><rect x="32.2" y="675.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.2" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (368 samples, 0.59%)</title><rect x="32.2" y="659.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.2" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (368 samples, 0.59%)</title><rect x="32.2" y="643.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.2" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (368 samples, 0.59%)</title><rect x="32.2" y="627.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (368 samples, 0.59%)</title><rect x="32.2" y="611.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.2" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (368 samples, 0.59%)</title><rect x="32.2" y="595.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (47 samples, 0.07%)</title><rect x="32.2" y="579.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.2" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (47 samples, 0.07%)</title><rect x="32.2" y="563.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (47 samples, 0.07%)</title><rect x="32.2" y="547.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (47 samples, 0.07%)</title><rect x="32.2" y="531.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (47 samples, 0.07%)</title><rect x="32.2" y="515.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/785992843.getAsBoolean (47 samples, 0.07%)</title><rect x="32.2" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (47 samples, 0.07%)</title><rect x="32.2" y="483.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (47 samples, 0.07%)</title><rect x="32.2" y="467.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (42 samples, 0.07%)</title><rect x="32.3" y="451.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$122/1873754548.apply (42 samples, 0.07%)</title><rect x="32.3" y="435.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (42 samples, 0.07%)</title><rect x="32.3" y="419.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (30 samples, 0.05%)</title><rect x="32.3" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.3" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (30 samples, 0.05%)</title><rect x="32.3" y="387.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="35.3" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (321 samples, 0.51%)</title><rect x="33.1" y="579.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.1" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (321 samples, 0.51%)</title><rect x="33.1" y="563.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.1" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (321 samples, 0.51%)</title><rect x="33.1" y="547.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.1" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (321 samples, 0.51%)</title><rect x="33.1" y="531.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.1" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (321 samples, 0.51%)</title><rect x="33.1" y="515.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (321 samples, 0.51%)</title><rect x="33.1" y="499.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (321 samples, 0.51%)</title><rect x="33.1" y="483.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (321 samples, 0.51%)</title><rect x="33.1" y="467.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (321 samples, 0.51%)</title><rect x="33.1" y="451.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.1" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (21 samples, 0.03%)</title><rect x="33.1" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.1" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.03%)</title><rect x="33.1" y="419.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="36.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (96 samples, 0.15%)</title><rect x="33.8" y="435.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (38 samples, 0.06%)</title><rect x="33.8" y="419.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (38 samples, 0.06%)</title><rect x="33.8" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.8" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.04%)</title><rect x="33.8" y="387.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="36.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.03%)</title><rect x="34.2" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.2" y="398.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.03%)</title><rect x="34.2" y="371.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="37.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (35 samples, 0.06%)</title><rect x="34.5" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.06%)</title><rect x="34.5" y="403.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.5" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (20 samples, 0.03%)</title><rect x="34.5" y="387.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="37.5" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.02%)</title><rect x="34.8" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.8" y="398.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.02%)</title><rect x="34.8" y="371.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="37.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (23 samples, 0.04%)</title><rect x="35.1" y="419.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 0.04%)</title><rect x="35.1" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.1" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19 samples, 0.03%)</title><rect x="35.1" y="387.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="38.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (192 samples, 0.31%)</title><rect x="35.6" y="435.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (53 samples, 0.08%)</title><rect x="35.7" y="419.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.08%)</title><rect x="35.7" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.7" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.06%)</title><rect x="35.7" y="387.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="38.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.03%)</title><rect x="36.3" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.3" y="398.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.03%)</title><rect x="36.3" y="371.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="39.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (73 samples, 0.12%)</title><rect x="36.7" y="419.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (73 samples, 0.12%)</title><rect x="36.7" y="403.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.7" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (56 samples, 0.09%)</title><rect x="36.7" y="387.0" width="1.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="39.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.03%)</title><rect x="37.7" y="387.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.7" y="398.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.03%)</title><rect x="37.7" y="371.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="40.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (30 samples, 0.05%)</title><rect x="38.1" y="419.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (30 samples, 0.05%)</title><rect x="38.1" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.1" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19 samples, 0.03%)</title><rect x="38.1" y="387.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="41.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (29 samples, 0.05%)</title><rect x="38.6" y="419.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (29 samples, 0.05%)</title><rect x="38.6" y="403.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.6" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (25 samples, 0.04%)</title><rect x="38.6" y="387.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="41.6" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (138 samples, 0.22%)</title><rect x="39.2" y="675.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.2" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (138 samples, 0.22%)</title><rect x="39.2" y="659.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl$$Lambda$132/1153658684.apply (138 samples, 0.22%)</title><rect x="39.2" y="643.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.lambda$iterator$2 (138 samples, 0.22%)</title><rect x="39.2" y="627.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (87 samples, 0.14%)</title><rect x="39.2" y="611.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.2" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (87 samples, 0.14%)</title><rect x="39.2" y="595.0" width="1.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="42.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (51 samples, 0.08%)</title><rect x="40.8" y="611.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (51 samples, 0.08%)</title><rect x="40.8" y="595.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.8" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (51 samples, 0.08%)</title><rect x="40.8" y="579.0" width="1.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="43.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (64 samples, 0.10%)</title><rect x="41.8" y="675.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (64 samples, 0.10%)</title><rect x="41.8" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.8" y="670.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (64 samples, 0.10%)</title><rect x="41.8" y="643.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="44.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (291 samples, 0.46%)</title><rect x="43.0" y="675.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.0" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (291 samples, 0.46%)</title><rect x="43.0" y="659.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.0" y="670.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (291 samples, 0.46%)</title><rect x="43.0" y="643.0" width="5.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="46.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.iterator (13,115 samples, 20.90%)</title><rect x="48.4" y="675.0" width="246.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.4" y="686.0">ru/mail/polis/dao/alexander/maras..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (49 samples, 0.08%)</title><rect x="48.4" y="659.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.4" y="670.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (49 samples, 0.08%)</title><rect x="48.4" y="643.0" width="1.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="51.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2,698 samples, 4.30%)</title><rect x="49.4" y="659.0" width="50.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.4" y="670.0">com/g..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (164 samples, 0.26%)</title><rect x="49.4" y="643.0" width="3.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="52.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2,534 samples, 4.04%)</title><rect x="52.4" y="643.0" width="47.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.4" y="654.0">com/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (127 samples, 0.20%)</title><rect x="52.4" y="627.0" width="2.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="55.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (257 samples, 0.41%)</title><rect x="54.8" y="627.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.8" y="638.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (257 samples, 0.41%)</title><rect x="54.8" y="611.0" width="4.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="57.8" y="622.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (55 samples, 0.09%)</title><rect x="59.7" y="627.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="62.7" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (131 samples, 0.21%)</title><rect x="60.7" y="627.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.7" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (131 samples, 0.21%)</title><rect x="60.7" y="611.0" width="2.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="63.7" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,610 samples, 2.57%)</title><rect x="63.2" y="627.0" width="30.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.2" y="638.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,610 samples, 2.57%)</title><rect x="63.2" y="611.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.2" y="622.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (23 samples, 0.04%)</title><rect x="63.2" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.2" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 0.04%)</title><rect x="63.2" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.2" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (23 samples, 0.04%)</title><rect x="63.2" y="563.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="66.2" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,587 samples, 2.53%)</title><rect x="63.6" y="595.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.6" y="606.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,587 samples, 2.53%)</title><rect x="63.6" y="579.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.6" y="590.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,587 samples, 2.53%)</title><rect x="63.6" y="563.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.6" y="574.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,587 samples, 2.53%)</title><rect x="63.6" y="547.0" width="29.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.6" y="558.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,587 samples, 2.53%)</title><rect x="63.6" y="531.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.6" y="542.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,587 samples, 2.53%)</title><rect x="63.6" y="515.0" width="29.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.6" y="526.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,587 samples, 2.53%)</title><rect x="63.6" y="499.0" width="29.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.6" y="510.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (120 samples, 0.19%)</title><rect x="63.6" y="483.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.6" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (120 samples, 0.19%)</title><rect x="63.6" y="467.0" width="2.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="66.6" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (54 samples, 0.09%)</title><rect x="65.9" y="483.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="68.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (502 samples, 0.80%)</title><rect x="66.9" y="483.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (167 samples, 0.27%)</title><rect x="66.9" y="467.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (167 samples, 0.27%)</title><rect x="66.9" y="451.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.9" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (101 samples, 0.16%)</title><rect x="66.9" y="435.0" width="1.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="69.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (66 samples, 0.11%)</title><rect x="68.8" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.8" y="446.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.11%)</title><rect x="68.8" y="419.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="71.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (168 samples, 0.27%)</title><rect x="70.0" y="467.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (168 samples, 0.27%)</title><rect x="70.0" y="451.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.0" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (114 samples, 0.18%)</title><rect x="70.0" y="435.0" width="2.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="73.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (54 samples, 0.09%)</title><rect x="72.2" y="435.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.2" y="446.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.09%)</title><rect x="72.2" y="419.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="75.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (167 samples, 0.27%)</title><rect x="73.2" y="467.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.2" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (167 samples, 0.27%)</title><rect x="73.2" y="451.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.2" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (117 samples, 0.19%)</title><rect x="73.2" y="435.0" width="2.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="76.2" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (50 samples, 0.08%)</title><rect x="75.4" y="435.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.4" y="446.0"></text>
</g>
<g>
<title>byte[] (50 samples, 0.08%)</title><rect x="75.4" y="419.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="78.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (911 samples, 1.45%)</title><rect x="76.3" y="483.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.3" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (62 samples, 0.10%)</title><rect x="76.3" y="467.0" width="1.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="79.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (182 samples, 0.29%)</title><rect x="77.5" y="467.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (182 samples, 0.29%)</title><rect x="77.5" y="451.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.5" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (114 samples, 0.18%)</title><rect x="77.5" y="435.0" width="2.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="80.5" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (68 samples, 0.11%)</title><rect x="79.6" y="435.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.6" y="446.0"></text>
</g>
<g>
<title>byte[] (68 samples, 0.11%)</title><rect x="79.6" y="419.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="82.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (349 samples, 0.56%)</title><rect x="80.9" y="467.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (349 samples, 0.56%)</title><rect x="80.9" y="451.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.9" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (226 samples, 0.36%)</title><rect x="80.9" y="435.0" width="4.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="83.9" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (123 samples, 0.20%)</title><rect x="85.2" y="435.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="446.0"></text>
</g>
<g>
<title>byte[] (123 samples, 0.20%)</title><rect x="85.2" y="419.0" width="2.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="88.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (164 samples, 0.26%)</title><rect x="87.5" y="467.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (164 samples, 0.26%)</title><rect x="87.5" y="451.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.5" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (100 samples, 0.16%)</title><rect x="87.5" y="435.0" width="1.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="90.5" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (64 samples, 0.10%)</title><rect x="89.3" y="435.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.3" y="446.0"></text>
</g>
<g>
<title>byte[] (64 samples, 0.10%)</title><rect x="89.3" y="419.0" width="1.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="92.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (154 samples, 0.25%)</title><rect x="90.5" y="467.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (154 samples, 0.25%)</title><rect x="90.5" y="451.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.5" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (96 samples, 0.15%)</title><rect x="90.5" y="435.0" width="1.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="93.5" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (58 samples, 0.09%)</title><rect x="92.4" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.4" y="446.0"></text>
</g>
<g>
<title>byte[] (58 samples, 0.09%)</title><rect x="92.4" y="419.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="95.4" y="430.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (354 samples, 0.56%)</title><rect x="93.4" y="627.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (354 samples, 0.56%)</title><rect x="93.4" y="611.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (354 samples, 0.56%)</title><rect x="93.4" y="595.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (167 samples, 0.27%)</title><rect x="93.4" y="579.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/785992843.getAsBoolean (167 samples, 0.27%)</title><rect x="93.4" y="563.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (167 samples, 0.27%)</title><rect x="93.4" y="547.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (167 samples, 0.27%)</title><rect x="93.4" y="531.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (23 samples, 0.04%)</title><rect x="93.4" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (23 samples, 0.04%)</title><rect x="93.4" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="510.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (23 samples, 0.04%)</title><rect x="93.4" y="483.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="96.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (144 samples, 0.23%)</title><rect x="93.9" y="515.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$122/1873754548.apply (144 samples, 0.23%)</title><rect x="93.9" y="499.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (144 samples, 0.23%)</title><rect x="93.9" y="483.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (48 samples, 0.08%)</title><rect x="93.9" y="467.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (48 samples, 0.08%)</title><rect x="93.9" y="451.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="96.9" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (96 samples, 0.15%)</title><rect x="94.8" y="467.0" width="1.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="97.8" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (187 samples, 0.30%)</title><rect x="96.6" y="579.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.6" y="590.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (60 samples, 0.10%)</title><rect x="96.6" y="563.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="99.6" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (25 samples, 0.04%)</title><rect x="97.7" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.7" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (25 samples, 0.04%)</title><rect x="97.7" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/785992843.get$Lambda (18 samples, 0.03%)</title><rect x="97.8" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.8" y="542.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$126 (18 samples, 0.03%)</title><rect x="97.8" y="515.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="100.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (31 samples, 0.05%)</title><rect x="98.2" y="563.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (31 samples, 0.05%)</title><rect x="98.2" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.2" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (31 samples, 0.05%)</title><rect x="98.2" y="531.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="101.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (71 samples, 0.11%)</title><rect x="98.8" y="563.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.8" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (61 samples, 0.10%)</title><rect x="98.8" y="547.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="101.8" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (17 samples, 0.03%)</title><rect x="100.1" y="659.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.1" y="670.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (17 samples, 0.03%)</title><rect x="100.1" y="643.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="103.1" y="654.0"></text>
</g>
<g>
<title>java.util.ArrayList (187 samples, 0.30%)</title><rect x="100.4" y="659.0" width="3.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="103.4" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (159 samples, 0.25%)</title><rect x="103.9" y="659.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.9" y="670.0"></text>
</g>
<g>
<title>java.lang.Object[] (159 samples, 0.25%)</title><rect x="103.9" y="643.0" width="3.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="106.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (311 samples, 0.50%)</title><rect x="106.9" y="659.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.9" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (311 samples, 0.50%)</title><rect x="106.9" y="643.0" width="5.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="109.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (846 samples, 1.35%)</title><rect x="112.8" y="659.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.8" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (100 samples, 0.16%)</title><rect x="112.8" y="643.0" width="1.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="115.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (746 samples, 1.19%)</title><rect x="114.7" y="643.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (746 samples, 1.19%)</title><rect x="114.7" y="627.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (414 samples, 0.66%)</title><rect x="114.7" y="611.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.7" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (414 samples, 0.66%)</title><rect x="114.7" y="595.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (414 samples, 0.66%)</title><rect x="114.7" y="579.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (414 samples, 0.66%)</title><rect x="114.7" y="563.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (414 samples, 0.66%)</title><rect x="114.7" y="547.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/785992843.getAsBoolean (414 samples, 0.66%)</title><rect x="114.7" y="531.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (414 samples, 0.66%)</title><rect x="114.7" y="515.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (414 samples, 0.66%)</title><rect x="114.7" y="499.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (144 samples, 0.23%)</title><rect x="114.7" y="483.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (144 samples, 0.23%)</title><rect x="114.7" y="467.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.7" y="478.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (144 samples, 0.23%)</title><rect x="114.7" y="451.0" width="2.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="117.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (270 samples, 0.43%)</title><rect x="117.4" y="483.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$122/1873754548.apply (270 samples, 0.43%)</title><rect x="117.4" y="467.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (270 samples, 0.43%)</title><rect x="117.4" y="451.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (154 samples, 0.25%)</title><rect x="117.4" y="435.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.4" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (154 samples, 0.25%)</title><rect x="117.4" y="419.0" width="2.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="120.4" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (116 samples, 0.18%)</title><rect x="120.3" y="435.0" width="2.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="123.3" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (332 samples, 0.53%)</title><rect x="122.4" y="611.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="125.4" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (332 samples, 0.53%)</title><rect x="122.4" y="595.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.4" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (332 samples, 0.53%)</title><rect x="122.4" y="579.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.4" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (332 samples, 0.53%)</title><rect x="122.4" y="563.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (332 samples, 0.53%)</title><rect x="122.4" y="547.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (332 samples, 0.53%)</title><rect x="122.4" y="531.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.4" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (332 samples, 0.53%)</title><rect x="122.4" y="515.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (332 samples, 0.53%)</title><rect x="122.4" y="499.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (332 samples, 0.53%)</title><rect x="122.4" y="483.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.4" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (25 samples, 0.04%)</title><rect x="122.4" y="467.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.4" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (25 samples, 0.04%)</title><rect x="122.4" y="451.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="125.4" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (17 samples, 0.03%)</title><rect x="122.9" y="467.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="125.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (110 samples, 0.18%)</title><rect x="123.2" y="467.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (42 samples, 0.07%)</title><rect x="123.2" y="451.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (42 samples, 0.07%)</title><rect x="123.2" y="435.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.2" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (27 samples, 0.04%)</title><rect x="123.2" y="419.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="126.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.02%)</title><rect x="123.7" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.7" y="430.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.02%)</title><rect x="123.7" y="403.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="126.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (33 samples, 0.05%)</title><rect x="124.0" y="451.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (33 samples, 0.05%)</title><rect x="124.0" y="435.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.0" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.04%)</title><rect x="124.0" y="419.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="127.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (35 samples, 0.06%)</title><rect x="124.6" y="451.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.06%)</title><rect x="124.6" y="435.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.6" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.04%)</title><rect x="124.6" y="419.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="127.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (180 samples, 0.29%)</title><rect x="125.3" y="467.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.3" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (18 samples, 0.03%)</title><rect x="125.3" y="451.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="128.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (32 samples, 0.05%)</title><rect x="125.6" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (32 samples, 0.05%)</title><rect x="125.6" y="435.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.6" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15 samples, 0.02%)</title><rect x="125.6" y="419.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="128.6" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.03%)</title><rect x="125.9" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.9" y="430.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.03%)</title><rect x="125.9" y="403.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="128.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (65 samples, 0.10%)</title><rect x="126.2" y="451.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (65 samples, 0.10%)</title><rect x="126.2" y="435.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.2" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (41 samples, 0.07%)</title><rect x="126.2" y="419.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="129.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.04%)</title><rect x="127.0" y="419.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.0" y="430.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.04%)</title><rect x="127.0" y="403.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="130.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (34 samples, 0.05%)</title><rect x="127.5" y="451.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (34 samples, 0.05%)</title><rect x="127.5" y="435.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.5" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.04%)</title><rect x="127.5" y="419.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="130.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (31 samples, 0.05%)</title><rect x="128.1" y="451.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (31 samples, 0.05%)</title><rect x="128.1" y="435.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="131.1" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (22 samples, 0.04%)</title><rect x="128.1" y="419.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="131.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (502 samples, 0.80%)</title><rect x="128.7" y="659.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collection.stream (85 samples, 0.14%)</title><rect x="128.7" y="643.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (47 samples, 0.07%)</title><rect x="128.7" y="627.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.7" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (47 samples, 0.07%)</title><rect x="128.7" y="611.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="131.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (38 samples, 0.06%)</title><rect x="129.6" y="627.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.6" y="638.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (38 samples, 0.06%)</title><rect x="129.6" y="611.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="132.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (172 samples, 0.27%)</title><rect x="130.5" y="643.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (172 samples, 0.27%)</title><rect x="130.5" y="627.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (172 samples, 0.27%)</title><rect x="130.5" y="611.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.5" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (172 samples, 0.27%)</title><rect x="130.5" y="595.0" width="3.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="133.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (182 samples, 0.29%)</title><rect x="133.8" y="643.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.8" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (21 samples, 0.03%)</title><rect x="133.8" y="627.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.8" y="638.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (21 samples, 0.03%)</title><rect x="133.8" y="611.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="136.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (161 samples, 0.26%)</title><rect x="134.2" y="627.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (21 samples, 0.03%)</title><rect x="134.2" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (21 samples, 0.03%)</title><rect x="134.2" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="137.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$123/951587870.get$Lambda (21 samples, 0.03%)</title><rect x="134.2" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.2" y="590.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$123 (21 samples, 0.03%)</title><rect x="134.2" y="563.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="137.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (140 samples, 0.22%)</title><rect x="134.6" y="611.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.6" y="622.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (140 samples, 0.22%)</title><rect x="134.6" y="595.0" width="2.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="137.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (50 samples, 0.08%)</title><rect x="137.2" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.2" y="654.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (46 samples, 0.07%)</title><rect x="137.2" y="627.0" width="0.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="140.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (8,346 samples, 13.30%)</title><rect x="138.1" y="659.0" width="157.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.1" y="670.0">ru/mail/polis/dao/al..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (66 samples, 0.11%)</title><rect x="138.1" y="643.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="141.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (8,280 samples, 13.20%)</title><rect x="139.4" y="643.0" width="155.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.4" y="654.0">ru/mail/polis/dao/al..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (8,280 samples, 13.20%)</title><rect x="139.4" y="627.0" width="155.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.4" y="638.0">ru/mail/polis/dao/al..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (8,280 samples, 13.20%)</title><rect x="139.4" y="611.0" width="155.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="142.4" y="622.0">ru/mail/polis/dao/al..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (2,856 samples, 4.55%)</title><rect x="139.4" y="595.0" width="53.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="142.4" y="606.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,856 samples, 4.55%)</title><rect x="139.4" y="579.0" width="53.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.4" y="590.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,755 samples, 2.80%)</title><rect x="139.4" y="563.0" width="33.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="142.4" y="574.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,101 samples, 1.75%)</title><rect x="172.4" y="563.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.4" y="574.0"></text>
</g>
<g>
<title>byte[] (1,101 samples, 1.75%)</title><rect x="172.4" y="547.0" width="20.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (2,714 samples, 4.33%)</title><rect x="193.1" y="595.0" width="51.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.1" y="606.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,714 samples, 4.33%)</title><rect x="193.1" y="579.0" width="51.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.1" y="590.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,826 samples, 2.91%)</title><rect x="193.1" y="563.0" width="34.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="196.1" y="574.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (888 samples, 1.42%)</title><rect x="227.4" y="563.0" width="16.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.4" y="574.0"></text>
</g>
<g>
<title>byte[] (888 samples, 1.42%)</title><rect x="227.4" y="547.0" width="16.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="230.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (2,710 samples, 4.32%)</title><rect x="244.1" y="595.0" width="51.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.1" y="606.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,710 samples, 4.32%)</title><rect x="244.1" y="579.0" width="51.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.1" y="590.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,795 samples, 2.86%)</title><rect x="244.1" y="563.0" width="33.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="247.1" y="574.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (915 samples, 1.46%)</title><rect x="277.9" y="563.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.9" y="574.0"></text>
</g>
<g>
<title>byte[] (915 samples, 1.46%)</title><rect x="277.9" y="547.0" width="17.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="280.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.getBytes (126 samples, 0.20%)</title><rect x="295.1" y="691.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.1" y="702.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.20%)</title><rect x="295.1" y="675.0" width="2.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="298.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.proxyIfNotLocal (27,578 samples, 43.95%)</title><rect x="297.5" y="691.0" width="518.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.5" y="702.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.proxyIfNotLocal</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (27,565 samples, 43.93%)</title><rect x="297.5" y="675.0" width="518.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.5" y="686.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (27,565 samples, 43.93%)</title><rect x="297.5" y="659.0" width="518.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.5" y="670.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (27,099 samples, 43.19%)</title><rect x="297.7" y="643.0" width="509.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.7" y="654.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (6,285 samples, 10.02%)</title><rect x="297.7" y="627.0" width="118.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="300.7" y="638.0">byte[]</text>
</g>
<g>
<title>byte[] (20,814 samples, 33.17%)</title><rect x="415.9" y="627.0" width="391.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="418.9" y="638.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (402 samples, 0.64%)</title><rect x="807.3" y="643.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (379 samples, 0.60%)</title><rect x="807.6" y="627.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.6" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (379 samples, 0.60%)</title><rect x="807.6" y="611.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (379 samples, 0.60%)</title><rect x="807.6" y="595.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.6" y="606.0"></text>
</g>
<g>
<title>char[] (349 samples, 0.56%)</title><rect x="807.6" y="579.0" width="6.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="810.6" y="590.0"></text>
</g>
<g>
<title>java.lang.String (18 samples, 0.03%)</title><rect x="814.1" y="579.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="817.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (44 samples, 0.07%)</title><rect x="814.9" y="643.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.9" y="654.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (44 samples, 0.07%)</title><rect x="814.9" y="627.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.9" y="638.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.07%)</title><rect x="814.9" y="611.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="817.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.sendAnswerOrError (133 samples, 0.21%)</title><rect x="816.1" y="691.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="819.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (133 samples, 0.21%)</title><rect x="816.1" y="675.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (133 samples, 0.21%)</title><rect x="816.1" y="659.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (82 samples, 0.13%)</title><rect x="816.1" y="643.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="819.1" y="654.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (82 samples, 0.13%)</title><rect x="816.1" y="627.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.1" y="638.0"></text>
</g>
<g>
<title>byte[] (75 samples, 0.12%)</title><rect x="816.1" y="611.0" width="1.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="819.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (51 samples, 0.08%)</title><rect x="817.6" y="643.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.6" y="654.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (51 samples, 0.08%)</title><rect x="817.6" y="627.0" width="1.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="820.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (1,001 samples, 1.60%)</title><rect x="818.6" y="723.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="821.6" y="734.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,001 samples, 1.60%)</title><rect x="818.6" y="707.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.6" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$109/1504332826.run (1,001 samples, 1.60%)</title><rect x="818.6" y="691.0" width="18.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.6" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (1,001 samples, 1.60%)</title><rect x="818.6" y="675.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.6" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (1,001 samples, 1.60%)</title><rect x="818.6" y="659.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="821.6" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (1,001 samples, 1.60%)</title><rect x="818.6" y="643.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.6" y="654.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (17 samples, 0.03%)</title><rect x="818.6" y="627.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="821.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (984 samples, 1.57%)</title><rect x="818.9" y="627.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="821.9" y="638.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (956 samples, 1.52%)</title><rect x="819.0" y="611.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.0" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (956 samples, 1.52%)</title><rect x="819.0" y="595.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.0" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (956 samples, 1.52%)</title><rect x="819.0" y="579.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.0" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (956 samples, 1.52%)</title><rect x="819.0" y="563.0" width="18.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.0" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (597 samples, 0.95%)</title><rect x="819.0" y="547.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (597 samples, 0.95%)</title><rect x="819.0" y="531.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (590 samples, 0.94%)</title><rect x="819.1" y="515.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.1" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (590 samples, 0.94%)</title><rect x="819.1" y="499.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="822.1" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (564 samples, 0.90%)</title><rect x="819.1" y="483.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.1" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (564 samples, 0.90%)</title><rect x="819.1" y="467.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.1" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (564 samples, 0.90%)</title><rect x="819.1" y="451.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.1" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (564 samples, 0.90%)</title><rect x="819.1" y="435.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.1" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (564 samples, 0.90%)</title><rect x="819.1" y="419.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.1" y="430.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (564 samples, 0.90%)</title><rect x="819.1" y="403.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.1" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (564 samples, 0.90%)</title><rect x="819.1" y="387.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.1" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (564 samples, 0.90%)</title><rect x="819.1" y="371.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="822.1" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (564 samples, 0.90%)</title><rect x="819.1" y="355.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.1" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (564 samples, 0.90%)</title><rect x="819.1" y="339.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.1" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (564 samples, 0.90%)</title><rect x="819.1" y="323.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.1" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (564 samples, 0.90%)</title><rect x="819.1" y="307.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.1" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (564 samples, 0.90%)</title><rect x="819.1" y="291.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.1" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (513 samples, 0.82%)</title><rect x="819.1" y="275.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.1" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (513 samples, 0.82%)</title><rect x="819.1" y="259.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.1" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (513 samples, 0.82%)</title><rect x="819.1" y="243.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="822.1" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (513 samples, 0.82%)</title><rect x="819.1" y="227.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.1" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (202 samples, 0.32%)</title><rect x="819.1" y="211.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.1" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (174 samples, 0.28%)</title><rect x="819.1" y="195.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.1" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (163 samples, 0.26%)</title><rect x="819.1" y="179.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.1" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (163 samples, 0.26%)</title><rect x="819.1" y="163.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.1" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (97 samples, 0.15%)</title><rect x="819.4" y="147.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.4" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (15 samples, 0.02%)</title><rect x="819.4" y="131.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.4" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (82 samples, 0.13%)</title><rect x="819.7" y="131.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="822.7" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (71 samples, 0.11%)</title><rect x="819.9" y="115.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.9" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (71 samples, 0.11%)</title><rect x="819.9" y="99.0" width="1.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="822.9" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (47 samples, 0.07%)</title><rect x="821.3" y="147.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.3" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (47 samples, 0.07%)</title><rect x="821.3" y="131.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="824.3" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (28 samples, 0.04%)</title><rect x="822.4" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.4" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (18 samples, 0.03%)</title><rect x="822.4" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.4" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 0.02%)</title><rect x="822.9" y="211.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="825.9" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (165 samples, 0.26%)</title><rect x="823.2" y="211.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.2" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (19 samples, 0.03%)</title><rect x="823.2" y="195.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="826.2" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (146 samples, 0.23%)</title><rect x="823.6" y="195.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.6" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (138 samples, 0.22%)</title><rect x="823.7" y="179.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.7" y="190.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (138 samples, 0.22%)</title><rect x="823.7" y="163.0" width="2.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="826.7" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (127 samples, 0.20%)</title><rect x="826.3" y="211.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="829.3" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (112 samples, 0.18%)</title><rect x="826.3" y="195.0" width="2.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="829.3" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (15 samples, 0.02%)</title><rect x="828.4" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (15 samples, 0.02%)</title><rect x="828.4" y="179.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (15 samples, 0.02%)</title><rect x="828.4" y="163.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="831.4" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (15 samples, 0.02%)</title><rect x="828.4" y="147.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="831.4" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (15 samples, 0.02%)</title><rect x="828.4" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (15 samples, 0.02%)</title><rect x="828.4" y="115.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="831.4" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (51 samples, 0.08%)</title><rect x="828.7" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.7" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (51 samples, 0.08%)</title><rect x="828.7" y="259.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (51 samples, 0.08%)</title><rect x="828.7" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (51 samples, 0.08%)</title><rect x="828.7" y="227.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.7" y="238.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (51 samples, 0.08%)</title><rect x="828.7" y="211.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="831.7" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (51 samples, 0.08%)</title><rect x="828.7" y="195.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (51 samples, 0.08%)</title><rect x="828.7" y="179.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (51 samples, 0.08%)</title><rect x="828.7" y="163.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.7" y="174.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (51 samples, 0.08%)</title><rect x="828.7" y="147.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.7" y="158.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (48 samples, 0.08%)</title><rect x="828.8" y="131.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="831.8" y="142.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (18 samples, 0.03%)</title><rect x="829.0" y="115.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="832.0" y="126.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (18 samples, 0.03%)</title><rect x="829.3" y="115.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="832.3" y="126.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (18 samples, 0.03%)</title><rect x="829.3" y="99.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.3" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (14 samples, 0.02%)</title><rect x="829.4" y="83.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.4" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (14 samples, 0.02%)</title><rect x="829.4" y="67.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.4" y="78.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/811587677.invoke (14 samples, 0.02%)</title><rect x="829.4" y="51.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.4" y="62.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (14 samples, 0.02%)</title><rect x="829.4" y="35.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.4" y="46.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (25 samples, 0.04%)</title><rect x="829.7" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.7" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (16 samples, 0.03%)</title><rect x="829.9" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="832.9" y="478.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (16 samples, 0.03%)</title><rect x="829.9" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.9" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (278 samples, 0.44%)</title><rect x="830.2" y="547.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.2" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (278 samples, 0.44%)</title><rect x="830.2" y="531.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.2" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (278 samples, 0.44%)</title><rect x="830.2" y="515.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (274 samples, 0.44%)</title><rect x="830.2" y="499.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="833.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (274 samples, 0.44%)</title><rect x="830.2" y="483.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="833.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (270 samples, 0.43%)</title><rect x="830.2" y="467.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.2" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (264 samples, 0.42%)</title><rect x="830.3" y="451.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (264 samples, 0.42%)</title><rect x="830.3" y="435.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.3" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (14 samples, 0.02%)</title><rect x="830.3" y="419.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="833.3" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (250 samples, 0.40%)</title><rect x="830.6" y="419.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.6" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (245 samples, 0.39%)</title><rect x="830.6" y="403.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.6" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (241 samples, 0.38%)</title><rect x="830.7" y="387.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (14 samples, 0.02%)</title><rect x="830.8" y="371.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.8" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (14 samples, 0.02%)</title><rect x="830.8" y="355.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.8" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (14 samples, 0.02%)</title><rect x="830.8" y="339.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.8" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (14 samples, 0.02%)</title><rect x="830.8" y="323.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.8" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (222 samples, 0.35%)</title><rect x="831.0" y="371.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.0" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (222 samples, 0.35%)</title><rect x="831.0" y="355.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (222 samples, 0.35%)</title><rect x="831.0" y="339.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="834.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (222 samples, 0.35%)</title><rect x="831.0" y="323.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.0" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (222 samples, 0.35%)</title><rect x="831.0" y="307.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.0" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (210 samples, 0.33%)</title><rect x="831.2" y="291.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.2" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (210 samples, 0.33%)</title><rect x="831.2" y="275.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.2" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (63 samples, 0.10%)</title><rect x="831.2" y="259.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.2" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (57 samples, 0.09%)</title><rect x="831.3" y="243.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.3" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (45 samples, 0.07%)</title><rect x="831.3" y="227.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.3" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (42 samples, 0.07%)</title><rect x="831.3" y="211.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.3" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (42 samples, 0.07%)</title><rect x="831.3" y="195.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.3" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (37 samples, 0.06%)</title><rect x="831.4" y="179.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.4" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (28 samples, 0.04%)</title><rect x="831.4" y="163.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="834.4" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (25 samples, 0.04%)</title><rect x="831.5" y="147.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.5" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (19 samples, 0.03%)</title><rect x="831.6" y="131.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.6" y="142.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (15 samples, 0.02%)</title><rect x="831.7" y="115.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.7" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (15 samples, 0.02%)</title><rect x="831.7" y="99.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="834.7" y="110.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (15 samples, 0.02%)</title><rect x="831.7" y="83.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.7" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (15 samples, 0.02%)</title><rect x="831.7" y="67.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.7" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (67 samples, 0.11%)</title><rect x="832.4" y="259.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="835.4" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (42 samples, 0.07%)</title><rect x="832.4" y="243.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.4" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (28 samples, 0.04%)</title><rect x="832.4" y="227.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.4" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (19 samples, 0.03%)</title><rect x="832.5" y="211.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="835.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growSpine (14 samples, 0.02%)</title><rect x="832.9" y="227.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="835.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (25 samples, 0.04%)</title><rect x="833.1" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.1" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (25 samples, 0.04%)</title><rect x="833.1" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.1" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (25 samples, 0.04%)</title><rect x="833.1" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.1" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (23 samples, 0.04%)</title><rect x="833.1" y="195.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="836.1" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (23 samples, 0.04%)</title><rect x="833.1" y="179.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.1" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (20 samples, 0.03%)</title><rect x="833.2" y="163.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.2" y="174.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (14 samples, 0.02%)</title><rect x="833.3" y="147.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.3" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (14 samples, 0.02%)</title><rect x="833.3" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.3" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (14 samples, 0.02%)</title><rect x="833.3" y="115.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.3" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (14 samples, 0.02%)</title><rect x="833.3" y="99.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.3" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (27 samples, 0.04%)</title><rect x="833.6" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.6" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (27 samples, 0.04%)</title><rect x="833.6" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="836.6" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (25 samples, 0.04%)</title><rect x="833.6" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.6" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (16 samples, 0.03%)</title><rect x="833.8" y="211.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="836.8" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (53 samples, 0.08%)</title><rect x="834.1" y="259.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.1" y="270.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (53 samples, 0.08%)</title><rect x="834.1" y="243.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="837.1" y="254.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (29 samples, 0.05%)</title><rect x="835.4" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.4" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (29 samples, 0.05%)</title><rect x="835.4" y="531.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.4" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (29 samples, 0.05%)</title><rect x="835.4" y="515.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.4" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (29 samples, 0.05%)</title><rect x="835.4" y="499.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.4" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.04%)</title><rect x="835.5" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (20 samples, 0.03%)</title><rect x="835.6" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.6" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (19 samples, 0.03%)</title><rect x="835.6" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="838.6" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (19 samples, 0.03%)</title><rect x="835.6" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="838.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (19 samples, 0.03%)</title><rect x="835.6" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (18 samples, 0.03%)</title><rect x="835.6" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="838.6" y="414.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (18 samples, 0.03%)</title><rect x="835.6" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.6" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (51 samples, 0.08%)</title><rect x="836.0" y="547.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.0" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (47 samples, 0.07%)</title><rect x="836.1" y="531.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.1" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (45 samples, 0.07%)</title><rect x="836.1" y="515.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="839.1" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (44 samples, 0.07%)</title><rect x="836.1" y="499.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.1" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (44 samples, 0.07%)</title><rect x="836.1" y="483.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.1" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (44 samples, 0.07%)</title><rect x="836.1" y="467.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (27 samples, 0.04%)</title><rect x="836.1" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.1" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (23 samples, 0.04%)</title><rect x="837.0" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="840.0" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (22 samples, 0.04%)</title><rect x="837.0" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.0" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (21 samples, 0.03%)</title><rect x="837.0" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="840.0" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (21 samples, 0.03%)</title><rect x="837.0" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="840.0" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (17 samples, 0.03%)</title><rect x="837.0" y="547.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="840.0" y="558.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18,747 samples, 29.88%)</title><rect x="837.4" y="771.0" width="352.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.4" y="782.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,015 samples, 1.62%)</title><rect x="837.4" y="755.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="840.4" y="766.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,015 samples, 1.62%)</title><rect x="837.4" y="739.0" width="19.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="840.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (17,732 samples, 28.26%)</title><rect x="856.5" y="755.0" width="333.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="859.5" y="766.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (17,732 samples, 28.26%)</title><rect x="856.5" y="739.0" width="333.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="859.5" y="750.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (17,732 samples, 28.26%)</title><rect x="856.5" y="723.0" width="333.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.5" y="734.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,009 samples, 6.39%)</title><rect x="856.5" y="707.0" width="75.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="859.5" y="718.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,009 samples, 6.39%)</title><rect x="856.5" y="691.0" width="75.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.5" y="702.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (2,443 samples, 3.89%)</title><rect x="856.5" y="675.0" width="46.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.5" y="686.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,718 samples, 2.74%)</title><rect x="856.5" y="659.0" width="32.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.5" y="670.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,718 samples, 2.74%)</title><rect x="856.5" y="643.0" width="32.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.5" y="654.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,718 samples, 2.74%)</title><rect x="856.5" y="627.0" width="32.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="859.5" y="638.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,718 samples, 2.74%)</title><rect x="856.5" y="611.0" width="32.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="859.5" y="622.0">ja..</text>
</g>
<g>
<title>java.lang.String (887 samples, 1.41%)</title><rect x="856.5" y="595.0" width="16.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="859.5" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (831 samples, 1.32%)</title><rect x="873.2" y="595.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.2" y="606.0"></text>
</g>
<g>
<title>byte[] (831 samples, 1.32%)</title><rect x="873.2" y="579.0" width="15.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="876.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (725 samples, 1.16%)</title><rect x="888.8" y="659.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="891.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (712 samples, 1.13%)</title><rect x="888.8" y="643.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="891.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (712 samples, 1.13%)</title><rect x="888.8" y="627.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="891.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$129/964019704.get$Lambda (712 samples, 1.13%)</title><rect x="888.8" y="611.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="891.8" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$129 (712 samples, 1.13%)</title><rect x="888.8" y="595.0" width="13.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="891.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,566 samples, 2.50%)</title><rect x="902.5" y="675.0" width="29.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.5" y="686.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,566 samples, 2.50%)</title><rect x="902.5" y="659.0" width="29.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.5" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,566 samples, 2.50%)</title><rect x="902.5" y="643.0" width="29.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.5" y="654.0">ja..</text>
</g>
<g>
<title>java.lang.String (572 samples, 0.91%)</title><rect x="902.5" y="627.0" width="10.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="905.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (994 samples, 1.58%)</title><rect x="913.2" y="627.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="916.2" y="638.0"></text>
</g>
<g>
<title>byte[] (994 samples, 1.58%)</title><rect x="913.2" y="611.0" width="18.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="916.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9,245 samples, 14.73%)</title><rect x="931.9" y="707.0" width="173.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.9" y="718.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one.nio.http.Request (1,336 samples, 2.13%)</title><rect x="931.9" y="691.0" width="25.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="934.9" y="702.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,830 samples, 2.92%)</title><rect x="957.0" y="691.0" width="34.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="960.0" y="702.0">on..</text>
</g>
<g>
<title>java.lang.String[] (1,767 samples, 2.82%)</title><rect x="957.0" y="675.0" width="33.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="960.0" y="686.0">ja..</text>
</g>
<g>
<title>java.lang.String[] (63 samples, 0.10%)</title><rect x="990.3" y="675.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="993.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,079 samples, 9.69%)</title><rect x="991.5" y="691.0" width="114.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.5" y="702.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,079 samples, 9.69%)</title><rect x="991.5" y="675.0" width="114.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="994.5" y="686.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (3,311 samples, 5.28%)</title><rect x="991.5" y="659.0" width="62.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="994.5" y="670.0">char[]</text>
</g>
<g>
<title>char[] (255 samples, 0.41%)</title><rect x="1053.7" y="659.0" width="4.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1056.7" y="670.0"></text>
</g>
<g>
<title>java.lang.String (711 samples, 1.13%)</title><rect x="1058.5" y="659.0" width="13.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1061.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,802 samples, 2.87%)</title><rect x="1071.9" y="659.0" width="33.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1074.9" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,802 samples, 2.87%)</title><rect x="1071.9" y="643.0" width="33.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1074.9" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,802 samples, 2.87%)</title><rect x="1071.9" y="627.0" width="33.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.9" y="638.0">ja..</text>
</g>
<g>
<title>byte[] (1,802 samples, 2.87%)</title><rect x="1071.9" y="611.0" width="33.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1074.9" y="622.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,478 samples, 7.14%)</title><rect x="1105.8" y="707.0" width="84.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1108.8" y="718.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,478 samples, 7.14%)</title><rect x="1105.8" y="691.0" width="84.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1108.8" y="702.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (2,428 samples, 3.87%)</title><rect x="1105.8" y="675.0" width="45.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1108.8" y="686.0">char[]</text>
</g>
<g>
<title>java.lang.String (836 samples, 1.33%)</title><rect x="1151.4" y="675.0" width="15.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1154.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,214 samples, 1.93%)</title><rect x="1167.2" y="675.0" width="22.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1170.2" y="686.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,214 samples, 1.93%)</title><rect x="1167.2" y="659.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1170.2" y="670.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,214 samples, 1.93%)</title><rect x="1167.2" y="643.0" width="22.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1170.2" y="654.0">j..</text>
</g>
<g>
<title>byte[] (1,214 samples, 1.93%)</title><rect x="1167.2" y="627.0" width="22.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1170.2" y="638.0">b..</text>
</g>
</g>
</svg>
