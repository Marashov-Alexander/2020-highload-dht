<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (1,087 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.09%)</title><rect x="10.0" y="819.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="10.0" y="803.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="10.0" y="787.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.09%)</title><rect x="10.0" y="771.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.09%)</title><rect x="10.0" y="755.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="10.0" y="739.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (734 samples, 67.53%)</title><rect x="11.1" y="883.0" width="796.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (734 samples, 67.53%)</title><rect x="11.1" y="867.0" width="796.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.1" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (734 samples, 67.53%)</title><rect x="11.1" y="851.0" width="796.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.1" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (118 samples, 10.86%)</title><rect x="11.1" y="835.0" width="128.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.1" y="846.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (107 samples, 9.84%)</title><rect x="23.0" y="819.0" width="116.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.0" y="830.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (86 samples, 7.91%)</title><rect x="23.0" y="803.0" width="93.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="814.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.18%)</title><rect x="30.6" y="787.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.18%)</title><rect x="30.6" y="771.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.74%)</title><rect x="32.8" y="787.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.09%)</title><rect x="40.4" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.09%)</title><rect x="40.4" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.37%)</title><rect x="41.5" y="787.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.37%)</title><rect x="41.5" y="771.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="43.7" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="43.7" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="43.7" y="723.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="43.7" y="707.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="46.7" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="43.7" y="691.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="46.7" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="43.7" y="675.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="46.7" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.09%)</title><rect x="43.7" y="659.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="46.7" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="43.7" y="643.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="46.7" y="654.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="43.7" y="627.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="46.7" y="638.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.09%)</title><rect x="43.7" y="611.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="46.7" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.09%)</title><rect x="43.7" y="595.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="46.7" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="43.7" y="579.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="46.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="44.7" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (65 samples, 5.98%)</title><rect x="45.8" y="787.0" width="70.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.8" y="798.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (65 samples, 5.98%)</title><rect x="45.8" y="771.0" width="70.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="782.0">jdk/inte..</text>
</g>
<g>
<title>Unsafe_Park (35 samples, 3.22%)</title><rect x="49.1" y="755.0" width="38.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="52.1" y="766.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.28%)</title><rect x="56.7" y="739.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="59.7" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="59.9" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="62.9" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="61.0" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="64.0" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 1.01%)</title><rect x="62.1" y="739.0" width="11.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="65.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.55%)</title><rect x="64.3" y="723.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="67.3" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.28%)</title><rect x="70.8" y="723.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="73.8" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="74.0" y="739.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="77.0" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.18%)</title><rect x="76.2" y="739.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="79.2" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.09%)</title><rect x="78.4" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="81.4" y="750.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="79.5" y="739.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="82.5" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.18%)</title><rect x="80.6" y="739.0" width="2.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="83.6" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.18%)</title><rect x="80.6" y="723.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="83.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.18%)</title><rect x="80.6" y="707.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="83.6" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.18%)</title><rect x="80.6" y="691.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="83.6" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.18%)</title><rect x="80.6" y="675.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="83.6" y="686.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.18%)</title><rect x="80.6" y="659.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="83.6" y="670.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.18%)</title><rect x="80.6" y="643.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="83.6" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="82.7" y="739.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="85.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="83.8" y="739.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.09%)</title><rect x="86.0" y="739.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="89.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 2.30%)</title><rect x="87.1" y="755.0" width="27.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="90.1" y="766.0">[..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.28%)</title><rect x="87.1" y="739.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="90.1" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="90.3" y="739.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (21 samples, 1.93%)</title><rect x="91.4" y="739.0" width="22.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="94.4" y="750.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (21 samples, 1.93%)</title><rect x="91.4" y="723.0" width="22.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="94.4" y="734.0">e..</text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.37%)</title><rect x="91.4" y="707.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="94.4" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (17 samples, 1.56%)</title><rect x="95.8" y="707.0" width="18.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="98.8" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (15 samples, 1.38%)</title><rect x="97.9" y="691.0" width="16.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="100.9" y="702.0"></text>
</g>
<g>
<title>do_futex (14 samples, 1.29%)</title><rect x="97.9" y="675.0" width="15.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="100.9" y="686.0"></text>
</g>
<g>
<title>futex_wait (14 samples, 1.29%)</title><rect x="97.9" y="659.0" width="15.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="100.9" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (5 samples, 0.46%)</title><rect x="99.0" y="643.0" width="5.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="102.0" y="654.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.18%)</title><rect x="102.3" y="627.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="105.3" y="638.0"></text>
</g>
<g>
<title>futex_wait_setup (8 samples, 0.74%)</title><rect x="104.4" y="643.0" width="8.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="107.4" y="654.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.18%)</title><rect x="109.9" y="627.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="112.9" y="638.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.09%)</title><rect x="111.0" y="611.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="114.0" y="622.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.09%)</title><rect x="112.0" y="627.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="115.0" y="638.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.09%)</title><rect x="113.1" y="675.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="116.1" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="114.2" y="755.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="117.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.83%)</title><rect x="116.4" y="803.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.74%)</title><rect x="117.5" y="787.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.46%)</title><rect x="118.6" y="771.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="122.9" y="755.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.09%)</title><rect x="124.0" y="771.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="124.0" y="755.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="124.0" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="127.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="124.0" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.09%)</title><rect x="124.0" y="707.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.09%)</title><rect x="124.0" y="691.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.09%)</title><rect x="125.1" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.09%)</title><rect x="125.1" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="125.1" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.09%)</title><rect x="125.1" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.09%)</title><rect x="125.1" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.10%)</title><rect x="126.2" y="803.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.10%)</title><rect x="126.2" y="787.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.10%)</title><rect x="126.2" y="771.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.10%)</title><rect x="126.2" y="755.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 1.10%)</title><rect x="126.2" y="739.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.2" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="126.2" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="129.2" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.37%)</title><rect x="127.2" y="723.0" width="4.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.2" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="127.2" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="130.2" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.18%)</title><rect x="128.3" y="707.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="131.3" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="130.5" y="707.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="133.5" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.64%)</title><rect x="131.6" y="723.0" width="7.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="134.6" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.64%)</title><rect x="131.6" y="707.0" width="7.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="134.6" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.64%)</title><rect x="131.6" y="691.0" width="7.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="134.6" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.64%)</title><rect x="131.6" y="675.0" width="7.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="134.6" y="686.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.64%)</title><rect x="131.6" y="659.0" width="7.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="134.6" y="670.0"></text>
</g>
<g>
<title>futex_wake (7 samples, 0.64%)</title><rect x="131.6" y="643.0" width="7.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="134.6" y="654.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 0.64%)</title><rect x="131.6" y="627.0" width="7.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="134.6" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 0.64%)</title><rect x="131.6" y="611.0" width="7.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="134.6" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.64%)</title><rect x="131.6" y="595.0" width="7.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="134.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$119/1704314390.run (3 samples, 0.28%)</title><rect x="139.2" y="835.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityPut$2 (3 samples, 0.28%)</title><rect x="139.2" y="819.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.09%)</title><rect x="139.2" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$123/1008778936.run (1 samples, 0.09%)</title><rect x="139.2" y="787.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.2" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.09%)</title><rect x="140.3" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.09%)</title><rect x="140.3" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="140.3" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (1 samples, 0.09%)</title><rect x="141.4" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.09%)</title><rect x="141.4" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="141.4" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="141.4" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.4" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="141.4" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$123/1008778936.run (608 samples, 55.93%)</title><rect x="142.4" y="835.0" width="660.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.4" y="846.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$123/1008778936.run</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$1 (608 samples, 55.93%)</title><rect x="142.4" y="819.0" width="660.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.4" y="830.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$1</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="143.5" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.18%)</title><rect x="144.6" y="803.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.18%)</title><rect x="144.6" y="787.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="144.6" y="771.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="144.6" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.6" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="144.6" y="739.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="144.6" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.09%)</title><rect x="145.7" y="755.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (466 samples, 42.87%)</title><rect x="146.8" y="803.0" width="505.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.8" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.64%)</title><rect x="152.2" y="787.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.64%)</title><rect x="152.2" y="771.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.64%)</title><rect x="152.2" y="755.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.09%)</title><rect x="158.7" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (452 samples, 41.58%)</title><rect x="159.8" y="787.0" width="490.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.8" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.64%)</title><rect x="159.8" y="771.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.28%)</title><rect x="164.1" y="755.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.28%)</title><rect x="164.1" y="739.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.28%)</title><rect x="164.1" y="723.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.28%)</title><rect x="164.1" y="707.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.28%)</title><rect x="164.1" y="691.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (445 samples, 40.94%)</title><rect x="167.4" y="771.0" width="483.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.4" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (442 samples, 40.66%)</title><rect x="170.7" y="755.0" width="479.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.18%)</title><rect x="170.7" y="739.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="173.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (437 samples, 40.20%)</title><rect x="172.8" y="739.0" width="474.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.8" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (437 samples, 40.20%)</title><rect x="172.8" y="723.0" width="474.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.8" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (19 samples, 1.75%)</title><rect x="173.9" y="707.0" width="20.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="176.9" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.18%)</title><rect x="183.7" y="691.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="186.7" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.09%)</title><rect x="185.9" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="188.9" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.09%)</title><rect x="186.9" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="189.9" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3 (2 samples, 0.18%)</title><rect x="188.0" y="691.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="191.0" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.28%)</title><rect x="190.2" y="691.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="193.2" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.09%)</title><rect x="191.3" y="675.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="194.3" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="192.4" y="675.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="195.4" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="193.5" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="196.5" y="702.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.09%)</title><rect x="194.5" y="707.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="197.5" y="718.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.09%)</title><rect x="195.6" y="707.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="198.6" y="718.0"></text>
</g>
<g>
<title>__libc_send (413 samples, 37.99%)</title><rect x="196.7" y="707.0" width="448.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="199.7" y="718.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (409 samples, 37.63%)</title><rect x="201.1" y="691.0" width="444.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="204.1" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.18%)</title><rect x="201.1" y="675.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="204.1" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (407 samples, 37.44%)</title><rect x="203.2" y="675.0" width="441.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="206.2" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (403 samples, 37.07%)</title><rect x="207.6" y="659.0" width="437.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="210.6" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (401 samples, 36.89%)</title><rect x="208.7" y="643.0" width="435.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="211.7" y="654.0">__sys_sendto</text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.09%)</title><rect x="213.0" y="627.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="216.0" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (387 samples, 35.60%)</title><rect x="214.1" y="627.0" width="420.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="217.1" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (377 samples, 34.68%)</title><rect x="216.3" y="611.0" width="409.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="219.3" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (376 samples, 34.59%)</title><rect x="217.3" y="595.0" width="408.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="220.3" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="217.3" y="579.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="220.3" y="590.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.28%)</title><rect x="218.4" y="579.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="221.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.18%)</title><rect x="219.5" y="563.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="222.5" y="574.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.09%)</title><rect x="221.7" y="579.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="224.7" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.09%)</title><rect x="222.8" y="579.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="225.8" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.09%)</title><rect x="223.9" y="579.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="226.9" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.09%)</title><rect x="224.9" y="579.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="227.9" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (367 samples, 33.76%)</title><rect x="226.0" y="579.0" width="398.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="229.0" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="230.4" y="563.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="233.4" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.28%)</title><rect x="231.5" y="563.0" width="3.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="234.5" y="574.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.09%)</title><rect x="232.5" y="547.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="235.5" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.09%)</title><rect x="233.6" y="547.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="236.6" y="558.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.09%)</title><rect x="234.7" y="563.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="237.7" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (5 samples, 0.46%)</title><rect x="235.8" y="563.0" width="5.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="238.8" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (5 samples, 0.46%)</title><rect x="235.8" y="547.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="238.8" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (29 samples, 2.67%)</title><rect x="241.2" y="563.0" width="31.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="244.2" y="574.0">sk..</text>
</g>
<g>
<title>__alloc_skb (29 samples, 2.67%)</title><rect x="241.2" y="547.0" width="31.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="244.2" y="558.0">__..</text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.09%)</title><rect x="244.5" y="531.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="247.5" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (12 samples, 1.10%)</title><rect x="245.6" y="531.0" width="13.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="248.6" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (6 samples, 0.55%)</title><rect x="246.7" y="515.0" width="6.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="249.7" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.09%)</title><rect x="252.1" y="499.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="255.1" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.09%)</title><rect x="253.2" y="515.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="256.2" y="526.0"></text>
</g>
<g>
<title>memset (3 samples, 0.28%)</title><rect x="254.3" y="515.0" width="3.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="257.3" y="526.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.09%)</title><rect x="257.5" y="515.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="260.5" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.37%)</title><rect x="258.6" y="531.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="261.6" y="542.0"></text>
</g>
<g>
<title>memset (8 samples, 0.74%)</title><rect x="262.9" y="531.0" width="8.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="265.9" y="542.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.09%)</title><rect x="271.6" y="531.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="274.6" y="542.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.28%)</title><rect x="272.7" y="563.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="275.7" y="574.0"></text>
</g>
<g>
<title>tcp_push (314 samples, 28.89%)</title><rect x="276.0" y="563.0" width="340.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="279.0" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (312 samples, 28.70%)</title><rect x="277.0" y="547.0" width="338.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="280.0" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.09%)</title><rect x="278.1" y="531.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="281.1" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.09%)</title><rect x="279.2" y="531.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="282.2" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.09%)</title><rect x="280.3" y="531.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="283.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (308 samples, 28.33%)</title><rect x="281.4" y="531.0" width="334.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="284.4" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.18%)</title><rect x="283.6" y="515.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="286.6" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (289 samples, 26.59%)</title><rect x="285.7" y="515.0" width="313.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="288.7" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.18%)</title><rect x="293.3" y="499.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="296.3" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.18%)</title><rect x="295.5" y="499.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="298.5" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (273 samples, 25.11%)</title><rect x="297.7" y="499.0" width="296.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="300.7" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (272 samples, 25.02%)</title><rect x="297.7" y="483.0" width="295.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="300.7" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (270 samples, 24.84%)</title><rect x="298.8" y="467.0" width="293.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="301.8" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (46 samples, 4.23%)</title><rect x="299.8" y="451.0" width="50.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="302.8" y="462.0">__ip_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.09%)</title><rect x="300.9" y="435.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="303.9" y="446.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.09%)</title><rect x="302.0" y="435.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="305.0" y="446.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.09%)</title><rect x="303.1" y="435.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="306.1" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.09%)</title><rect x="304.2" y="435.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="307.2" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (1 samples, 0.09%)</title><rect x="305.3" y="435.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="308.3" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (37 samples, 3.40%)</title><rect x="306.4" y="435.0" width="40.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="309.4" y="446.0">nf_..</text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.09%)</title><rect x="307.4" y="419.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="310.4" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (4 samples, 0.37%)</title><rect x="308.5" y="419.0" width="4.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="311.5" y="430.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (4 samples, 0.37%)</title><rect x="308.5" y="403.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="311.5" y="414.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (27 samples, 2.48%)</title><rect x="312.9" y="419.0" width="29.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="315.9" y="430.0">ip..</text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (25 samples, 2.30%)</title><rect x="312.9" y="403.0" width="27.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="315.9" y="414.0">n..</text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.09%)</title><rect x="321.6" y="387.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="324.6" y="398.0"></text>
</g>
<g>
<title>get_l4proto?[nf_conntrack] (2 samples, 0.18%)</title><rect x="322.6" y="387.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="325.6" y="398.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (1 samples, 0.09%)</title><rect x="324.8" y="387.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="327.8" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_tcp_packet?[nf_conntrack] (11 samples, 1.01%)</title><rect x="325.9" y="387.0" width="11.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="328.9" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.18%)</title><rect x="328.1" y="371.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="331.1" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="329.2" y="355.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="332.2" y="366.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (7 samples, 0.64%)</title><rect x="330.2" y="371.0" width="7.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="333.2" y="382.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (4 samples, 0.37%)</title><rect x="333.5" y="355.0" width="4.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="336.5" y="366.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.18%)</title><rect x="337.8" y="387.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="340.8" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.18%)</title><rect x="340.0" y="403.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="343.0" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat] (4 samples, 0.37%)</title><rect x="342.2" y="419.0" width="4.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="345.2" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat] (2 samples, 0.18%)</title><rect x="344.4" y="403.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="347.4" y="414.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (2 samples, 0.18%)</title><rect x="344.4" y="387.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="347.4" y="398.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat] (3 samples, 0.28%)</title><rect x="346.5" y="435.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="349.5" y="446.0"></text>
</g>
<g>
<title>ip_output (222 samples, 20.42%)</title><rect x="349.8" y="451.0" width="241.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="352.8" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (216 samples, 19.87%)</title><rect x="349.8" y="435.0" width="234.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="352.8" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.09%)</title><rect x="350.9" y="419.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="353.9" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (214 samples, 19.69%)</title><rect x="352.0" y="419.0" width="232.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="355.0" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (211 samples, 19.41%)</title><rect x="355.2" y="403.0" width="229.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="358.2" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (195 samples, 17.94%)</title><rect x="357.4" y="387.0" width="211.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="360.4" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.20 (194 samples, 17.85%)</title><rect x="358.5" y="371.0" width="210.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="361.5" y="382.0">do_softirq.part.20</text>
</g>
<g>
<title>do_softirq_own_stack (191 samples, 17.57%)</title><rect x="361.7" y="355.0" width="207.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="364.7" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (190 samples, 17.48%)</title><rect x="361.7" y="339.0" width="206.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="364.7" y="350.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (189 samples, 17.39%)</title><rect x="361.7" y="323.0" width="205.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="364.7" y="334.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.18%)</title><rect x="365.0" y="307.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="368.0" y="318.0"></text>
</g>
<g>
<title>process_backlog (184 samples, 16.93%)</title><rect x="367.1" y="307.0" width="199.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="370.1" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (180 samples, 16.56%)</title><rect x="371.5" y="291.0" width="195.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="374.5" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.09%)</title><rect x="372.6" y="275.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="375.6" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (178 samples, 16.38%)</title><rect x="373.7" y="275.0" width="193.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="376.7" y="286.0">__netif_receive_skb_one_c..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.55%)</title><rect x="375.8" y="259.0" width="6.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="378.8" y="270.0"></text>
</g>
<g>
<title>ip_rcv (168 samples, 15.46%)</title><rect x="382.3" y="259.0" width="182.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="385.3" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.20 (5 samples, 0.46%)</title><rect x="384.5" y="243.0" width="5.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="387.5" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (155 samples, 14.26%)</title><rect x="389.9" y="243.0" width="168.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="392.9" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (152 samples, 13.98%)</title><rect x="392.1" y="227.0" width="165.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="395.1" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (146 samples, 13.43%)</title><rect x="394.3" y="211.0" width="158.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="397.3" y="222.0">ip_local_deliver_fin..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (146 samples, 13.43%)</title><rect x="394.3" y="195.0" width="158.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="397.3" y="206.0">ip_protocol_deliver_..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.28%)</title><rect x="396.5" y="179.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="399.5" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.09%)</title><rect x="399.7" y="179.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="402.7" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (140 samples, 12.88%)</title><rect x="400.8" y="179.0" width="152.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="403.8" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.28%)</title><rect x="409.5" y="163.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="412.5" y="174.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.09%)</title><rect x="412.7" y="163.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="415.7" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.09%)</title><rect x="413.8" y="163.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="416.8" y="174.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.09%)</title><rect x="414.9" y="163.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="417.9" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.37%)</title><rect x="416.0" y="163.0" width="4.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="419.0" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.37%)</title><rect x="416.0" y="147.0" width="4.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="419.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (122 samples, 11.22%)</title><rect x="420.3" y="163.0" width="132.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="423.3" y="174.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.18%)</title><rect x="421.4" y="147.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="424.4" y="158.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.09%)</title><rect x="423.6" y="147.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="426.6" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (118 samples, 10.86%)</title><rect x="424.7" y="147.0" width="128.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="427.7" y="158.0">tcp_rcv_establis..</text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.46%)</title><rect x="429.0" y="131.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="432.0" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.37%)</title><rect x="430.1" y="115.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="433.1" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.37%)</title><rect x="430.1" y="99.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="433.1" y="110.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.37%)</title><rect x="430.1" y="83.0" width="4.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="433.1" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.28%)</title><rect x="431.2" y="67.0" width="3.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="434.2" y="78.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.09%)</title><rect x="434.5" y="131.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="437.5" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.09%)</title><rect x="435.5" y="131.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="438.5" y="142.0"></text>
</g>
<g>
<title>tcp_ack (38 samples, 3.50%)</title><rect x="436.6" y="131.0" width="41.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="439.6" y="142.0">tcp..</text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.09%)</title><rect x="442.1" y="115.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="445.1" y="126.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.09%)</title><rect x="443.1" y="115.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="446.1" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (30 samples, 2.76%)</title><rect x="444.2" y="115.0" width="32.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="447.2" y="126.0">tc..</text>
</g>
<g>
<title>__kfree_skb (15 samples, 1.38%)</title><rect x="454.0" y="99.0" width="16.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="457.0" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.37%)</title><rect x="454.0" y="83.0" width="4.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="457.0" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.37%)</title><rect x="454.0" y="67.0" width="4.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="457.0" y="78.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.09%)</title><rect x="457.2" y="51.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="460.2" y="62.0"></text>
</g>
<g>
<title>skb_release_all (10 samples, 0.92%)</title><rect x="458.3" y="83.0" width="10.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="461.3" y="94.0"></text>
</g>
<g>
<title>skb_release_data (10 samples, 0.92%)</title><rect x="458.3" y="67.0" width="10.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="461.3" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.18%)</title><rect x="467.0" y="51.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="470.0" y="62.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.18%)</title><rect x="467.0" y="35.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="470.0" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.09%)</title><rect x="469.2" y="83.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="472.2" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.09%)</title><rect x="470.3" y="99.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="473.3" y="110.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.09%)</title><rect x="471.4" y="99.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="474.4" y="110.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="472.4" y="99.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="475.4" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.45 (3 samples, 0.28%)</title><rect x="473.5" y="99.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="476.5" y="110.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.09%)</title><rect x="476.8" y="115.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="479.8" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.18%)</title><rect x="477.9" y="131.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="480.9" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (56 samples, 5.15%)</title><rect x="480.0" y="131.0" width="60.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="483.0" y="142.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (56 samples, 5.15%)</title><rect x="480.0" y="115.0" width="60.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="483.0" y="126.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (56 samples, 5.15%)</title><rect x="480.0" y="99.0" width="60.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="483.0" y="110.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (56 samples, 5.15%)</title><rect x="480.0" y="83.0" width="60.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="483.0" y="94.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (56 samples, 5.15%)</title><rect x="480.0" y="67.0" width="60.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="483.0" y="78.0">__lock..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.28%)</title><rect x="540.8" y="131.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="543.8" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.28%)</title><rect x="544.1" y="131.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="547.1" y="142.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.18%)</title><rect x="544.1" y="115.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="547.1" y="126.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.09%)</title><rect x="545.2" y="99.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="548.2" y="110.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.09%)</title><rect x="546.3" y="115.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="549.3" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.18%)</title><rect x="547.4" y="131.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="550.4" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.18%)</title><rect x="549.5" y="131.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="552.5" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.09%)</title><rect x="551.7" y="131.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="554.7" y="142.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 0.37%)</title><rect x="552.8" y="211.0" width="4.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="555.8" y="222.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.09%)</title><rect x="552.8" y="195.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="555.8" y="206.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.09%)</title><rect x="552.8" y="179.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="555.8" y="190.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (2 samples, 0.18%)</title><rect x="553.9" y="195.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="556.9" y="206.0"></text>
</g>
<g>
<title>nf_confirm?[nf_conntrack] (1 samples, 0.09%)</title><rect x="554.9" y="179.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="557.9" y="190.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat] (1 samples, 0.09%)</title><rect x="556.0" y="195.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="559.0" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (1 samples, 0.09%)</title><rect x="557.1" y="227.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="560.1" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (2 samples, 0.18%)</title><rect x="558.2" y="243.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="561.2" y="254.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack] (1 samples, 0.09%)</title><rect x="560.4" y="243.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="563.4" y="254.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.28%)</title><rect x="561.5" y="243.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="564.5" y="254.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.09%)</title><rect x="561.5" y="227.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="564.5" y="238.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in?[nf_nat] (2 samples, 0.18%)</title><rect x="562.5" y="227.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="565.5" y="238.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat] (2 samples, 0.18%)</title><rect x="562.5" y="211.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="565.5" y="222.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (2 samples, 0.18%)</title><rect x="562.5" y="195.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="565.5" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.18%)</title><rect x="564.7" y="259.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="567.7" y="270.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.09%)</title><rect x="566.9" y="323.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="569.9" y="334.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.09%)</title><rect x="568.0" y="339.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="571.0" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (14 samples, 1.29%)</title><rect x="569.1" y="387.0" width="15.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="572.1" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (14 samples, 1.29%)</title><rect x="569.1" y="371.0" width="15.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="572.1" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (8 samples, 0.74%)</title><rect x="572.3" y="355.0" width="8.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="575.3" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (5 samples, 0.46%)</title><rect x="575.6" y="339.0" width="5.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="578.6" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.18%)</title><rect x="575.6" y="323.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="578.6" y="334.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.18%)</title><rect x="577.7" y="323.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="580.7" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.09%)</title><rect x="577.7" y="307.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="580.7" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.09%)</title><rect x="578.8" y="307.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="581.8" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.09%)</title><rect x="578.8" y="291.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="581.8" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.09%)</title><rect x="579.9" y="323.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="582.9" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.09%)</title><rect x="581.0" y="355.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="584.0" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.09%)</title><rect x="582.1" y="355.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="585.1" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.09%)</title><rect x="582.1" y="339.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="585.1" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.09%)</title><rect x="583.2" y="355.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="586.2" y="366.0"></text>
</g>
<g>
<title>nf_hook_slow (5 samples, 0.46%)</title><rect x="584.3" y="435.0" width="5.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="587.3" y="446.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (4 samples, 0.37%)</title><rect x="584.3" y="419.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="587.3" y="430.0"></text>
</g>
<g>
<title>nf_confirm?[nf_conntrack] (2 samples, 0.18%)</title><rect x="584.3" y="403.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="587.3" y="414.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.18%)</title><rect x="584.3" y="387.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="587.3" y="398.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.18%)</title><rect x="586.4" y="403.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="589.4" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out?[nf_nat] (1 samples, 0.09%)</title><rect x="588.6" y="419.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="591.6" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat] (1 samples, 0.09%)</title><rect x="588.6" y="403.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="591.6" y="414.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (1 samples, 0.09%)</title><rect x="588.6" y="387.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="591.6" y="398.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out?[nf_nat] (1 samples, 0.09%)</title><rect x="589.7" y="435.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="592.7" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (1 samples, 0.09%)</title><rect x="590.8" y="451.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="593.8" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.09%)</title><rect x="591.9" y="467.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="594.9" y="478.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.09%)</title><rect x="592.9" y="483.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="595.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.28%)</title><rect x="594.0" y="499.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="597.0" y="510.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.28%)</title><rect x="594.0" y="483.0" width="3.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="597.0" y="494.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.09%)</title><rect x="597.3" y="499.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="600.3" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.09%)</title><rect x="598.4" y="499.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="601.4" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.09%)</title><rect x="599.5" y="515.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="602.5" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.18%)</title><rect x="600.5" y="515.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="603.5" y="526.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.18%)</title><rect x="602.7" y="515.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="605.7" y="526.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.09%)</title><rect x="603.8" y="499.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="606.8" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.46%)</title><rect x="604.9" y="515.0" width="5.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="607.9" y="526.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.09%)</title><rect x="604.9" y="499.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="607.9" y="510.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.18%)</title><rect x="606.0" y="499.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="609.0" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.18%)</title><rect x="608.1" y="499.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="611.1" y="510.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.09%)</title><rect x="608.1" y="483.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="611.1" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.09%)</title><rect x="609.2" y="483.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="612.2" y="494.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.09%)</title><rect x="609.2" y="467.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="612.2" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="609.2" y="451.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="612.2" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.09%)</title><rect x="610.3" y="515.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="613.3" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.09%)</title><rect x="611.4" y="515.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="614.4" y="526.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.09%)</title><rect x="612.5" y="515.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="615.5" y="526.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.33 (1 samples, 0.09%)</title><rect x="613.6" y="515.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="616.6" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.09%)</title><rect x="614.7" y="515.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="617.7" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.09%)</title><rect x="615.7" y="547.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="618.7" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.64%)</title><rect x="616.8" y="563.0" width="7.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="619.8" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.09%)</title><rect x="616.8" y="547.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="619.8" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.55%)</title><rect x="617.9" y="547.0" width="6.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="620.9" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.28%)</title><rect x="620.1" y="531.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="623.1" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.09%)</title><rect x="623.3" y="531.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="626.3" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.09%)</title><rect x="624.4" y="579.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="627.4" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.09%)</title><rect x="625.5" y="611.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="628.5" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.64%)</title><rect x="626.6" y="611.0" width="7.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="629.6" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.64%)</title><rect x="626.6" y="595.0" width="7.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="629.6" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (7 samples, 0.64%)</title><rect x="626.6" y="579.0" width="7.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="629.6" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.55%)</title><rect x="627.7" y="563.0" width="6.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="630.7" y="574.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (3 samples, 0.28%)</title><rect x="630.9" y="547.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="633.9" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (9 samples, 0.83%)</title><rect x="634.2" y="627.0" width="9.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="637.2" y="638.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.83%)</title><rect x="634.2" y="611.0" width="9.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="637.2" y="622.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.83%)</title><rect x="634.2" y="595.0" width="9.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="637.2" y="606.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.74%)</title><rect x="635.3" y="579.0" width="8.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="638.3" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.09%)</title><rect x="644.0" y="643.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="647.0" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.18%)</title><rect x="645.1" y="707.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="648.1" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.28%)</title><rect x="647.2" y="739.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.2" y="750.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.28%)</title><rect x="647.2" y="723.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="650.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="649.4" y="707.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="652.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.18%)</title><rect x="650.5" y="787.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (138 samples, 12.70%)</title><rect x="652.6" y="803.0" width="149.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.6" y="814.0">ru/mail/polis/dao/D..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (12 samples, 1.10%)</title><rect x="653.7" y="787.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.7" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (12 samples, 1.10%)</title><rect x="653.7" y="771.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.7" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (11 samples, 1.01%)</title><rect x="654.8" y="755.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.8" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (10 samples, 0.92%)</title><rect x="655.9" y="739.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (9 samples, 0.83%)</title><rect x="657.0" y="723.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (7 samples, 0.64%)</title><rect x="658.1" y="707.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="661.1" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (7 samples, 0.64%)</title><rect x="658.1" y="691.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.1" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (7 samples, 0.64%)</title><rect x="658.1" y="675.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (6 samples, 0.55%)</title><rect x="659.2" y="659.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (5 samples, 0.46%)</title><rect x="659.2" y="643.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (5 samples, 0.46%)</title><rect x="659.2" y="627.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$151/1956344708.getAsBoolean (5 samples, 0.46%)</title><rect x="659.2" y="611.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (5 samples, 0.46%)</title><rect x="659.2" y="595.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (5 samples, 0.46%)</title><rect x="659.2" y="579.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.18%)</title><rect x="659.2" y="563.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.18%)</title><rect x="659.2" y="547.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.18%)</title><rect x="659.2" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.09%)</title><rect x="660.2" y="515.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3 samples, 0.28%)</title><rect x="661.3" y="563.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$127/324348730.apply (3 samples, 0.28%)</title><rect x="661.3" y="547.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="664.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (3 samples, 0.28%)</title><rect x="661.3" y="531.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.28%)</title><rect x="661.3" y="515.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.3" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.28%)</title><rect x="661.3" y="499.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.28%)</title><rect x="661.3" y="483.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="664.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.28%)</title><rect x="661.3" y="467.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.09%)</title><rect x="663.5" y="451.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.09%)</title><rect x="664.6" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.09%)</title><rect x="665.7" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.7" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.09%)</title><rect x="665.7" y="691.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.37%)</title><rect x="666.8" y="787.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.8" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.09%)</title><rect x="666.8" y="771.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.8" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="666.8" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.8" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.09%)</title><rect x="666.8" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.8" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (3 samples, 0.28%)</title><rect x="667.8" y="771.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl$$Lambda$182/605401109.apply (3 samples, 0.28%)</title><rect x="667.8" y="755.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.lambda$iterator$2 (3 samples, 0.28%)</title><rect x="667.8" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (3 samples, 0.28%)</title><rect x="667.8" y="723.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.28%)</title><rect x="667.8" y="707.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="667.8" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="667.8" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="670.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="667.8" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="670.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="667.8" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="670.8" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="667.8" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="670.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="667.8" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="670.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="668.9" y="691.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="668.9" y="675.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.9" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="668.9" y="659.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="670.0" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="670.0" y="627.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="670.0" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.iterator (121 samples, 11.13%)</title><rect x="671.1" y="787.0" width="131.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.1" y="798.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (1 samples, 0.09%)</title><rect x="674.4" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.4" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (14 samples, 1.29%)</title><rect x="675.4" y="771.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="678.4" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (14 samples, 1.29%)</title><rect x="675.4" y="755.0" width="15.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="678.4" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.18%)</title><rect x="675.4" y="739.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.4" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="675.4" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="678.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="675.4" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.4" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="675.4" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.4" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="676.5" y="723.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="679.5" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (12 samples, 1.10%)</title><rect x="677.6" y="739.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (12 samples, 1.10%)</title><rect x="677.6" y="723.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (12 samples, 1.10%)</title><rect x="677.6" y="707.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractSpinedBuffer.count (1 samples, 0.09%)</title><rect x="677.6" y="691.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.09%)</title><rect x="677.6" y="675.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (5 samples, 0.46%)</title><rect x="678.7" y="691.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$151/1956344708.getAsBoolean (5 samples, 0.46%)</title><rect x="678.7" y="675.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (5 samples, 0.46%)</title><rect x="678.7" y="659.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (5 samples, 0.46%)</title><rect x="678.7" y="643.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="681.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.28%)</title><rect x="679.8" y="627.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.28%)</title><rect x="679.8" y="611.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.28%)</title><rect x="679.8" y="595.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="683.0" y="627.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$127/324348730.apply (1 samples, 0.09%)</title><rect x="683.0" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (1 samples, 0.09%)</title><rect x="683.0" y="595.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.09%)</title><rect x="683.0" y="579.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="683.0" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="683.0" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.0" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="683.0" y="531.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.init (4 samples, 0.37%)</title><rect x="684.1" y="691.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="687.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$132/1650848194.get (4 samples, 0.37%)</title><rect x="684.1" y="675.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.lambda$spliterator$0 (4 samples, 0.37%)</title><rect x="684.1" y="659.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (4 samples, 0.37%)</title><rect x="684.1" y="643.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="687.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2 samples, 0.18%)</title><rect x="688.5" y="691.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.09%)</title><rect x="688.5" y="675.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.09%)</title><rect x="688.5" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$146/1086827307.get$Lambda (1 samples, 0.09%)</title><rect x="688.5" y="643.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="689.6" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="689.6" y="659.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="689.6" y="643.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="689.6" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.size (8 samples, 0.74%)</title><rect x="690.6" y="771.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.6" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="696.1" y="755.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.1" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="697.2" y="755.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="700.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.28%)</title><rect x="699.3" y="771.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.28%)</title><rect x="699.3" y="755.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.28%)</title><rect x="699.3" y="739.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="702.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.28%)</title><rect x="699.3" y="723.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.28%)</title><rect x="699.3" y="707.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (4 samples, 0.37%)</title><rect x="702.6" y="771.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.28%)</title><rect x="703.7" y="755.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.28%)</title><rect x="703.7" y="739.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.getThreadId (1 samples, 0.09%)</title><rect x="705.8" y="723.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (10 samples, 0.92%)</title><rect x="706.9" y="771.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (8 samples, 0.74%)</title><rect x="709.1" y="755.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.1" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.09%)</title><rect x="710.2" y="739.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.2" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.09%)</title><rect x="710.2" y="723.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.46%)</title><rect x="711.3" y="739.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.3" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.28%)</title><rect x="711.3" y="723.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.3" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3 samples, 0.28%)</title><rect x="711.3" y="707.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3 samples, 0.28%)</title><rect x="711.3" y="691.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3 samples, 0.28%)</title><rect x="711.3" y="675.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.09%)</title><rect x="711.3" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="714.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 0.18%)</title><rect x="712.4" y="659.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="715.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$151/1956344708.getAsBoolean (2 samples, 0.18%)</title><rect x="712.4" y="643.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="715.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2 samples, 0.18%)</title><rect x="712.4" y="627.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.18%)</title><rect x="712.4" y="611.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.09%)</title><rect x="712.4" y="595.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.09%)</title><rect x="712.4" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="715.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.09%)</title><rect x="712.4" y="563.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="715.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="713.4" y="595.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="716.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$127/324348730.apply (1 samples, 0.09%)</title><rect x="713.4" y="579.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="716.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (1 samples, 0.09%)</title><rect x="713.4" y="563.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.09%)</title><rect x="713.4" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="713.4" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="716.4" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="713.4" y="515.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="716.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="713.4" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="716.4" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="713.4" y="483.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="716.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="713.4" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.4" y="478.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.09%)</title><rect x="713.4" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="716.4" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.18%)</title><rect x="714.5" y="723.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.5" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2 samples, 0.18%)</title><rect x="714.5" y="707.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.5" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="716.7" y="739.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="719.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (78 samples, 7.18%)</title><rect x="717.8" y="771.0" width="84.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.8" y="782.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/Collection.stream (72 samples, 6.62%)</title><rect x="717.8" y="755.0" width="78.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="720.8" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (69 samples, 6.35%)</title><rect x="717.8" y="739.0" width="74.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.8" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (64 samples, 5.89%)</title><rect x="723.2" y="723.0" width="69.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="726.2" y="734.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (64 samples, 5.89%)</title><rect x="723.2" y="707.0" width="69.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.2" y="718.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (61 samples, 5.61%)</title><rect x="726.5" y="691.0" width="66.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="729.5" y="702.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (60 samples, 5.52%)</title><rect x="727.6" y="675.0" width="65.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.6" y="686.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.09%)</title><rect x="728.6" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="728.6" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="728.6" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="728.6" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (58 samples, 5.34%)</title><rect x="729.7" y="659.0" width="63.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.7" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (27 samples, 2.48%)</title><rect x="763.4" y="643.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.4" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 2.21%)</title><rect x="766.6" y="627.0" width="26.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.6" y="638.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 2.21%)</title><rect x="766.6" y="611.0" width="26.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.6" y="622.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.55%)</title><rect x="766.6" y="595.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.6" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (18 samples, 1.66%)</title><rect x="773.1" y="595.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.1" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 0.46%)</title><rect x="787.3" y="579.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="790.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.28%)</title><rect x="792.7" y="739.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (3 samples, 0.28%)</title><rect x="792.7" y="723.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3 samples, 0.28%)</title><rect x="792.7" y="707.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3 samples, 0.28%)</title><rect x="792.7" y="691.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/PipelineHelper.&lt;init&gt; (1 samples, 0.09%)</title><rect x="794.9" y="675.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="794.9" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.18%)</title><rect x="795.9" y="755.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.18%)</title><rect x="795.9" y="739.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.18%)</title><rect x="795.9" y="723.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="797.0" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="800.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="797.0" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="797.0" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="800.0" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="797.0" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="797.0" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="797.0" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="800.0" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.09%)</title><rect x="797.0" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="800.0" y="622.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="797.0" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="797.0" y="579.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.0" y="590.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="797.0" y="563.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="800.0" y="574.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.09%)</title><rect x="797.0" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="800.0" y="558.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="797.0" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="800.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (2 samples, 0.18%)</title><rect x="798.1" y="755.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.1" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (1 samples, 0.09%)</title><rect x="798.1" y="739.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="801.1" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.&lt;init&gt; (1 samples, 0.09%)</title><rect x="798.1" y="723.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.09%)</title><rect x="799.2" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.isParallel (1 samples, 0.09%)</title><rect x="799.2" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="802.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2 samples, 0.18%)</title><rect x="800.3" y="755.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (2 samples, 0.18%)</title><rect x="800.3" y="739.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (2 samples, 0.18%)</title><rect x="800.3" y="723.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.18%)</title><rect x="800.3" y="707.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.18%)</title><rect x="800.3" y="691.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (5 samples, 0.46%)</title><rect x="802.5" y="835.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.5" y="846.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.46%)</title><rect x="802.5" y="819.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.5" y="830.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$99/1382637989.run (5 samples, 0.46%)</title><rect x="802.5" y="803.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.5" y="814.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (5 samples, 0.46%)</title><rect x="802.5" y="787.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.5" y="798.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (5 samples, 0.46%)</title><rect x="802.5" y="771.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="805.5" y="782.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (5 samples, 0.46%)</title><rect x="802.5" y="755.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.5" y="766.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.37%)</title><rect x="802.5" y="739.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.5" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.28%)</title><rect x="802.5" y="723.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.5" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3 samples, 0.28%)</title><rect x="802.5" y="707.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.5" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3 samples, 0.28%)</title><rect x="802.5" y="691.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.5" y="702.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (3 samples, 0.28%)</title><rect x="802.5" y="675.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.5" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.09%)</title><rect x="802.5" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.09%)</title><rect x="802.5" y="643.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="805.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1 samples, 0.09%)</title><rect x="802.5" y="627.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.5" y="638.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1 samples, 0.09%)</title><rect x="802.5" y="611.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.5" y="622.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (1 samples, 0.09%)</title><rect x="802.5" y="595.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.5" y="606.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.&lt;init&gt; (1 samples, 0.09%)</title><rect x="802.5" y="579.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.5" y="590.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.parseActions (1 samples, 0.09%)</title><rect x="802.5" y="563.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.5" y="574.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.getMask (1 samples, 0.09%)</title><rect x="802.5" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.5" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2 samples, 0.18%)</title><rect x="803.5" y="659.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.5" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.18%)</title><rect x="803.5" y="643.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.5" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.18%)</title><rect x="803.5" y="627.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.5" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.18%)</title><rect x="803.5" y="611.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.5" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.18%)</title><rect x="803.5" y="595.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.5" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.18%)</title><rect x="803.5" y="579.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.5" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.18%)</title><rect x="803.5" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.18%)</title><rect x="803.5" y="547.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="806.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.18%)</title><rect x="803.5" y="531.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.18%)</title><rect x="803.5" y="515.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.18%)</title><rect x="803.5" y="499.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.18%)</title><rect x="803.5" y="483.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.5" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.18%)</title><rect x="803.5" y="467.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.18%)</title><rect x="803.5" y="451.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (2 samples, 0.18%)</title><rect x="803.5" y="435.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.5" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (2 samples, 0.18%)</title><rect x="803.5" y="419.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.09%)</title><rect x="803.5" y="403.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.5" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.09%)</title><rect x="803.5" y="387.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.5" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.09%)</title><rect x="803.5" y="371.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.09%)</title><rect x="803.5" y="355.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.5" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.09%)</title><rect x="804.6" y="403.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.6" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.09%)</title><rect x="804.6" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.09%)</title><rect x="804.6" y="371.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.6" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.09%)</title><rect x="804.6" y="355.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.6" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.09%)</title><rect x="804.6" y="339.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.6" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.setContextClassLoader (1 samples, 0.09%)</title><rect x="805.7" y="723.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.7" y="734.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.09%)</title><rect x="805.7" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.7" y="718.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.09%)</title><rect x="805.7" y="691.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="808.7" y="702.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="805.7" y="675.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.7" y="686.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.09%)</title><rect x="805.7" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="808.7" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="805.7" y="643.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.7" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPConnection.releaseOutputStream (1 samples, 0.09%)</title><rect x="806.8" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.8" y="750.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.09%)</title><rect x="806.8" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.8" y="734.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.09%)</title><rect x="806.8" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.8" y="718.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.09%)</title><rect x="806.8" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.8" y="702.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.09%)</title><rect x="806.8" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.8" y="686.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.09%)</title><rect x="806.8" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.8" y="670.0"></text>
</g>
<g>
<title>__libc_send (1 samples, 0.09%)</title><rect x="806.8" y="643.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="809.8" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="806.8" y="627.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="809.8" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="806.8" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="809.8" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sendto (1 samples, 0.09%)</title><rect x="806.8" y="595.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="809.8" y="606.0"></text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.09%)</title><rect x="806.8" y="579.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="809.8" y="590.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.09%)</title><rect x="806.8" y="563.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="809.8" y="574.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.09%)</title><rect x="806.8" y="547.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="809.8" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.09%)</title><rect x="806.8" y="531.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="809.8" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.09%)</title><rect x="806.8" y="515.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="809.8" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.09%)</title><rect x="806.8" y="499.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="809.8" y="510.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.09%)</title><rect x="806.8" y="483.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="809.8" y="494.0"></text>
</g>
<g>
<title>memset (1 samples, 0.09%)</title><rect x="806.8" y="467.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="809.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.28%)</title><rect x="807.9" y="883.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="810.9" y="894.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.09%)</title><rect x="807.9" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="809.0" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.0" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="809.0" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="812.0" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="809.0" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.09%)</title><rect x="810.1" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="813.1" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (329 samples, 30.27%)</title><rect x="811.1" y="883.0" width="357.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.1" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="813.3" y="867.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="816.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.55%)</title><rect x="814.4" y="867.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (6 samples, 0.55%)</title><rect x="814.4" y="851.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.46%)</title><rect x="815.5" y="835.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (60 samples, 5.52%)</title><rect x="820.9" y="867.0" width="65.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.9" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (8 samples, 0.74%)</title><rect x="820.9" y="851.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.37%)</title><rect x="823.1" y="835.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (2 samples, 0.18%)</title><rect x="827.4" y="835.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.4" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (52 samples, 4.78%)</title><rect x="829.6" y="851.0" width="56.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.6" y="862.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.28%)</title><rect x="842.6" y="835.0" width="3.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="845.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (30 samples, 2.76%)</title><rect x="845.9" y="835.0" width="32.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="848.9" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (5 samples, 0.46%)</title><rect x="845.9" y="819.0" width="5.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="848.9" y="830.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.46%)</title><rect x="845.9" y="803.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="848.9" y="814.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.28%)</title><rect x="848.0" y="787.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="851.0" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="848.0" y="771.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="851.0" y="782.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.09%)</title><rect x="851.3" y="819.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="854.3" y="830.0"></text>
</g>
<g>
<title>epoll_wait (24 samples, 2.21%)</title><rect x="852.4" y="819.0" width="26.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="855.4" y="830.0">e..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 1.75%)</title><rect x="857.8" y="803.0" width="20.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="860.8" y="814.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.18%)</title><rect x="857.8" y="787.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="860.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (17 samples, 1.56%)</title><rect x="860.0" y="787.0" width="18.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="863.0" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (16 samples, 1.47%)</title><rect x="861.1" y="771.0" width="17.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="864.1" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (16 samples, 1.47%)</title><rect x="861.1" y="755.0" width="17.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="864.1" y="766.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.09%)</title><rect x="862.2" y="739.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="865.2" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.09%)</title><rect x="862.2" y="723.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="865.2" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.09%)</title><rect x="862.2" y="707.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="865.2" y="718.0"></text>
</g>
<g>
<title>ep_poll (14 samples, 1.29%)</title><rect x="863.2" y="739.0" width="15.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="866.2" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (8 samples, 0.74%)</title><rect x="867.6" y="723.0" width="8.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="870.6" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (6 samples, 0.55%)</title><rect x="867.6" y="707.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="870.6" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (5 samples, 0.46%)</title><rect x="868.7" y="691.0" width="5.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="871.7" y="702.0"></text>
</g>
<g>
<title>sock_poll (4 samples, 0.37%)</title><rect x="869.8" y="675.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="872.8" y="686.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.18%)</title><rect x="870.8" y="659.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="873.8" y="670.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.09%)</title><rect x="873.0" y="659.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="876.0" y="670.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.18%)</title><rect x="874.1" y="707.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="877.1" y="718.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.09%)</title><rect x="876.3" y="723.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="879.3" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.09%)</title><rect x="877.4" y="723.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="880.4" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.09%)</title><rect x="877.4" y="707.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="880.4" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.09%)</title><rect x="877.4" y="691.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="880.4" y="702.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.55%)</title><rect x="878.4" y="835.0" width="6.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="881.4" y="846.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.09%)</title><rect x="885.0" y="835.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="888.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (260 samples, 23.92%)</title><rect x="886.0" y="867.0" width="282.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.0" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (255 samples, 23.46%)</title><rect x="890.4" y="851.0" width="276.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="893.4" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (123 samples, 11.32%)</title><rect x="893.6" y="835.0" width="133.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.6" y="846.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (102 samples, 9.38%)</title><rect x="893.6" y="819.0" width="110.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="896.6" y="830.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (102 samples, 9.38%)</title><rect x="893.6" y="803.0" width="110.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.6" y="814.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (99 samples, 9.11%)</title><rect x="893.6" y="787.0" width="107.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.6" y="798.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.55%)</title><rect x="894.7" y="771.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.55%)</title><rect x="894.7" y="755.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="897.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.18%)</title><rect x="895.8" y="739.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="898.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.18%)</title><rect x="895.8" y="723.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.09%)</title><rect x="896.9" y="707.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="899.9" y="718.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="898.0" y="739.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="901.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="899.1" y="739.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="902.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.09%)</title><rect x="900.2" y="739.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="900.2" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="900.2" y="707.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="900.2" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="903.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (92 samples, 8.46%)</title><rect x="901.2" y="771.0" width="99.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.2" y="782.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.executeOrSendError (92 samples, 8.46%)</title><rect x="901.2" y="755.0" width="99.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="904.2" y="766.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (92 samples, 8.46%)</title><rect x="901.2" y="739.0" width="99.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.2" y="750.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (88 samples, 8.10%)</title><rect x="904.5" y="723.0" width="95.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="907.5" y="734.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (10 samples, 0.92%)</title><rect x="904.5" y="707.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.18%)</title><rect x="913.2" y="691.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.18%)</title><rect x="913.2" y="675.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.18%)</title><rect x="913.2" y="659.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.18%)</title><rect x="913.2" y="643.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.18%)</title><rect x="913.2" y="627.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.18%)</title><rect x="913.2" y="611.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="916.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.18%)</title><rect x="915.4" y="707.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="918.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.18%)</title><rect x="915.4" y="691.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="918.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.18%)</title><rect x="915.4" y="675.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.18%)</title><rect x="915.4" y="659.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="918.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.18%)</title><rect x="915.4" y="643.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="918.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 6.99%)</title><rect x="917.5" y="707.0" width="82.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.5" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 6.99%)</title><rect x="917.5" y="691.0" width="82.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.5" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 6.99%)</title><rect x="917.5" y="675.0" width="82.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.5" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 6.99%)</title><rect x="917.5" y="659.0" width="82.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="670.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (76 samples, 6.99%)</title><rect x="917.5" y="643.0" width="82.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.5" y="654.0">jdk/inter..</text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.28%)</title><rect x="919.7" y="627.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.7" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="923.0" y="627.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.0" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 1.01%)</title><rect x="924.0" y="627.0" width="12.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="927.0" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="927.3" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.3" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.09%)</title><rect x="928.4" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="931.4" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.18%)</title><rect x="929.5" y="611.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="932.5" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="931.6" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="934.6" y="622.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.18%)</title><rect x="932.7" y="611.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.7" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="934.9" y="611.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="937.9" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (59 samples, 5.43%)</title><rect x="936.0" y="627.0" width="64.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="939.0" y="638.0">__pthre..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (56 samples, 5.15%)</title><rect x="939.2" y="611.0" width="60.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="942.2" y="622.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (56 samples, 5.15%)</title><rect x="939.2" y="595.0" width="60.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="942.2" y="606.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_futex (54 samples, 4.97%)</title><rect x="941.4" y="579.0" width="58.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="944.4" y="590.0">__x64_..</text>
</g>
<g>
<title>do_futex (53 samples, 4.88%)</title><rect x="941.4" y="563.0" width="57.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="944.4" y="574.0">do_futex</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.09%)</title><rect x="941.4" y="547.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="944.4" y="558.0"></text>
</g>
<g>
<title>futex_wake (52 samples, 4.78%)</title><rect x="942.5" y="547.0" width="56.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="945.5" y="558.0">futex_..</text>
</g>
<g>
<title>get_futex_key (1 samples, 0.09%)</title><rect x="949.0" y="531.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="952.0" y="542.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.8 (1 samples, 0.09%)</title><rect x="949.0" y="515.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="952.0" y="526.0"></text>
</g>
<g>
<title>wake_up_q (45 samples, 4.14%)</title><rect x="950.1" y="531.0" width="48.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="953.1" y="542.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (44 samples, 4.05%)</title><rect x="951.2" y="515.0" width="47.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="954.2" y="526.0">try_..</text>
</g>
<g>
<title>__lock_text_start (44 samples, 4.05%)</title><rect x="951.2" y="499.0" width="47.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="954.2" y="510.0">__lo..</text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="998.9" y="563.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1001.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.09%)</title><rect x="1000.0" y="723.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1003.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.09%)</title><rect x="1001.1" y="787.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1004.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="1001.1" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="1001.1" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1004.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.18%)</title><rect x="1002.2" y="787.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1005.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.18%)</title><rect x="1002.2" y="771.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="1003.3" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1006.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1003.3" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 1.10%)</title><rect x="1004.4" y="819.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1007.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.55%)</title><rect x="1004.4" y="803.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1007.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.46%)</title><rect x="1004.4" y="787.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1007.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.46%)</title><rect x="1004.4" y="771.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.37%)</title><rect x="1005.5" y="755.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1008.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="1009.8" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1012.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.37%)</title><rect x="1010.9" y="803.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.37%)</title><rect x="1010.9" y="787.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1013.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.18%)</title><rect x="1015.2" y="803.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.28%)</title><rect x="1017.4" y="819.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.28%)</title><rect x="1017.4" y="803.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1020.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.28%)</title><rect x="1017.4" y="787.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.09%)</title><rect x="1019.6" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1022.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.09%)</title><rect x="1020.7" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.28%)</title><rect x="1021.7" y="819.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1024.7" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.18%)</title><rect x="1025.0" y="819.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.18%)</title><rect x="1025.0" y="803.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.0" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (129 samples, 11.87%)</title><rect x="1027.2" y="835.0" width="140.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.2" y="846.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (128 samples, 11.78%)</title><rect x="1028.3" y="819.0" width="138.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1031.3" y="830.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 1.47%)</title><rect x="1029.3" y="803.0" width="17.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1032.3" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="1032.6" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.6" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.18%)</title><rect x="1033.7" y="787.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.7" y="798.0"></text>
</g>
<g>
<title>__memmove_ssse3 (1 samples, 0.09%)</title><rect x="1035.9" y="787.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1038.9" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.83%)</title><rect x="1036.9" y="787.0" width="9.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1039.9" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.18%)</title><rect x="1038.0" y="771.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.18%)</title><rect x="1040.2" y="771.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.2" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.37%)</title><rect x="1042.4" y="771.0" width="4.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1045.4" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.18%)</title><rect x="1044.5" y="755.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.5" y="766.0"></text>
</g>
<g>
<title>__GI___recv (106 samples, 9.75%)</title><rect x="1046.7" y="803.0" width="115.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1049.7" y="814.0">__GI___recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (97 samples, 8.92%)</title><rect x="1056.5" y="787.0" width="105.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1059.5" y="798.0">entry_SYSCALL..</text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.18%)</title><rect x="1056.5" y="771.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1059.5" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (95 samples, 8.74%)</title><rect x="1058.6" y="771.0" width="103.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1061.6" y="782.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_recvfrom (91 samples, 8.37%)</title><rect x="1063.0" y="755.0" width="98.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1066.0" y="766.0">__x64_sys_re..</text>
</g>
<g>
<title>__sys_recvfrom (85 samples, 7.82%)</title><rect x="1064.1" y="739.0" width="92.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1067.1" y="750.0">__sys_recvf..</text>
</g>
<g>
<title>fput (1 samples, 0.09%)</title><rect x="1064.1" y="723.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1067.1" y="734.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.09%)</title><rect x="1064.1" y="707.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1067.1" y="718.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.09%)</title><rect x="1065.2" y="723.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1068.2" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (73 samples, 6.72%)</title><rect x="1066.2" y="723.0" width="79.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1069.2" y="734.0">sock_recv..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.18%)</title><rect x="1067.3" y="707.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1070.3" y="718.0"></text>
</g>
<g>
<title>inet6_recvmsg (56 samples, 5.15%)</title><rect x="1069.5" y="707.0" width="60.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1072.5" y="718.0">inet6_..</text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.09%)</title><rect x="1071.7" y="691.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1074.7" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (53 samples, 4.88%)</title><rect x="1072.8" y="691.0" width="57.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1075.8" y="702.0">tcp_re..</text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.46%)</title><rect x="1093.4" y="675.0" width="5.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1096.4" y="686.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.46%)</title><rect x="1093.4" y="659.0" width="5.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1096.4" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.37%)</title><rect x="1093.4" y="643.0" width="4.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1096.4" y="654.0"></text>
</g>
<g>
<title>dst_release (4 samples, 0.37%)</title><rect x="1093.4" y="627.0" width="4.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1096.4" y="638.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.09%)</title><rect x="1097.7" y="643.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1100.7" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.18%)</title><rect x="1098.8" y="675.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1101.8" y="686.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.09%)</title><rect x="1101.0" y="675.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1104.0" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.09%)</title><rect x="1101.0" y="659.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1104.0" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="1101.0" y="643.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1104.0" y="654.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (17 samples, 1.56%)</title><rect x="1102.1" y="675.0" width="18.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1105.1" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (17 samples, 1.56%)</title><rect x="1102.1" y="659.0" width="18.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1105.1" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (10 samples, 0.92%)</title><rect x="1109.7" y="643.0" width="10.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1112.7" y="654.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.18%)</title><rect x="1109.7" y="627.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1112.7" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.28%)</title><rect x="1111.8" y="627.0" width="3.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1114.8" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.46%)</title><rect x="1115.1" y="627.0" width="5.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1118.1" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (5 samples, 0.46%)</title><rect x="1115.1" y="611.0" width="5.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1118.1" y="622.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.37%)</title><rect x="1120.5" y="675.0" width="4.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1123.5" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.09%)</title><rect x="1124.9" y="675.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1127.9" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (4 samples, 0.37%)</title><rect x="1126.0" y="675.0" width="4.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1129.0" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.37%)</title><rect x="1126.0" y="659.0" width="4.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1129.0" y="670.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.28%)</title><rect x="1126.0" y="643.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1129.0" y="654.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.09%)</title><rect x="1128.1" y="627.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1131.1" y="638.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.09%)</title><rect x="1129.2" y="643.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1132.2" y="654.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 1.29%)</title><rect x="1130.3" y="707.0" width="15.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1133.3" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (13 samples, 1.20%)</title><rect x="1131.4" y="691.0" width="14.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1134.4" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (13 samples, 1.20%)</title><rect x="1131.4" y="675.0" width="14.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1134.4" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (13 samples, 1.20%)</title><rect x="1131.4" y="659.0" width="14.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1134.4" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (8 samples, 0.74%)</title><rect x="1136.8" y="643.0" width="8.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1139.8" y="654.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (1 samples, 0.09%)</title><rect x="1137.9" y="627.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1140.9" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (6 samples, 0.55%)</title><rect x="1139.0" y="627.0" width="6.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1142.0" y="638.0"></text>
</g>
<g>
<title>aa_check_perms (1 samples, 0.09%)</title><rect x="1144.4" y="611.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.92%)</title><rect x="1145.5" y="723.0" width="10.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1148.5" y="734.0"></text>
</g>
<g>
<title>__fdget (8 samples, 0.74%)</title><rect x="1145.5" y="707.0" width="8.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1148.5" y="718.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.09%)</title><rect x="1145.5" y="691.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1148.5" y="702.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.64%)</title><rect x="1146.6" y="691.0" width="7.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1149.6" y="702.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.37%)</title><rect x="1149.8" y="675.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1152.8" y="686.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.18%)</title><rect x="1154.2" y="707.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1157.2" y="718.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.28%)</title><rect x="1156.3" y="739.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1159.3" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.18%)</title><rect x="1159.6" y="739.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1162.6" y="750.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.28%)</title><rect x="1161.8" y="803.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1164.8" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.18%)</title><rect x="1165.0" y="803.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1168.0" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="1167.2" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="1167.2" y="835.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1170.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1167.2" y="819.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.2" y="830.0"></text>
</g>
<g>
<title>start_thread (20 samples, 1.84%)</title><rect x="1168.3" y="883.0" width="21.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1171.3" y="894.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (20 samples, 1.84%)</title><rect x="1168.3" y="867.0" width="21.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1171.3" y="878.0">t..</text>
</g>
<g>
<title>Thread::call_run() (20 samples, 1.84%)</title><rect x="1168.3" y="851.0" width="21.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="862.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.74%)</title><rect x="1168.3" y="835.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 0.55%)</title><rect x="1168.3" y="819.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="1168.3" y="803.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="1168.3" y="787.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.37%)</title><rect x="1170.5" y="803.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.37%)</title><rect x="1170.5" y="787.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.37%)</title><rect x="1170.5" y="771.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.37%)</title><rect x="1170.5" y="755.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.37%)</title><rect x="1170.5" y="739.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.5" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1170.5" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.28%)</title><rect x="1171.5" y="723.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.5" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1173.7" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.09%)</title><rect x="1173.7" y="691.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1174.8" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.09%)</title><rect x="1174.8" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.68] (1 samples, 0.09%)</title><rect x="1174.8" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1174.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1174.8" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="1174.8" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.09%)</title><rect x="1174.8" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>__new_sem_post (1 samples, 0.09%)</title><rect x="1175.9" y="819.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1178.9" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="1175.9" y="803.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1178.9" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="1175.9" y="787.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1178.9" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.09%)</title><rect x="1175.9" y="771.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="1175.9" y="755.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1178.9" y="766.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="1175.9" y="739.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.9" y="750.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.09%)</title><rect x="1175.9" y="723.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1178.9" y="734.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.09%)</title><rect x="1175.9" y="707.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.9" y="718.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="1175.9" y="691.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1178.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (12 samples, 1.10%)</title><rect x="1177.0" y="835.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (12 samples, 1.10%)</title><rect x="1177.0" y="819.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (12 samples, 1.10%)</title><rect x="1177.0" y="803.0" width="13.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="814.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11 samples, 1.01%)</title><rect x="1177.0" y="787.0" width="11.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (11 samples, 1.01%)</title><rect x="1177.0" y="771.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (6 samples, 0.55%)</title><rect x="1177.0" y="755.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1177.0" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>CallLeafDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1177.0" y="723.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>Assembler::call(RegisterImpl*) (1 samples, 0.09%)</title><rect x="1177.0" y="707.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.09%)</title><rect x="1178.1" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.09%)</title><rect x="1178.1" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="734.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.09%)</title><rect x="1178.1" y="707.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1181.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (4 samples, 0.37%)</title><rect x="1179.1" y="739.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.09%)</title><rect x="1179.1" y="723.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="1179.1" y="707.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.09%)</title><rect x="1180.2" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1180.2" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1181.3" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1182.4" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1182.4" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1182.4" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.28%)</title><rect x="1183.5" y="755.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (2 samples, 0.18%)</title><rect x="1183.5" y="739.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.18%)</title><rect x="1183.5" y="723.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1183.5" y="707.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.09%)</title><rect x="1183.5" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.5" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="686.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1183.5" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1184.6" y="707.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1184.6" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.09%)</title><rect x="1185.7" y="739.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1185.7" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1185.7" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1185.7" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1186.7" y="755.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1186.7" y="739.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1186.7" y="723.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1186.7" y="707.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1186.7" y="691.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1186.7" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1186.7" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1186.7" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1186.7" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1186.7" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1186.7" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1186.7" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) [clone .constprop.194] (1 samples, 0.09%)</title><rect x="1186.7" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1187.8" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1187.8" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1187.8" y="643.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1187.8" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="638.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1187.8" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="622.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.09%)</title><rect x="1187.8" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="606.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.09%)</title><rect x="1187.8" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.09%)</title><rect x="1187.8" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.8" y="574.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1187.8" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="558.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.09%)</title><rect x="1187.8" y="531.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="542.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.09%)</title><rect x="1188.9" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.09%)</title><rect x="1188.9" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1188.9" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1188.9" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.09%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.09%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.09%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.09%)</title><rect x="1188.9" y="643.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.09%)</title><rect x="1188.9" y="627.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1191.9" y="638.0"></text>
</g>
<g>
<title>up_read (1 samples, 0.09%)</title><rect x="1188.9" y="611.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1191.9" y="622.0"></text>
</g>
</g>
</svg>
