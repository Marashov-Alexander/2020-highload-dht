<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (66,564 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (47,537 samples, 71.42%)</title><rect x="10.0" y="787.0" width="842.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (47,523 samples, 71.39%)</title><rect x="10.2" y="771.0" width="842.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (47,523 samples, 71.39%)</title><rect x="10.2" y="755.0" width="842.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.2" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (995 samples, 1.49%)</title><rect x="10.3" y="739.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (995 samples, 1.49%)</title><rect x="10.3" y="723.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (987 samples, 1.48%)</title><rect x="10.3" y="707.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (987 samples, 1.48%)</title><rect x="10.3" y="691.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.3" y="702.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (987 samples, 1.48%)</title><rect x="10.3" y="675.0" width="17.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$123/775845450.run (140 samples, 0.21%)</title><rect x="27.9" y="739.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$2 (140 samples, 0.21%)</title><rect x="27.9" y="723.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (133 samples, 0.20%)</title><rect x="27.9" y="707.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (32 samples, 0.05%)</title><rect x="27.9" y="691.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (99 samples, 0.15%)</title><rect x="28.5" y="691.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (72 samples, 0.11%)</title><rect x="28.5" y="675.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.5" y="686.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (72 samples, 0.11%)</title><rect x="28.5" y="659.0" width="1.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="31.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$130/77195045.run (20,107 samples, 30.21%)</title><rect x="30.4" y="739.0" width="356.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.4" y="750.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (20,107 samples, 30.21%)</title><rect x="30.4" y="723.0" width="356.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.4" y="734.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$128/860152352.accept (20,107 samples, 30.21%)</title><rect x="30.4" y="707.0" width="356.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.4" y="718.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$3 (20,107 samples, 30.21%)</title><rect x="30.4" y="691.0" width="356.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.4" y="702.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (20,107 samples, 30.21%)</title><rect x="30.4" y="675.0" width="356.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.4" y="686.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (20,107 samples, 30.21%)</title><rect x="30.4" y="659.0" width="356.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.4" y="670.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (32 samples, 0.05%)</title><rect x="30.4" y="643.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="33.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (19,158 samples, 28.78%)</title><rect x="31.0" y="643.0" width="339.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.0" y="654.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (6,448 samples, 9.69%)</title><rect x="31.0" y="627.0" width="114.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="34.0" y="638.0">byte[]</text>
</g>
<g>
<title>byte[] (12,710 samples, 19.09%)</title><rect x="145.3" y="627.0" width="225.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="148.3" y="638.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (649 samples, 0.98%)</title><rect x="370.6" y="643.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.05%)</title><rect x="370.8" y="627.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.05%)</title><rect x="370.8" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.8" y="622.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.03%)</title><rect x="370.8" y="595.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="373.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.02%)</title><rect x="371.1" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.1" y="606.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.02%)</title><rect x="371.1" y="579.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="374.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (533 samples, 0.80%)</title><rect x="371.6" y="627.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.6" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (533 samples, 0.80%)</title><rect x="371.6" y="611.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (533 samples, 0.80%)</title><rect x="371.6" y="595.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="374.6" y="606.0"></text>
</g>
<g>
<title>char[] (386 samples, 0.58%)</title><rect x="371.6" y="579.0" width="6.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="374.6" y="590.0"></text>
</g>
<g>
<title>java.lang.String (63 samples, 0.09%)</title><rect x="378.4" y="579.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="381.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (84 samples, 0.13%)</title><rect x="379.5" y="579.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (84 samples, 0.13%)</title><rect x="379.5" y="563.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.5" y="574.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (84 samples, 0.13%)</title><rect x="379.5" y="547.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.5" y="558.0"></text>
</g>
<g>
<title>byte[] (84 samples, 0.13%)</title><rect x="379.5" y="531.0" width="1.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="382.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (20 samples, 0.03%)</title><rect x="381.0" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.0" y="638.0"></text>
</g>
<g>
<title>java.lang.String[] (20 samples, 0.03%)</title><rect x="381.0" y="611.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="384.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (40 samples, 0.06%)</title><rect x="381.4" y="627.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (40 samples, 0.06%)</title><rect x="381.4" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.4" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (40 samples, 0.06%)</title><rect x="381.4" y="595.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.4" y="606.0"></text>
</g>
<g>
<title>java.lang.String (18 samples, 0.03%)</title><rect x="381.4" y="579.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="384.4" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.03%)</title><rect x="381.7" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.7" y="590.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.03%)</title><rect x="381.7" y="563.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="384.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (195 samples, 0.29%)</title><rect x="382.1" y="643.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.1" y="654.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (195 samples, 0.29%)</title><rect x="382.1" y="627.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.1" y="638.0"></text>
</g>
<g>
<title>byte[] (189 samples, 0.28%)</title><rect x="382.1" y="611.0" width="3.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="385.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (62 samples, 0.09%)</title><rect x="385.5" y="643.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="388.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (62 samples, 0.09%)</title><rect x="385.5" y="627.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="388.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (62 samples, 0.09%)</title><rect x="385.5" y="611.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.5" y="622.0"></text>
</g>
<g>
<title>java.lang.String (24 samples, 0.04%)</title><rect x="385.5" y="595.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="388.5" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (38 samples, 0.06%)</title><rect x="386.0" y="595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.0" y="606.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.06%)</title><rect x="386.0" y="579.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="389.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$121/2005965375.run (25,727 samples, 38.65%)</title><rect x="386.8" y="739.0" width="456.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.8" y="750.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$12..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityPut$3 (25,727 samples, 38.65%)</title><rect x="386.8" y="723.0" width="456.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.8" y="734.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$han..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,209 samples, 1.82%)</title><rect x="386.8" y="707.0" width="21.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.8" y="718.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,209 samples, 1.82%)</title><rect x="386.8" y="691.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.8" y="702.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,209 samples, 1.82%)</title><rect x="386.8" y="675.0" width="21.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="389.8" y="686.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.put (10,090 samples, 15.16%)</title><rect x="408.3" y="707.0" width="178.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.3" y="718.0">ru/mail/polis/service/a..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (437 samples, 0.66%)</title><rect x="408.3" y="691.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.3" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (437 samples, 0.66%)</title><rect x="408.3" y="675.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$123/775845450.get$Lambda (248 samples, 0.37%)</title><rect x="408.3" y="659.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.3" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$123 (248 samples, 0.37%)</title><rect x="408.3" y="643.0" width="4.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="411.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$128/860152352.get$Lambda (189 samples, 0.28%)</title><rect x="412.7" y="659.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.7" y="670.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$128 (189 samples, 0.28%)</title><rect x="412.7" y="643.0" width="3.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="415.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (842 samples, 1.26%)</title><rect x="416.0" y="691.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (842 samples, 1.26%)</title><rect x="416.0" y="675.0" width="14.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (842 samples, 1.26%)</title><rect x="416.0" y="659.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.0" y="670.0"></text>
</g>
<g>
<title>java.lang.String (439 samples, 0.66%)</title><rect x="416.0" y="643.0" width="7.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="419.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (403 samples, 0.61%)</title><rect x="423.8" y="643.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.8" y="654.0"></text>
</g>
<g>
<title>byte[] (403 samples, 0.61%)</title><rect x="423.8" y="627.0" width="7.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="426.8" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.SimpleResponseAnalyzer (326 samples, 0.49%)</title><rect x="430.9" y="691.0" width="5.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="433.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (5,264 samples, 7.91%)</title><rect x="436.7" y="691.0" width="93.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.7" y="702.0">ru/mail/pol..</text>
</g>
<g>
<title>one.nio.http.Response (423 samples, 0.64%)</title><rect x="436.7" y="675.0" width="7.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="439.7" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,840 samples, 2.76%)</title><rect x="444.2" y="675.0" width="32.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="447.2" y="686.0">on..</text>
</g>
<g>
<title>byte[] (749 samples, 1.13%)</title><rect x="444.2" y="659.0" width="13.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="447.2" y="670.0"></text>
</g>
<g>
<title>java.lang.String[] (622 samples, 0.93%)</title><rect x="457.5" y="659.0" width="11.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="460.5" y="670.0"></text>
</g>
<g>
<title>java.lang.String (469 samples, 0.70%)</title><rect x="468.5" y="659.0" width="8.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="471.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (3,001 samples, 4.51%)</title><rect x="476.8" y="675.0" width="53.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.8" y="686.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,822 samples, 2.74%)</title><rect x="476.8" y="659.0" width="32.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.8" y="670.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,822 samples, 2.74%)</title><rect x="476.8" y="643.0" width="32.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="479.8" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (33 samples, 0.05%)</title><rect x="509.1" y="659.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (33 samples, 0.05%)</title><rect x="509.1" y="643.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (33 samples, 0.05%)</title><rect x="509.1" y="627.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="512.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (33 samples, 0.05%)</title><rect x="509.1" y="611.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (33 samples, 0.05%)</title><rect x="509.1" y="595.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="512.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 0.03%)</title><rect x="509.1" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.1" y="590.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (19 samples, 0.03%)</title><rect x="509.1" y="563.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="512.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.upsert (1,146 samples, 1.72%)</title><rect x="509.7" y="659.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (728 samples, 1.09%)</title><rect x="509.7" y="643.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (728 samples, 1.09%)</title><rect x="509.7" y="627.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="512.7" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (265 samples, 0.40%)</title><rect x="509.7" y="611.0" width="4.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="512.7" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (463 samples, 0.70%)</title><rect x="514.4" y="611.0" width="8.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="517.4" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (418 samples, 0.63%)</title><rect x="522.6" y="643.0" width="7.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="525.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (358 samples, 0.54%)</title><rect x="530.0" y="691.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (346 samples, 0.52%)</title><rect x="530.0" y="675.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (346 samples, 0.52%)</title><rect x="530.0" y="659.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$130/77195045.get$Lambda (346 samples, 0.52%)</title><rect x="530.0" y="643.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.0" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$130 (346 samples, 0.52%)</title><rect x="530.0" y="627.0" width="6.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="533.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (215 samples, 0.32%)</title><rect x="536.4" y="691.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="539.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (215 samples, 0.32%)</title><rect x="536.4" y="675.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (215 samples, 0.32%)</title><rect x="536.4" y="659.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.4" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (215 samples, 0.32%)</title><rect x="536.4" y="643.0" width="3.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="539.4" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (912 samples, 1.37%)</title><rect x="540.2" y="691.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.privateGetResult (912 samples, 1.37%)</title><rect x="540.2" y="675.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.2" y="686.0"></text>
</g>
<g>
<title>one.nio.http.Response (207 samples, 0.31%)</title><rect x="540.2" y="659.0" width="3.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="543.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (705 samples, 1.06%)</title><rect x="543.9" y="659.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.9" y="670.0"></text>
</g>
<g>
<title>byte[] (280 samples, 0.42%)</title><rect x="543.9" y="643.0" width="4.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="546.9" y="654.0"></text>
</g>
<g>
<title>java.lang.String[] (234 samples, 0.35%)</title><rect x="548.8" y="643.0" width="4.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="551.8" y="654.0"></text>
</g>
<g>
<title>java.lang.String (191 samples, 0.29%)</title><rect x="553.0" y="643.0" width="3.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="556.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.&lt;init&gt; (521 samples, 0.78%)</title><rect x="556.4" y="691.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (521 samples, 0.78%)</title><rect x="556.4" y="675.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="559.4" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (96 samples, 0.14%)</title><rect x="556.4" y="659.0" width="1.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="559.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (234 samples, 0.35%)</title><rect x="558.1" y="659.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.1" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (234 samples, 0.35%)</title><rect x="558.1" y="643.0" width="4.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="561.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (191 samples, 0.29%)</title><rect x="562.2" y="659.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (191 samples, 0.29%)</title><rect x="562.2" y="643.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.2" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (191 samples, 0.29%)</title><rect x="562.2" y="627.0" width="3.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="565.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,215 samples, 1.83%)</title><rect x="565.6" y="691.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.6" y="702.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,215 samples, 1.83%)</title><rect x="565.6" y="675.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.6" y="686.0">r..</text>
</g>
<g>
<title>java.lang.String[] (224 samples, 0.34%)</title><rect x="565.6" y="659.0" width="4.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="568.6" y="670.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (226 samples, 0.34%)</title><rect x="569.6" y="659.0" width="4.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="572.6" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (231 samples, 0.35%)</title><rect x="573.6" y="659.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="576.6" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (231 samples, 0.35%)</title><rect x="573.6" y="643.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.6" y="654.0"></text>
</g>
<g>
<title>java.lang.Object[] (231 samples, 0.35%)</title><rect x="573.6" y="627.0" width="4.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="576.6" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (534 samples, 0.80%)</title><rect x="577.7" y="659.0" width="9.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="580.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (3,351 samples, 5.03%)</title><rect x="587.1" y="707.0" width="59.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.1" y="718.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,351 samples, 5.03%)</title><rect x="587.1" y="691.0" width="59.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="590.1" y="702.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3,351 samples, 5.03%)</title><rect x="587.1" y="675.0" width="59.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.1" y="686.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,325 samples, 3.49%)</title><rect x="587.1" y="659.0" width="41.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="590.1" y="670.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,325 samples, 3.49%)</title><rect x="587.1" y="643.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.1" y="654.0">one..</text>
</g>
<g>
<title>byte[] (2,324 samples, 3.49%)</title><rect x="587.1" y="627.0" width="41.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="590.1" y="638.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,026 samples, 1.54%)</title><rect x="628.3" y="659.0" width="18.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="631.3" y="670.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,026 samples, 1.54%)</title><rect x="628.3" y="643.0" width="18.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="631.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (11,077 samples, 16.64%)</title><rect x="646.5" y="707.0" width="196.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.5" y="718.0">ru/mail/polis/service/alex..</text>
</g>
<g>
<title>java/lang/String.getBytes (862 samples, 1.29%)</title><rect x="646.5" y="691.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.5" y="702.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (862 samples, 1.29%)</title><rect x="646.5" y="675.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.5" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (862 samples, 1.29%)</title><rect x="646.5" y="659.0" width="15.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.5" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (862 samples, 1.29%)</title><rect x="646.5" y="643.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.5" y="654.0"></text>
</g>
<g>
<title>byte[] (862 samples, 1.29%)</title><rect x="646.5" y="627.0" width="15.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="649.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,269 samples, 1.91%)</title><rect x="661.8" y="691.0" width="22.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="664.8" y="702.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,269 samples, 1.91%)</title><rect x="661.8" y="675.0" width="22.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="664.8" y="686.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,269 samples, 1.91%)</title><rect x="661.8" y="659.0" width="22.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="664.8" y="670.0">j..</text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (657 samples, 0.99%)</title><rect x="684.3" y="691.0" width="11.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="687.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (8,289 samples, 12.45%)</title><rect x="696.0" y="691.0" width="146.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="699.0" y="702.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1,970 samples, 2.96%)</title><rect x="696.0" y="675.0" width="34.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.0" y="686.0">co..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (745 samples, 1.12%)</title><rect x="696.0" y="659.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.0" y="670.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (745 samples, 1.12%)</title><rect x="696.0" y="643.0" width="13.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="699.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1,225 samples, 1.84%)</title><rect x="709.2" y="659.0" width="21.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="712.2" y="670.0">c..</text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (387 samples, 0.58%)</title><rect x="709.2" y="643.0" width="6.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="712.2" y="654.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (838 samples, 1.26%)</title><rect x="716.0" y="643.0" width="14.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="719.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (6,319 samples, 9.49%)</title><rect x="730.9" y="675.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="733.9" y="686.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2,495 samples, 3.75%)</title><rect x="730.9" y="659.0" width="44.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.9" y="670.0">com/..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2,495 samples, 3.75%)</title><rect x="730.9" y="643.0" width="44.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.9" y="654.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,495 samples, 3.75%)</title><rect x="730.9" y="627.0" width="44.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.9" y="638.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,495 samples, 3.75%)</title><rect x="730.9" y="611.0" width="44.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.9" y="622.0">com/..</text>
</g>
<g>
<title>java/lang/String.subSequence (2,495 samples, 3.75%)</title><rect x="730.9" y="595.0" width="44.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.9" y="606.0">java..</text>
</g>
<g>
<title>java/lang/String.substring (2,495 samples, 3.75%)</title><rect x="730.9" y="579.0" width="44.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.9" y="590.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,495 samples, 3.75%)</title><rect x="730.9" y="563.0" width="44.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.9" y="574.0">java..</text>
</g>
<g>
<title>java.lang.String (1,207 samples, 1.81%)</title><rect x="730.9" y="547.0" width="21.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="733.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,288 samples, 1.93%)</title><rect x="752.3" y="547.0" width="22.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.3" y="558.0">j..</text>
</g>
<g>
<title>byte[] (1,288 samples, 1.93%)</title><rect x="752.3" y="531.0" width="22.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="755.3" y="542.0">b..</text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1,191 samples, 1.79%)</title><rect x="775.1" y="659.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.1" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,191 samples, 1.79%)</title><rect x="775.1" y="643.0" width="21.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.1" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,191 samples, 1.79%)</title><rect x="775.1" y="627.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.1" y="638.0">c..</text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (1,191 samples, 1.79%)</title><rect x="775.1" y="611.0" width="21.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="778.1" y="622.0">c..</text>
</g>
<g>
<title>java.util.ArrayList (615 samples, 0.92%)</title><rect x="796.2" y="659.0" width="10.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="799.2" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,423 samples, 2.14%)</title><rect x="807.1" y="659.0" width="25.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.add (1,423 samples, 2.14%)</title><rect x="807.1" y="643.0" width="25.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="810.1" y="654.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,423 samples, 2.14%)</title><rect x="807.1" y="627.0" width="25.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.1" y="638.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,423 samples, 2.14%)</title><rect x="807.1" y="611.0" width="25.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.1" y="622.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,423 samples, 2.14%)</title><rect x="807.1" y="595.0" width="25.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.1" y="606.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (1,423 samples, 2.14%)</title><rect x="807.1" y="579.0" width="25.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="810.1" y="590.0">j..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (595 samples, 0.89%)</title><rect x="832.4" y="659.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="835.4" y="670.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (595 samples, 0.89%)</title><rect x="832.4" y="643.0" width="10.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="835.4" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (553 samples, 0.83%)</title><rect x="842.9" y="739.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.9" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (553 samples, 0.83%)</title><rect x="842.9" y="723.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.9" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$108/785376788.run (553 samples, 0.83%)</title><rect x="842.9" y="707.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.9" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (553 samples, 0.83%)</title><rect x="842.9" y="691.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.9" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (553 samples, 0.83%)</title><rect x="842.9" y="675.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.9" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (553 samples, 0.83%)</title><rect x="842.9" y="659.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.9" y="670.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (15 samples, 0.02%)</title><rect x="842.9" y="643.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="845.9" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (538 samples, 0.81%)</title><rect x="843.2" y="643.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.2" y="654.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (527 samples, 0.79%)</title><rect x="843.2" y="627.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="846.2" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (527 samples, 0.79%)</title><rect x="843.2" y="611.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.2" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (527 samples, 0.79%)</title><rect x="843.2" y="595.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.2" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (527 samples, 0.79%)</title><rect x="843.2" y="579.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.2" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (354 samples, 0.53%)</title><rect x="843.2" y="563.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (354 samples, 0.53%)</title><rect x="843.2" y="547.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (354 samples, 0.53%)</title><rect x="843.2" y="531.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.2" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (354 samples, 0.53%)</title><rect x="843.2" y="515.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.2" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (337 samples, 0.51%)</title><rect x="843.2" y="499.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.2" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (336 samples, 0.50%)</title><rect x="843.2" y="483.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="846.2" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (336 samples, 0.50%)</title><rect x="843.2" y="467.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.2" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (336 samples, 0.50%)</title><rect x="843.2" y="451.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.2" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (336 samples, 0.50%)</title><rect x="843.2" y="435.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.2" y="446.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (336 samples, 0.50%)</title><rect x="843.2" y="419.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.2" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (336 samples, 0.50%)</title><rect x="843.2" y="403.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.2" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (336 samples, 0.50%)</title><rect x="843.2" y="387.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.2" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (336 samples, 0.50%)</title><rect x="843.2" y="371.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.2" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (336 samples, 0.50%)</title><rect x="843.2" y="355.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.2" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (336 samples, 0.50%)</title><rect x="843.2" y="339.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.2" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (336 samples, 0.50%)</title><rect x="843.2" y="323.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.2" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (336 samples, 0.50%)</title><rect x="843.2" y="307.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.2" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (301 samples, 0.45%)</title><rect x="843.2" y="291.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.2" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (301 samples, 0.45%)</title><rect x="843.2" y="275.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.2" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (301 samples, 0.45%)</title><rect x="843.2" y="259.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.2" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (301 samples, 0.45%)</title><rect x="843.2" y="243.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.2" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (119 samples, 0.18%)</title><rect x="843.2" y="227.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.2" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (90 samples, 0.14%)</title><rect x="843.2" y="211.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.2" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (83 samples, 0.12%)</title><rect x="843.2" y="195.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.2" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (83 samples, 0.12%)</title><rect x="843.2" y="179.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.2" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (46 samples, 0.07%)</title><rect x="843.4" y="163.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.4" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (36 samples, 0.05%)</title><rect x="843.6" y="147.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.6" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (34 samples, 0.05%)</title><rect x="843.6" y="131.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.6" y="142.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (34 samples, 0.05%)</title><rect x="843.6" y="115.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="846.6" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (27 samples, 0.04%)</title><rect x="844.2" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.2" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (27 samples, 0.04%)</title><rect x="844.2" y="147.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="847.2" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (29 samples, 0.04%)</title><rect x="844.8" y="211.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.8" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (15 samples, 0.02%)</title><rect x="844.9" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="847.9" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (102 samples, 0.15%)</title><rect x="845.5" y="227.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.5" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (15 samples, 0.02%)</title><rect x="845.5" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="848.5" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (87 samples, 0.13%)</title><rect x="845.8" y="211.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="848.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (80 samples, 0.12%)</title><rect x="845.9" y="195.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.9" y="206.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (80 samples, 0.12%)</title><rect x="845.9" y="179.0" width="1.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="848.9" y="190.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (70 samples, 0.11%)</title><rect x="847.3" y="227.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.3" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (57 samples, 0.09%)</title><rect x="847.3" y="211.0" width="1.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="850.3" y="222.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (35 samples, 0.05%)</title><rect x="848.5" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.5" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (35 samples, 0.05%)</title><rect x="848.5" y="275.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (35 samples, 0.05%)</title><rect x="848.5" y="259.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (35 samples, 0.05%)</title><rect x="848.5" y="243.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="851.5" y="254.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (35 samples, 0.05%)</title><rect x="848.5" y="227.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.5" y="238.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (35 samples, 0.05%)</title><rect x="848.5" y="211.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (35 samples, 0.05%)</title><rect x="848.5" y="195.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (35 samples, 0.05%)</title><rect x="848.5" y="179.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.5" y="190.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (35 samples, 0.05%)</title><rect x="848.5" y="163.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.5" y="174.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (35 samples, 0.05%)</title><rect x="848.5" y="147.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="851.5" y="158.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (137 samples, 0.21%)</title><rect x="849.5" y="563.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (137 samples, 0.21%)</title><rect x="849.5" y="547.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (137 samples, 0.21%)</title><rect x="849.5" y="531.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (136 samples, 0.20%)</title><rect x="849.5" y="515.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (136 samples, 0.20%)</title><rect x="849.5" y="499.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (129 samples, 0.19%)</title><rect x="849.5" y="483.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (129 samples, 0.19%)</title><rect x="849.5" y="467.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (129 samples, 0.19%)</title><rect x="849.5" y="451.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.5" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (129 samples, 0.19%)</title><rect x="849.5" y="435.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.5" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (120 samples, 0.18%)</title><rect x="849.5" y="419.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (119 samples, 0.18%)</title><rect x="849.5" y="403.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.5" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (108 samples, 0.16%)</title><rect x="849.7" y="387.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.7" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (104 samples, 0.16%)</title><rect x="849.7" y="371.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (104 samples, 0.16%)</title><rect x="849.7" y="355.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.7" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (104 samples, 0.16%)</title><rect x="849.7" y="339.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.7" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (104 samples, 0.16%)</title><rect x="849.7" y="323.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.7" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (100 samples, 0.15%)</title><rect x="849.8" y="307.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.8" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (100 samples, 0.15%)</title><rect x="849.8" y="291.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.8" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (23 samples, 0.03%)</title><rect x="849.8" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.8" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (22 samples, 0.03%)</title><rect x="849.8" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.8" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (18 samples, 0.03%)</title><rect x="849.8" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.8" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (18 samples, 0.03%)</title><rect x="849.8" y="227.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.8" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (18 samples, 0.03%)</title><rect x="849.8" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.8" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (40 samples, 0.06%)</title><rect x="850.2" y="275.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.2" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (15 samples, 0.02%)</title><rect x="850.2" y="259.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="853.2" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (15 samples, 0.02%)</title><rect x="850.2" y="243.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.2" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (25 samples, 0.04%)</title><rect x="850.4" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.4" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (25 samples, 0.04%)</title><rect x="850.4" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.4" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (24 samples, 0.04%)</title><rect x="850.5" y="227.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (21 samples, 0.03%)</title><rect x="850.5" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (21 samples, 0.03%)</title><rect x="850.5" y="195.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.5" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (21 samples, 0.03%)</title><rect x="850.5" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.5" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (20 samples, 0.03%)</title><rect x="850.5" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="853.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (20 samples, 0.03%)</title><rect x="850.5" y="147.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (20 samples, 0.03%)</title><rect x="850.5" y="131.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.5" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (20 samples, 0.03%)</title><rect x="850.5" y="115.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.5" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (17 samples, 0.03%)</title><rect x="850.5" y="99.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.5" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (17 samples, 0.03%)</title><rect x="850.5" y="83.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="853.5" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (15 samples, 0.02%)</title><rect x="850.5" y="67.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="853.5" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (15 samples, 0.02%)</title><rect x="850.5" y="51.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.5" y="62.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (15 samples, 0.02%)</title><rect x="850.5" y="35.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.5" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (32 samples, 0.05%)</title><rect x="851.0" y="275.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.0" y="286.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (32 samples, 0.05%)</title><rect x="851.0" y="259.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="854.0" y="270.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (19 samples, 0.03%)</title><rect x="852.2" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.2" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (19 samples, 0.03%)</title><rect x="852.2" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.2" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (19 samples, 0.03%)</title><rect x="852.2" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.2" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (18 samples, 0.03%)</title><rect x="852.2" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.2" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (18 samples, 0.03%)</title><rect x="852.2" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (18 samples, 0.03%)</title><rect x="852.2" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.2" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18,788 samples, 28.23%)</title><rect x="852.7" y="787.0" width="333.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.7" y="798.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (277 samples, 0.42%)</title><rect x="852.7" y="771.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.7" y="782.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (277 samples, 0.42%)</title><rect x="852.7" y="755.0" width="4.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="855.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18,511 samples, 27.81%)</title><rect x="857.6" y="771.0" width="328.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.6" y="782.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (18,511 samples, 27.81%)</title><rect x="857.6" y="755.0" width="328.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.6" y="766.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (18,511 samples, 27.81%)</title><rect x="857.6" y="739.0" width="328.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.6" y="750.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,802 samples, 5.71%)</title><rect x="857.6" y="723.0" width="67.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.6" y="734.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,802 samples, 5.71%)</title><rect x="857.6" y="707.0" width="67.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.6" y="718.0">one/nio..</text>
</g>
<g>
<title>RequestHandler2_handleEntityPut.handleRequest (2,600 samples, 3.91%)</title><rect x="857.6" y="691.0" width="46.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="860.6" y="702.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (914 samples, 1.37%)</title><rect x="857.6" y="675.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (914 samples, 1.37%)</title><rect x="857.6" y="659.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (914 samples, 1.37%)</title><rect x="857.6" y="643.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.6" y="654.0"></text>
</g>
<g>
<title>java.lang.String (451 samples, 0.68%)</title><rect x="857.6" y="627.0" width="8.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="860.6" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (463 samples, 0.70%)</title><rect x="865.6" y="627.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.6" y="638.0"></text>
</g>
<g>
<title>byte[] (463 samples, 0.70%)</title><rect x="865.6" y="611.0" width="8.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="868.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,020 samples, 1.53%)</title><rect x="873.8" y="675.0" width="18.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,020 samples, 1.53%)</title><rect x="873.8" y="659.0" width="18.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="876.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,020 samples, 1.53%)</title><rect x="873.8" y="643.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.8" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,020 samples, 1.53%)</title><rect x="873.8" y="627.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="876.8" y="638.0"></text>
</g>
<g>
<title>java.lang.String (478 samples, 0.72%)</title><rect x="873.8" y="611.0" width="8.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="876.8" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (542 samples, 0.81%)</title><rect x="882.3" y="611.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.3" y="622.0"></text>
</g>
<g>
<title>byte[] (542 samples, 0.81%)</title><rect x="882.3" y="595.0" width="9.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="885.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityPut (666 samples, 1.00%)</title><rect x="891.9" y="675.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="894.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1876592442.linkToTargetMethod (663 samples, 1.00%)</title><rect x="891.9" y="659.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (663 samples, 1.00%)</title><rect x="891.9" y="643.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="894.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$121/2005965375.get$Lambda (663 samples, 1.00%)</title><rect x="891.9" y="627.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="894.9" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$121 (663 samples, 1.00%)</title><rect x="891.9" y="611.0" width="11.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="894.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,202 samples, 1.81%)</title><rect x="903.7" y="691.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.7" y="702.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (1,202 samples, 1.81%)</title><rect x="903.7" y="675.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.7" y="686.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,202 samples, 1.81%)</title><rect x="903.7" y="659.0" width="21.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.7" y="670.0">j..</text>
</g>
<g>
<title>java.lang.String (523 samples, 0.79%)</title><rect x="903.7" y="643.0" width="9.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="906.7" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (679 samples, 1.02%)</title><rect x="913.0" y="643.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="916.0" y="654.0"></text>
</g>
<g>
<title>byte[] (679 samples, 1.02%)</title><rect x="913.0" y="627.0" width="12.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="916.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6,825 samples, 10.25%)</title><rect x="925.0" y="723.0" width="121.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.0" y="734.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (688 samples, 1.03%)</title><rect x="925.0" y="707.0" width="12.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="928.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,664 samples, 2.50%)</title><rect x="937.2" y="707.0" width="29.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.2" y="718.0">on..</text>
</g>
<g>
<title>java.lang.String[] (1,654 samples, 2.48%)</title><rect x="937.2" y="691.0" width="29.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="940.2" y="702.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,473 samples, 6.72%)</title><rect x="966.7" y="707.0" width="79.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.7" y="718.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,473 samples, 6.72%)</title><rect x="966.7" y="691.0" width="79.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="969.7" y="702.0">one/nio/u..</text>
</g>
<g>
<title>char[] (3,085 samples, 4.63%)</title><rect x="966.7" y="675.0" width="54.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="969.7" y="686.0">char[]</text>
</g>
<g>
<title>java.lang.String (438 samples, 0.66%)</title><rect x="1021.5" y="675.0" width="7.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1024.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (946 samples, 1.42%)</title><rect x="1029.2" y="675.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (946 samples, 1.42%)</title><rect x="1029.2" y="659.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (946 samples, 1.42%)</title><rect x="1029.2" y="643.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1032.2" y="654.0"></text>
</g>
<g>
<title>byte[] (946 samples, 1.42%)</title><rect x="1029.2" y="627.0" width="16.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1032.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (744 samples, 1.12%)</title><rect x="1046.0" y="723.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1049.0" y="734.0"></text>
</g>
<g>
<title>byte[] (744 samples, 1.12%)</title><rect x="1046.0" y="707.0" width="13.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1049.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (886 samples, 1.33%)</title><rect x="1059.2" y="723.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1062.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (886 samples, 1.33%)</title><rect x="1059.2" y="707.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (886 samples, 1.33%)</title><rect x="1059.2" y="691.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1062.2" y="702.0"></text>
</g>
<g>
<title>java.lang.String (454 samples, 0.68%)</title><rect x="1059.2" y="675.0" width="8.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1062.2" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (432 samples, 0.65%)</title><rect x="1067.2" y="675.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.2" y="686.0"></text>
</g>
<g>
<title>byte[] (432 samples, 0.65%)</title><rect x="1067.2" y="659.0" width="7.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1070.2" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,254 samples, 9.40%)</title><rect x="1074.9" y="723.0" width="110.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.9" y="734.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,254 samples, 9.40%)</title><rect x="1074.9" y="707.0" width="110.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1077.9" y="718.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (3,169 samples, 4.76%)</title><rect x="1074.9" y="691.0" width="56.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1077.9" y="702.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,199 samples, 1.80%)</title><rect x="1131.1" y="691.0" width="21.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1134.1" y="702.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,886 samples, 2.83%)</title><rect x="1152.3" y="691.0" width="33.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1155.3" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,886 samples, 2.83%)</title><rect x="1152.3" y="675.0" width="33.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.3" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,886 samples, 2.83%)</title><rect x="1152.3" y="659.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1155.3" y="670.0">ja..</text>
</g>
<g>
<title>byte[] (1,886 samples, 2.83%)</title><rect x="1152.3" y="643.0" width="33.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1155.3" y="654.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Flusher.run (239 samples, 0.36%)</title><rect x="1185.8" y="787.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.serialize (236 samples, 0.35%)</title><rect x="1185.8" y="771.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (233 samples, 0.35%)</title><rect x="1185.9" y="755.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1188.9" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (92 samples, 0.14%)</title><rect x="1185.9" y="739.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (92 samples, 0.14%)</title><rect x="1185.9" y="723.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1188.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (92 samples, 0.14%)</title><rect x="1185.9" y="707.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1188.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (92 samples, 0.14%)</title><rect x="1185.9" y="691.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$149/80324228.getAsBoolean (92 samples, 0.14%)</title><rect x="1185.9" y="675.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (92 samples, 0.14%)</title><rect x="1185.9" y="659.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (92 samples, 0.14%)</title><rect x="1185.9" y="643.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (86 samples, 0.13%)</title><rect x="1186.0" y="627.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$136/1546050714.apply (86 samples, 0.13%)</title><rect x="1186.0" y="611.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (86 samples, 0.13%)</title><rect x="1186.0" y="595.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (61 samples, 0.09%)</title><rect x="1186.0" y="579.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.0" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (61 samples, 0.09%)</title><rect x="1186.0" y="563.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1189.0" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (25 samples, 0.04%)</title><rect x="1187.1" y="579.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$$Lambda$141/1896505867.accept (141 samples, 0.21%)</title><rect x="1187.5" y="739.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.lambda$serialize$0 (141 samples, 0.21%)</title><rect x="1187.5" y="723.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (21 samples, 0.03%)</title><rect x="1187.5" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>java.lang.Integer (21 samples, 0.03%)</title><rect x="1187.5" y="691.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (107 samples, 0.16%)</title><rect x="1188.1" y="707.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1191.1" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (107 samples, 0.16%)</title><rect x="1188.1" y="691.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1191.1" y="702.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (107 samples, 0.16%)</title><rect x="1188.1" y="675.0" width="1.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1191.1" y="686.0"></text>
</g>
</g>
</svg>
