<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (309,903 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (229,424 samples, 74.03%)</title><rect x="10.0" y="707.0" width="873.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229,375 samples, 74.02%)</title><rect x="10.2" y="691.0" width="873.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.2" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229,375 samples, 74.02%)</title><rect x="10.2" y="675.0" width="873.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.2" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2,809 samples, 0.91%)</title><rect x="10.2" y="659.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (2,809 samples, 0.91%)</title><rect x="10.2" y="643.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2,792 samples, 0.90%)</title><rect x="10.2" y="627.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2,792 samples, 0.90%)</title><rect x="10.2" y="611.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2,792 samples, 0.90%)</title><rect x="10.2" y="595.0" width="10.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="13.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$130/77195045.run (29,023 samples, 9.37%)</title><rect x="20.9" y="659.0" width="110.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.9" y="670.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (29,023 samples, 9.37%)</title><rect x="20.9" y="643.0" width="110.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.9" y="654.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$154/673765071.accept (29,023 samples, 9.37%)</title><rect x="20.9" y="627.0" width="110.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="638.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$1 (29,023 samples, 9.37%)</title><rect x="20.9" y="611.0" width="110.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.9" y="622.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (28,431 samples, 9.17%)</title><rect x="20.9" y="595.0" width="108.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="606.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (28,431 samples, 9.17%)</title><rect x="20.9" y="579.0" width="108.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.9" y="590.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (26,403 samples, 8.52%)</title><rect x="21.1" y="563.0" width="100.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.1" y="574.0">one/nio/http..</text>
</g>
<g>
<title>byte[] (6,064 samples, 1.96%)</title><rect x="21.1" y="547.0" width="23.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="24.1" y="558.0">b..</text>
</g>
<g>
<title>byte[] (20,339 samples, 6.56%)</title><rect x="44.2" y="547.0" width="77.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="47.2" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,409 samples, 0.45%)</title><rect x="121.7" y="563.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.7" y="574.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.02%)</title><rect x="121.7" y="547.0" width="0.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="124.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (75 samples, 0.02%)</title><rect x="121.9" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (75 samples, 0.02%)</title><rect x="121.9" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="124.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,100 samples, 0.35%)</title><rect x="122.4" y="547.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,100 samples, 0.35%)</title><rect x="122.4" y="531.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,100 samples, 0.35%)</title><rect x="122.4" y="515.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.4" y="526.0"></text>
</g>
<g>
<title>char[] (797 samples, 0.26%)</title><rect x="122.4" y="499.0" width="3.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="125.4" y="510.0"></text>
</g>
<g>
<title>java.lang.String (147 samples, 0.05%)</title><rect x="125.4" y="499.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="128.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (156 samples, 0.05%)</title><rect x="126.0" y="499.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (156 samples, 0.05%)</title><rect x="126.0" y="483.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="129.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (156 samples, 0.05%)</title><rect x="126.0" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.0" y="478.0"></text>
</g>
<g>
<title>byte[] (156 samples, 0.05%)</title><rect x="126.0" y="451.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="129.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (72 samples, 0.02%)</title><rect x="126.7" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (72 samples, 0.02%)</title><rect x="126.7" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (72 samples, 0.02%)</title><rect x="126.7" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (438 samples, 0.14%)</title><rect x="127.0" y="563.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.0" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (438 samples, 0.14%)</title><rect x="127.0" y="547.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.0" y="558.0"></text>
</g>
<g>
<title>byte[] (438 samples, 0.14%)</title><rect x="127.0" y="531.0" width="1.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="130.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (79 samples, 0.03%)</title><rect x="128.7" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (79 samples, 0.03%)</title><rect x="128.7" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (79 samples, 0.03%)</title><rect x="128.7" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (592 samples, 0.19%)</title><rect x="129.1" y="595.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (587 samples, 0.19%)</title><rect x="129.2" y="579.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (502 samples, 0.16%)</title><rect x="129.2" y="563.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (77 samples, 0.02%)</title><rect x="129.2" y="547.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (77 samples, 0.02%)</title><rect x="129.2" y="531.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.2" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (77 samples, 0.02%)</title><rect x="129.2" y="515.0" width="0.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="132.2" y="526.0"></text>
</g>
<g>
<title>one.nio.serial.DeserializeStream (70 samples, 0.02%)</title><rect x="129.4" y="547.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="132.4" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (183 samples, 0.06%)</title><rect x="129.7" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.7" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (183 samples, 0.06%)</title><rect x="129.7" y="531.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="132.7" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (133 samples, 0.04%)</title><rect x="130.4" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.4" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.read (92 samples, 0.03%)</title><rect x="130.4" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.4" y="542.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.read (92 samples, 0.03%)</title><rect x="130.4" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (85 samples, 0.03%)</title><rect x="131.1" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.compute (85 samples, 0.03%)</title><rect x="131.1" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$153/2033092886.run (42,357 samples, 13.67%)</title><rect x="131.4" y="659.0" width="161.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.4" y="670.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$0 (42,357 samples, 13.67%)</title><rect x="131.4" y="643.0" width="161.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.4" y="654.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (42,029 samples, 13.56%)</title><rect x="131.4" y="627.0" width="160.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.4" y="638.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (40,933 samples, 13.21%)</title><rect x="131.7" y="611.0" width="155.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.7" y="622.0">ru/mail/polis/dao/DA..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (565 samples, 0.18%)</title><rect x="131.7" y="595.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.7" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (565 samples, 0.18%)</title><rect x="131.7" y="579.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (565 samples, 0.18%)</title><rect x="131.7" y="563.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (565 samples, 0.18%)</title><rect x="131.7" y="547.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.7" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (565 samples, 0.18%)</title><rect x="131.7" y="531.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (565 samples, 0.18%)</title><rect x="131.7" y="515.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (565 samples, 0.18%)</title><rect x="131.7" y="499.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (565 samples, 0.18%)</title><rect x="131.7" y="483.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (565 samples, 0.18%)</title><rect x="131.7" y="467.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (565 samples, 0.18%)</title><rect x="131.7" y="451.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (565 samples, 0.18%)</title><rect x="131.7" y="435.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (172 samples, 0.06%)</title><rect x="131.9" y="419.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="134.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (69 samples, 0.02%)</title><rect x="131.9" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (69 samples, 0.02%)</title><rect x="131.9" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (336 samples, 0.11%)</title><rect x="132.6" y="419.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (75 samples, 0.02%)</title><rect x="132.7" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (75 samples, 0.02%)</title><rect x="132.7" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (113 samples, 0.04%)</title><rect x="133.0" y="403.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (113 samples, 0.04%)</title><rect x="133.0" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.0" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (73 samples, 0.02%)</title><rect x="133.0" y="371.0" width="0.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="136.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (40,368 samples, 13.03%)</title><rect x="133.9" y="595.0" width="153.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.9" y="606.0">ru/mail/polis/dao/a..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2,049 samples, 0.66%)</title><rect x="133.9" y="579.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2,034 samples, 0.66%)</title><rect x="133.9" y="563.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.9" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,766 samples, 0.57%)</title><rect x="134.4" y="547.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,766 samples, 0.57%)</title><rect x="134.4" y="531.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.4" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,757 samples, 0.57%)</title><rect x="134.4" y="515.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.4" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,757 samples, 0.57%)</title><rect x="134.4" y="499.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,757 samples, 0.57%)</title><rect x="134.4" y="483.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.4" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,757 samples, 0.57%)</title><rect x="134.4" y="467.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,757 samples, 0.57%)</title><rect x="134.4" y="451.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="137.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,757 samples, 0.57%)</title><rect x="134.4" y="435.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,757 samples, 0.57%)</title><rect x="134.4" y="419.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.4" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (124 samples, 0.04%)</title><rect x="134.4" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.4" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (124 samples, 0.04%)</title><rect x="134.4" y="387.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="137.4" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (70 samples, 0.02%)</title><rect x="134.9" y="403.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="137.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (556 samples, 0.18%)</title><rect x="135.2" y="403.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (192 samples, 0.06%)</title><rect x="135.2" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (192 samples, 0.06%)</title><rect x="135.2" y="371.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="138.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (125 samples, 0.04%)</title><rect x="135.2" y="355.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="138.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (67 samples, 0.02%)</title><rect x="135.6" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.6" y="366.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.02%)</title><rect x="135.6" y="339.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="138.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (170 samples, 0.05%)</title><rect x="135.9" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (170 samples, 0.05%)</title><rect x="135.9" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="138.9" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (108 samples, 0.03%)</title><rect x="135.9" y="355.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="138.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (194 samples, 0.06%)</title><rect x="136.5" y="387.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (194 samples, 0.06%)</title><rect x="136.5" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.5" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (125 samples, 0.04%)</title><rect x="136.5" y="355.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="139.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (69 samples, 0.02%)</title><rect x="137.0" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.0" y="366.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.02%)</title><rect x="137.0" y="339.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="140.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (1,007 samples, 0.32%)</title><rect x="137.3" y="403.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.3" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (69 samples, 0.02%)</title><rect x="137.3" y="387.0" width="0.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="140.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (217 samples, 0.07%)</title><rect x="137.5" y="387.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="140.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (217 samples, 0.07%)</title><rect x="137.5" y="371.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.5" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (143 samples, 0.05%)</title><rect x="137.5" y="355.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="140.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (74 samples, 0.02%)</title><rect x="138.1" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.1" y="366.0"></text>
</g>
<g>
<title>byte[] (74 samples, 0.02%)</title><rect x="138.1" y="339.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="141.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (360 samples, 0.12%)</title><rect x="138.4" y="387.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (360 samples, 0.12%)</title><rect x="138.4" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (249 samples, 0.08%)</title><rect x="138.4" y="355.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="141.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (111 samples, 0.04%)</title><rect x="139.3" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.3" y="366.0"></text>
</g>
<g>
<title>byte[] (111 samples, 0.04%)</title><rect x="139.3" y="339.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="142.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (175 samples, 0.06%)</title><rect x="139.7" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="142.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (175 samples, 0.06%)</title><rect x="139.7" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (128 samples, 0.04%)</title><rect x="139.7" y="355.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="142.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (186 samples, 0.06%)</title><rect x="140.4" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (186 samples, 0.06%)</title><rect x="140.4" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (117 samples, 0.04%)</title><rect x="140.4" y="355.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="143.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (69 samples, 0.02%)</title><rect x="140.8" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.8" y="366.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.02%)</title><rect x="140.8" y="339.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="143.8" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (147 samples, 0.05%)</title><rect x="141.1" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (147 samples, 0.05%)</title><rect x="141.1" y="531.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (147 samples, 0.05%)</title><rect x="141.1" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (144 samples, 0.05%)</title><rect x="141.1" y="499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (73 samples, 0.02%)</title><rect x="141.4" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.4" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (73 samples, 0.02%)</title><rect x="141.4" y="467.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="144.4" y="478.0"></text>
</g>
<g>
<title>java.util.ArrayList (165 samples, 0.05%)</title><rect x="141.7" y="579.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="144.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (583 samples, 0.19%)</title><rect x="142.7" y="579.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (570 samples, 0.18%)</title><rect x="142.7" y="563.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (570 samples, 0.18%)</title><rect x="142.7" y="547.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.7" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (570 samples, 0.18%)</title><rect x="142.7" y="531.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (570 samples, 0.18%)</title><rect x="142.7" y="515.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (570 samples, 0.18%)</title><rect x="142.7" y="499.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.7" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (570 samples, 0.18%)</title><rect x="142.7" y="483.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="145.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (570 samples, 0.18%)</title><rect x="142.7" y="467.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (570 samples, 0.18%)</title><rect x="142.7" y="451.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (570 samples, 0.18%)</title><rect x="142.7" y="435.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (570 samples, 0.18%)</title><rect x="142.7" y="419.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (570 samples, 0.18%)</title><rect x="142.7" y="403.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="145.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (183 samples, 0.06%)</title><rect x="143.0" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (74 samples, 0.02%)</title><rect x="143.0" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (74 samples, 0.02%)</title><rect x="143.0" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (316 samples, 0.10%)</title><rect x="143.7" y="387.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (120 samples, 0.04%)</title><rect x="144.0" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (120 samples, 0.04%)</title><rect x="144.0" y="355.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (77 samples, 0.02%)</title><rect x="144.0" y="339.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="147.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (264 samples, 0.09%)</title><rect x="144.9" y="579.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (71 samples, 0.02%)</title><rect x="144.9" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (71 samples, 0.02%)</title><rect x="145.4" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (37,208 samples, 12.01%)</title><rect x="145.9" y="579.0" width="141.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.9" y="590.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (212 samples, 0.07%)</title><rect x="145.9" y="563.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="148.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (36,996 samples, 11.94%)</title><rect x="146.7" y="563.0" width="140.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.7" y="574.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (36,996 samples, 11.94%)</title><rect x="146.7" y="547.0" width="140.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.7" y="558.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (36,996 samples, 11.94%)</title><rect x="146.7" y="531.0" width="140.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.7" y="542.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (13,070 samples, 4.22%)</title><rect x="146.7" y="515.0" width="49.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.7" y="526.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (13,070 samples, 4.22%)</title><rect x="146.7" y="499.0" width="49.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.7" y="510.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,931 samples, 2.56%)</title><rect x="146.7" y="483.0" width="30.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="149.7" y="494.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,139 samples, 1.66%)</title><rect x="176.9" y="483.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.9" y="494.0"></text>
</g>
<g>
<title>byte[] (5,139 samples, 1.66%)</title><rect x="176.9" y="467.0" width="19.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="179.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (11,963 samples, 3.86%)</title><rect x="196.5" y="515.0" width="45.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.5" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11,963 samples, 3.86%)</title><rect x="196.5" y="499.0" width="45.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.5" y="510.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,976 samples, 2.57%)</title><rect x="196.5" y="483.0" width="30.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="199.5" y="494.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,987 samples, 1.29%)</title><rect x="226.8" y="483.0" width="15.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.8" y="494.0"></text>
</g>
<g>
<title>byte[] (3,987 samples, 1.29%)</title><rect x="226.8" y="467.0" width="15.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="229.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (11,963 samples, 3.86%)</title><rect x="242.0" y="515.0" width="45.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.0" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (11,963 samples, 3.86%)</title><rect x="242.0" y="499.0" width="45.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="510.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8,024 samples, 2.59%)</title><rect x="242.0" y="483.0" width="30.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="245.0" y="494.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,939 samples, 1.27%)</title><rect x="272.6" y="483.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.6" y="494.0"></text>
</g>
<g>
<title>byte[] (3,939 samples, 1.27%)</title><rect x="272.6" y="467.0" width="15.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="275.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (1,010 samples, 0.33%)</title><rect x="287.6" y="611.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.6" y="622.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (441 samples, 0.14%)</title><rect x="287.8" y="595.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.8" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (441 samples, 0.14%)</title><rect x="287.8" y="579.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.8" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (441 samples, 0.14%)</title><rect x="287.8" y="563.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.8" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (441 samples, 0.14%)</title><rect x="287.8" y="547.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.8" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (441 samples, 0.14%)</title><rect x="287.8" y="531.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.8" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (441 samples, 0.14%)</title><rect x="287.8" y="515.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.8" y="526.0"></text>
</g>
<g>
<title>int[] (233 samples, 0.08%)</title><rect x="287.8" y="499.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="290.8" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (208 samples, 0.07%)</title><rect x="288.7" y="499.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="291.7" y="510.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (456 samples, 0.15%)</title><rect x="289.6" y="595.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.6" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (456 samples, 0.15%)</title><rect x="289.6" y="579.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (456 samples, 0.15%)</title><rect x="289.6" y="563.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.6" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (456 samples, 0.15%)</title><rect x="289.6" y="547.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.6" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (456 samples, 0.15%)</title><rect x="289.6" y="531.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.6" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (456 samples, 0.15%)</title><rect x="289.6" y="515.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.6" y="526.0"></text>
</g>
<g>
<title>int[] (206 samples, 0.07%)</title><rect x="289.6" y="499.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="292.6" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (250 samples, 0.08%)</title><rect x="290.4" y="499.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="293.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (328 samples, 0.11%)</title><rect x="291.4" y="627.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (315 samples, 0.10%)</title><rect x="291.5" y="611.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (257 samples, 0.08%)</title><rect x="291.5" y="595.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.5" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (99 samples, 0.03%)</title><rect x="291.8" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.8" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (99 samples, 0.03%)</title><rect x="291.8" y="563.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="294.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$152/54338970.run (152,071 samples, 49.07%)</title><rect x="292.7" y="659.0" width="579.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.7" y="670.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$152/54338970.run</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2 (152,071 samples, 49.07%)</title><rect x="292.7" y="643.0" width="579.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.7" y="654.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.get (128,117 samples, 41.34%)</title><rect x="292.7" y="627.0" width="487.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.7" y="638.0">ru/mail/polis/service/alexander/marashov/ResponseManager.get</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (113 samples, 0.04%)</title><rect x="292.9" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (113 samples, 0.04%)</title><rect x="292.9" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (113 samples, 0.04%)</title><rect x="292.9" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.9" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.ResponseAnalyzerGet (3,772 samples, 1.22%)</title><rect x="293.3" y="611.0" width="14.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="296.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (103,774 samples, 33.49%)</title><rect x="307.7" y="611.0" width="395.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.7" y="622.0">ru/mail/polis/service/alexander/marashov/DaoManager.ro..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (215 samples, 0.07%)</title><rect x="307.9" y="595.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.9" y="606.0"></text>
</g>
<g>
<title>byte[] (94 samples, 0.03%)</title><rect x="307.9" y="579.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="310.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (100,470 samples, 32.42%)</title><rect x="308.7" y="595.0" width="382.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.7" y="606.0">ru/mail/polis/dao/DAO.rowGet</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,663 samples, 0.54%)</title><rect x="308.7" y="579.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.7" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,663 samples, 0.54%)</title><rect x="308.7" y="563.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,663 samples, 0.54%)</title><rect x="308.7" y="547.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.7" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,663 samples, 0.54%)</title><rect x="308.7" y="531.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,663 samples, 0.54%)</title><rect x="308.7" y="515.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,663 samples, 0.54%)</title><rect x="308.7" y="499.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,663 samples, 0.54%)</title><rect x="308.7" y="483.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,663 samples, 0.54%)</title><rect x="308.7" y="467.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.7" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,663 samples, 0.54%)</title><rect x="308.7" y="451.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,663 samples, 0.54%)</title><rect x="308.7" y="435.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,663 samples, 0.54%)</title><rect x="308.7" y="419.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (123 samples, 0.04%)</title><rect x="308.7" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.7" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (123 samples, 0.04%)</title><rect x="308.7" y="387.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="311.7" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (66 samples, 0.02%)</title><rect x="309.2" y="403.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="312.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (535 samples, 0.17%)</title><rect x="309.5" y="403.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (184 samples, 0.06%)</title><rect x="309.5" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (184 samples, 0.06%)</title><rect x="309.5" y="371.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.5" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (125 samples, 0.04%)</title><rect x="309.5" y="355.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="312.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (171 samples, 0.06%)</title><rect x="310.2" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (171 samples, 0.06%)</title><rect x="310.2" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (109 samples, 0.04%)</title><rect x="310.2" y="355.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="313.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (180 samples, 0.06%)</title><rect x="310.8" y="387.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (180 samples, 0.06%)</title><rect x="310.8" y="371.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.8" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (126 samples, 0.04%)</title><rect x="310.8" y="355.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="313.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (939 samples, 0.30%)</title><rect x="311.5" y="403.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.5" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (75 samples, 0.02%)</title><rect x="311.5" y="387.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="314.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (204 samples, 0.07%)</title><rect x="311.8" y="387.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (204 samples, 0.07%)</title><rect x="311.8" y="371.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.8" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (132 samples, 0.04%)</title><rect x="311.8" y="355.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="314.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (72 samples, 0.02%)</title><rect x="312.3" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.3" y="366.0"></text>
</g>
<g>
<title>byte[] (72 samples, 0.02%)</title><rect x="312.3" y="339.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="315.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (341 samples, 0.11%)</title><rect x="312.6" y="387.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (341 samples, 0.11%)</title><rect x="312.6" y="371.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (231 samples, 0.07%)</title><rect x="312.6" y="355.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="315.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (110 samples, 0.04%)</title><rect x="313.4" y="355.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.4" y="366.0"></text>
</g>
<g>
<title>byte[] (110 samples, 0.04%)</title><rect x="313.4" y="339.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="316.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (147 samples, 0.05%)</title><rect x="313.9" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (147 samples, 0.05%)</title><rect x="313.9" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.9" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (98 samples, 0.03%)</title><rect x="313.9" y="355.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="316.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (172 samples, 0.06%)</title><rect x="314.4" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (172 samples, 0.06%)</title><rect x="314.4" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (115 samples, 0.04%)</title><rect x="314.4" y="355.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="317.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (98,807 samples, 31.88%)</title><rect x="315.1" y="579.0" width="376.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.1" y="590.0">ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIte..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5,955 samples, 1.92%)</title><rect x="315.1" y="563.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="318.1" y="574.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5,912 samples, 1.91%)</title><rect x="315.2" y="547.0" width="22.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.2" y="558.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (191 samples, 0.06%)</title><rect x="315.5" y="531.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.5" y="542.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (191 samples, 0.06%)</title><rect x="315.5" y="515.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="318.5" y="526.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (73 samples, 0.02%)</title><rect x="316.2" y="531.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="319.2" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5,122 samples, 1.65%)</title><rect x="316.7" y="531.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5,122 samples, 1.65%)</title><rect x="316.7" y="515.0" width="19.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5,092 samples, 1.64%)</title><rect x="316.8" y="499.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.8" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5,092 samples, 1.64%)</title><rect x="316.8" y="483.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,092 samples, 1.64%)</title><rect x="316.8" y="467.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,092 samples, 1.64%)</title><rect x="316.8" y="451.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.8" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (5,092 samples, 1.64%)</title><rect x="316.8" y="435.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (5,092 samples, 1.64%)</title><rect x="316.8" y="419.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (5,092 samples, 1.64%)</title><rect x="316.8" y="403.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (343 samples, 0.11%)</title><rect x="316.8" y="387.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.8" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (343 samples, 0.11%)</title><rect x="316.8" y="371.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="319.8" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (179 samples, 0.06%)</title><rect x="318.1" y="387.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="321.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (1,629 samples, 0.53%)</title><rect x="318.8" y="387.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (580 samples, 0.19%)</title><rect x="318.8" y="371.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (580 samples, 0.19%)</title><rect x="318.8" y="355.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.8" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (364 samples, 0.12%)</title><rect x="318.8" y="339.0" width="1.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="321.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (216 samples, 0.07%)</title><rect x="320.2" y="339.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.2" y="350.0"></text>
</g>
<g>
<title>byte[] (216 samples, 0.07%)</title><rect x="320.2" y="323.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="323.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (531 samples, 0.17%)</title><rect x="321.0" y="371.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (531 samples, 0.17%)</title><rect x="321.0" y="355.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (343 samples, 0.11%)</title><rect x="321.0" y="339.0" width="1.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="324.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (188 samples, 0.06%)</title><rect x="322.3" y="339.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.3" y="350.0"></text>
</g>
<g>
<title>byte[] (188 samples, 0.06%)</title><rect x="322.3" y="323.0" width="0.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="325.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (518 samples, 0.17%)</title><rect x="323.0" y="371.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (518 samples, 0.17%)</title><rect x="323.0" y="355.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (331 samples, 0.11%)</title><rect x="323.0" y="339.0" width="1.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="326.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (187 samples, 0.06%)</title><rect x="324.3" y="339.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.3" y="350.0"></text>
</g>
<g>
<title>byte[] (187 samples, 0.06%)</title><rect x="324.3" y="323.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="327.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (2,941 samples, 0.95%)</title><rect x="325.0" y="387.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.0" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (187 samples, 0.06%)</title><rect x="325.0" y="371.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="328.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (595 samples, 0.19%)</title><rect x="325.7" y="371.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (595 samples, 0.19%)</title><rect x="325.7" y="355.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.7" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (356 samples, 0.11%)</title><rect x="325.7" y="339.0" width="1.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="328.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (239 samples, 0.08%)</title><rect x="327.0" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.0" y="350.0"></text>
</g>
<g>
<title>byte[] (239 samples, 0.08%)</title><rect x="327.0" y="323.0" width="1.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="330.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (1,083 samples, 0.35%)</title><rect x="328.0" y="371.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,083 samples, 0.35%)</title><rect x="328.0" y="355.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (718 samples, 0.23%)</title><rect x="328.0" y="339.0" width="2.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="331.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (365 samples, 0.12%)</title><rect x="330.7" y="339.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="333.7" y="350.0"></text>
</g>
<g>
<title>byte[] (365 samples, 0.12%)</title><rect x="330.7" y="323.0" width="1.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="333.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (545 samples, 0.18%)</title><rect x="332.1" y="371.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (545 samples, 0.18%)</title><rect x="332.1" y="355.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.1" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (357 samples, 0.12%)</title><rect x="332.1" y="339.0" width="1.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="335.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (188 samples, 0.06%)</title><rect x="333.4" y="339.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.4" y="350.0"></text>
</g>
<g>
<title>byte[] (188 samples, 0.06%)</title><rect x="333.4" y="323.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="336.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (531 samples, 0.17%)</title><rect x="334.2" y="371.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (531 samples, 0.17%)</title><rect x="334.2" y="355.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.2" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (357 samples, 0.12%)</title><rect x="334.2" y="339.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="337.2" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (174 samples, 0.06%)</title><rect x="335.5" y="339.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="338.5" y="350.0"></text>
</g>
<g>
<title>byte[] (174 samples, 0.06%)</title><rect x="335.5" y="323.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="338.5" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (412 samples, 0.13%)</title><rect x="336.2" y="531.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="339.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (412 samples, 0.13%)</title><rect x="336.2" y="515.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (412 samples, 0.13%)</title><rect x="336.2" y="499.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (408 samples, 0.13%)</title><rect x="336.2" y="483.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.2" y="494.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (107 samples, 0.03%)</title><rect x="336.2" y="467.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="339.2" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (70 samples, 0.02%)</title><rect x="336.6" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (70 samples, 0.02%)</title><rect x="336.6" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (171 samples, 0.06%)</title><rect x="337.1" y="467.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.1" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (171 samples, 0.06%)</title><rect x="337.1" y="451.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="340.1" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (155 samples, 0.05%)</title><rect x="338.0" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.0" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (155 samples, 0.05%)</title><rect x="338.0" y="547.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="341.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (198 samples, 0.06%)</title><rect x="338.6" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.6" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (198 samples, 0.06%)</title><rect x="338.6" y="547.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="341.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,721 samples, 0.56%)</title><rect x="339.3" y="563.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,663 samples, 0.54%)</title><rect x="339.6" y="547.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,663 samples, 0.54%)</title><rect x="339.6" y="531.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.6" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,662 samples, 0.54%)</title><rect x="339.6" y="515.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,662 samples, 0.54%)</title><rect x="339.6" y="499.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,662 samples, 0.54%)</title><rect x="339.6" y="483.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,662 samples, 0.54%)</title><rect x="339.6" y="467.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,662 samples, 0.54%)</title><rect x="339.6" y="451.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,662 samples, 0.54%)</title><rect x="339.6" y="435.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,662 samples, 0.54%)</title><rect x="339.6" y="419.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,662 samples, 0.54%)</title><rect x="339.6" y="403.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,662 samples, 0.54%)</title><rect x="339.6" y="387.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (108 samples, 0.03%)</title><rect x="339.6" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (108 samples, 0.03%)</title><rect x="339.6" y="355.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="342.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (526 samples, 0.17%)</title><rect x="340.2" y="371.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (171 samples, 0.06%)</title><rect x="340.2" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (171 samples, 0.06%)</title><rect x="340.2" y="339.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (111 samples, 0.04%)</title><rect x="340.2" y="323.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="343.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (159 samples, 0.05%)</title><rect x="340.9" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (159 samples, 0.05%)</title><rect x="340.9" y="339.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.9" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (115 samples, 0.04%)</title><rect x="340.9" y="323.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="343.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (196 samples, 0.06%)</title><rect x="341.5" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (196 samples, 0.06%)</title><rect x="341.5" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.5" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (136 samples, 0.04%)</title><rect x="341.5" y="323.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="344.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (964 samples, 0.31%)</title><rect x="342.2" y="371.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (195 samples, 0.06%)</title><rect x="342.4" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (195 samples, 0.06%)</title><rect x="342.4" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (119 samples, 0.04%)</title><rect x="342.4" y="323.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="345.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (76 samples, 0.02%)</title><rect x="342.9" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.9" y="334.0"></text>
</g>
<g>
<title>byte[] (76 samples, 0.02%)</title><rect x="342.9" y="307.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="345.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (323 samples, 0.10%)</title><rect x="343.2" y="355.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (323 samples, 0.10%)</title><rect x="343.2" y="339.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="346.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (206 samples, 0.07%)</title><rect x="343.2" y="323.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="346.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (117 samples, 0.04%)</title><rect x="344.0" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.0" y="334.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.04%)</title><rect x="344.0" y="307.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="347.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (197 samples, 0.06%)</title><rect x="344.4" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (197 samples, 0.06%)</title><rect x="344.4" y="339.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (120 samples, 0.04%)</title><rect x="344.4" y="323.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="347.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (77 samples, 0.02%)</title><rect x="344.9" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.9" y="334.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.02%)</title><rect x="344.9" y="307.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="347.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (187 samples, 0.06%)</title><rect x="345.2" y="355.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (187 samples, 0.06%)</title><rect x="345.2" y="339.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (118 samples, 0.04%)</title><rect x="345.2" y="323.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="348.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (69 samples, 0.02%)</title><rect x="345.6" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="348.6" y="334.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.02%)</title><rect x="345.6" y="307.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="348.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (739 samples, 0.24%)</title><rect x="345.9" y="563.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.9" y="574.0"></text>
</g>
<g>
<title>java/util/Collection.stream (226 samples, 0.07%)</title><rect x="345.9" y="547.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (96 samples, 0.03%)</title><rect x="345.9" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.9" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (96 samples, 0.03%)</title><rect x="345.9" y="515.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="348.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (130 samples, 0.04%)</title><rect x="346.2" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.2" y="542.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (130 samples, 0.04%)</title><rect x="346.2" y="515.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="349.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (119 samples, 0.04%)</title><rect x="346.9" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (119 samples, 0.04%)</title><rect x="346.9" y="531.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (119 samples, 0.04%)</title><rect x="346.9" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.9" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (119 samples, 0.04%)</title><rect x="346.9" y="499.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="349.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (200 samples, 0.06%)</title><rect x="347.4" y="547.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="350.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (142 samples, 0.05%)</title><rect x="347.6" y="531.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (98 samples, 0.03%)</title><rect x="347.8" y="515.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.8" y="526.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (98 samples, 0.03%)</title><rect x="347.8" y="499.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="350.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (141 samples, 0.05%)</title><rect x="348.2" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.2" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (141 samples, 0.05%)</title><rect x="348.2" y="531.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="351.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (89,976 samples, 29.03%)</title><rect x="348.7" y="563.0" width="342.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.7" y="574.0">ru/mail/polis/dao/alexander/marashov/SSTable.i..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (558 samples, 0.18%)</title><rect x="348.7" y="547.0" width="2.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="351.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (89,418 samples, 28.85%)</title><rect x="350.8" y="547.0" width="340.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.8" y="558.0">ru/mail/polis/dao/alexander/marashov/SSTable$1..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (89,418 samples, 28.85%)</title><rect x="350.8" y="531.0" width="340.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.8" y="542.0">ru/mail/polis/dao/alexander/marashov/SSTable.b..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (89,418 samples, 28.85%)</title><rect x="350.8" y="515.0" width="340.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.8" y="526.0">ru/mail/polis/dao/alexander/marashov/SSTable.key</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (31,527 samples, 10.17%)</title><rect x="350.8" y="499.0" width="120.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.8" y="510.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (31,527 samples, 10.17%)</title><rect x="350.8" y="483.0" width="120.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.8" y="494.0">java/nio/ByteBu..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19,112 samples, 6.17%)</title><rect x="350.8" y="467.0" width="72.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="353.8" y="478.0">java.nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12,415 samples, 4.01%)</title><rect x="423.6" y="467.0" width="47.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.6" y="478.0">java..</text>
</g>
<g>
<title>byte[] (12,415 samples, 4.01%)</title><rect x="423.6" y="451.0" width="47.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="426.6" y="462.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (29,234 samples, 9.43%)</title><rect x="470.9" y="499.0" width="111.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.9" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (29,234 samples, 9.43%)</title><rect x="470.9" y="483.0" width="111.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.9" y="494.0">java/nio/Byte..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19,415 samples, 6.26%)</title><rect x="470.9" y="467.0" width="73.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="473.9" y="478.0">java.nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9,819 samples, 3.17%)</title><rect x="544.8" y="467.0" width="37.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="547.8" y="478.0">jav..</text>
</g>
<g>
<title>byte[] (9,819 samples, 3.17%)</title><rect x="544.8" y="451.0" width="37.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="547.8" y="462.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (28,657 samples, 9.25%)</title><rect x="582.2" y="499.0" width="109.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.2" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (28,657 samples, 9.25%)</title><rect x="582.2" y="483.0" width="109.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="585.2" y="494.0">java/nio/Byte..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (19,112 samples, 6.17%)</title><rect x="582.2" y="467.0" width="72.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="585.2" y="478.0">java.nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9,545 samples, 3.08%)</title><rect x="655.0" y="467.0" width="36.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="658.0" y="478.0">jav..</text>
</g>
<g>
<title>byte[] (9,545 samples, 3.08%)</title><rect x="655.0" y="451.0" width="36.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="658.0" y="462.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (3,031 samples, 0.98%)</title><rect x="691.3" y="595.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.3" y="606.0"></text>
</g>
<g>
<title>byte[] (103 samples, 0.03%)</title><rect x="691.3" y="579.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="694.3" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.CalcSizeStream (104 samples, 0.03%)</title><rect x="691.7" y="579.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="694.7" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,252 samples, 0.40%)</title><rect x="692.2" y="579.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.2" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (1,252 samples, 0.40%)</title><rect x="692.2" y="563.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.2" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (1,252 samples, 0.40%)</title><rect x="692.2" y="547.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.2" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,252 samples, 0.40%)</title><rect x="692.2" y="531.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.2" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,252 samples, 0.40%)</title><rect x="692.2" y="515.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="695.2" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,252 samples, 0.40%)</title><rect x="692.2" y="499.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.2" y="510.0"></text>
</g>
<g>
<title>int[] (674 samples, 0.22%)</title><rect x="692.2" y="483.0" width="2.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="695.2" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (578 samples, 0.19%)</title><rect x="694.8" y="483.0" width="2.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="697.8" y="494.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.&lt;init&gt; (89 samples, 0.03%)</title><rect x="697.0" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.0" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.SerializationContext (89 samples, 0.03%)</title><rect x="697.0" y="563.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="700.0" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,330 samples, 0.43%)</title><rect x="697.4" y="579.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.4" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (1,330 samples, 0.43%)</title><rect x="697.4" y="563.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.4" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (1,330 samples, 0.43%)</title><rect x="697.4" y="547.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="700.4" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,330 samples, 0.43%)</title><rect x="697.4" y="531.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.4" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,330 samples, 0.43%)</title><rect x="697.4" y="515.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.4" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,330 samples, 0.43%)</title><rect x="697.4" y="499.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.4" y="510.0"></text>
</g>
<g>
<title>int[] (686 samples, 0.22%)</title><rect x="697.4" y="483.0" width="2.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="700.4" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (644 samples, 0.21%)</title><rect x="700.0" y="483.0" width="2.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="703.0" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValueSerializer$SerializableValue (67 samples, 0.02%)</title><rect x="702.4" y="579.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="705.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (770 samples, 0.25%)</title><rect x="702.8" y="611.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="705.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (694 samples, 0.22%)</title><rect x="702.8" y="595.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (694 samples, 0.22%)</title><rect x="702.8" y="579.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$130/77195045.get$Lambda (694 samples, 0.22%)</title><rect x="702.8" y="563.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.8" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$130 (694 samples, 0.22%)</title><rect x="702.8" y="547.0" width="2.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="705.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (76 samples, 0.02%)</title><rect x="705.5" y="595.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="708.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (76 samples, 0.02%)</title><rect x="705.5" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (76 samples, 0.02%)</title><rect x="705.5" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="708.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (76 samples, 0.02%)</title><rect x="705.5" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (76 samples, 0.02%)</title><rect x="705.5" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="708.5" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (76 samples, 0.02%)</title><rect x="705.5" y="515.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="708.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (1,480 samples, 0.48%)</title><rect x="705.8" y="611.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,480 samples, 0.48%)</title><rect x="705.8" y="595.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="708.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,480 samples, 0.48%)</title><rect x="705.8" y="579.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.8" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,480 samples, 0.48%)</title><rect x="705.8" y="563.0" width="5.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="708.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (9,141 samples, 2.95%)</title><rect x="711.4" y="611.0" width="34.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.4" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateGetResult (9,138 samples, 2.95%)</title><rect x="711.4" y="595.0" width="34.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="714.4" y="606.0">ru..</text>
</g>
<g>
<title>java/util/HashMap.entrySet (2,150 samples, 0.69%)</title><rect x="711.4" y="579.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.4" y="590.0"></text>
</g>
<g>
<title>java.util.HashMap$EntrySet (2,150 samples, 0.69%)</title><rect x="711.4" y="563.0" width="8.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="714.4" y="574.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,885 samples, 0.61%)</title><rect x="719.6" y="579.0" width="7.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="722.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5,103 samples, 1.65%)</title><rect x="726.8" y="579.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.8" y="590.0"></text>
</g>
<g>
<title>byte[] (335 samples, 0.11%)</title><rect x="726.8" y="563.0" width="1.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="729.8" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (2,557 samples, 0.83%)</title><rect x="728.1" y="563.0" width="9.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="731.1" y="574.0"></text>
</g>
<g>
<title>java.lang.String (2,211 samples, 0.71%)</title><rect x="737.8" y="563.0" width="8.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="740.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.&lt;init&gt; (4,712 samples, 1.52%)</title><rect x="746.2" y="611.0" width="17.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="749.2" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap (1,932 samples, 0.62%)</title><rect x="746.2" y="595.0" width="7.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="749.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (2,780 samples, 0.90%)</title><rect x="753.6" y="595.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.6" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (71 samples, 0.02%)</title><rect x="753.6" y="579.0" width="0.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="756.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (2,203 samples, 0.71%)</title><rect x="753.8" y="579.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.8" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (2,203 samples, 0.71%)</title><rect x="753.8" y="563.0" width="8.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="756.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (506 samples, 0.16%)</title><rect x="762.2" y="579.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (506 samples, 0.16%)</title><rect x="762.2" y="563.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.2" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (506 samples, 0.16%)</title><rect x="762.2" y="547.0" width="1.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="765.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (4,293 samples, 1.39%)</title><rect x="764.1" y="611.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="767.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (4,293 samples, 1.39%)</title><rect x="764.1" y="595.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.1" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (1,455 samples, 0.47%)</title><rect x="764.1" y="579.0" width="5.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="767.1" y="590.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (269 samples, 0.09%)</title><rect x="769.7" y="579.0" width="1.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="772.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1,584 samples, 0.51%)</title><rect x="770.7" y="579.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1,584 samples, 0.51%)</title><rect x="770.7" y="563.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.7" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,584 samples, 0.51%)</title><rect x="770.7" y="547.0" width="6.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="773.7" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (985 samples, 0.32%)</title><rect x="776.7" y="579.0" width="3.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="779.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (3,418 samples, 1.10%)</title><rect x="780.5" y="627.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,418 samples, 1.10%)</title><rect x="780.5" y="611.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3,418 samples, 1.10%)</title><rect x="780.5" y="595.0" width="13.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,140 samples, 0.69%)</title><rect x="780.5" y="579.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,140 samples, 0.69%)</title><rect x="780.5" y="563.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.5" y="574.0"></text>
</g>
<g>
<title>byte[] (875 samples, 0.28%)</title><rect x="780.5" y="547.0" width="3.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="783.5" y="558.0"></text>
</g>
<g>
<title>byte[] (1,265 samples, 0.41%)</title><rect x="783.8" y="547.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="786.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,278 samples, 0.41%)</title><rect x="788.6" y="579.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="791.6" y="590.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,278 samples, 0.41%)</title><rect x="788.6" y="563.0" width="4.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="791.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (20,536 samples, 6.63%)</title><rect x="793.5" y="627.0" width="78.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.5" y="638.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.getBytes (3,142 samples, 1.01%)</title><rect x="793.5" y="611.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3,142 samples, 1.01%)</title><rect x="793.5" y="595.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3,142 samples, 1.01%)</title><rect x="793.5" y="579.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.5" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3,142 samples, 1.01%)</title><rect x="793.5" y="563.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.5" y="574.0"></text>
</g>
<g>
<title>byte[] (3,142 samples, 1.01%)</title><rect x="793.5" y="547.0" width="12.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="796.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,428 samples, 0.78%)</title><rect x="805.5" y="611.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="808.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,428 samples, 0.78%)</title><rect x="805.5" y="595.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.5" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,428 samples, 0.78%)</title><rect x="805.5" y="579.0" width="9.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="808.5" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (514 samples, 0.17%)</title><rect x="814.7" y="611.0" width="2.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="817.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (14,452 samples, 4.66%)</title><rect x="816.7" y="611.0" width="55.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.7" y="622.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (6,421 samples, 2.07%)</title><rect x="816.7" y="595.0" width="24.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.7" y="606.0">c..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (3,355 samples, 1.08%)</title><rect x="816.7" y="579.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.7" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (3,355 samples, 1.08%)</title><rect x="816.7" y="563.0" width="12.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="819.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (3,066 samples, 0.99%)</title><rect x="829.5" y="579.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="832.5" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (300 samples, 0.10%)</title><rect x="829.5" y="563.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="832.5" y="574.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (2,766 samples, 0.89%)</title><rect x="830.6" y="563.0" width="10.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="833.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (8,031 samples, 2.59%)</title><rect x="841.1" y="595.0" width="30.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="844.1" y="606.0">co..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (3,604 samples, 1.16%)</title><rect x="841.1" y="579.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (3,604 samples, 1.16%)</title><rect x="841.1" y="563.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (3,604 samples, 1.16%)</title><rect x="841.1" y="547.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (3,604 samples, 1.16%)</title><rect x="841.1" y="531.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (3,604 samples, 1.16%)</title><rect x="841.1" y="515.0" width="13.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="844.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,604 samples, 1.16%)</title><rect x="841.1" y="499.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,604 samples, 1.16%)</title><rect x="841.1" y="483.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.1" y="494.0"></text>
</g>
<g>
<title>java.lang.String (896 samples, 0.29%)</title><rect x="841.1" y="467.0" width="3.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="844.1" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,708 samples, 0.87%)</title><rect x="844.5" y="467.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.5" y="478.0"></text>
</g>
<g>
<title>byte[] (2,708 samples, 0.87%)</title><rect x="844.5" y="451.0" width="10.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="847.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (2,641 samples, 0.85%)</title><rect x="854.8" y="579.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.8" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (2,641 samples, 0.85%)</title><rect x="854.8" y="563.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="857.8" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (2,641 samples, 0.85%)</title><rect x="854.8" y="547.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="857.8" y="558.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (2,641 samples, 0.85%)</title><rect x="854.8" y="531.0" width="10.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="857.8" y="542.0"></text>
</g>
<g>
<title>java.util.ArrayList (142 samples, 0.05%)</title><rect x="864.9" y="579.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="867.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (999 samples, 0.32%)</title><rect x="865.4" y="579.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (999 samples, 0.32%)</title><rect x="865.4" y="563.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.4" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (999 samples, 0.32%)</title><rect x="865.4" y="547.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.4" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (999 samples, 0.32%)</title><rect x="865.4" y="531.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.4" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (999 samples, 0.32%)</title><rect x="865.4" y="515.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.4" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (953 samples, 0.31%)</title><rect x="865.4" y="499.0" width="3.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="868.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (645 samples, 0.21%)</title><rect x="869.2" y="579.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="872.2" y="590.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (645 samples, 0.21%)</title><rect x="869.2" y="563.0" width="2.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="872.2" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (3,115 samples, 1.01%)</title><rect x="871.7" y="659.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.7" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3,115 samples, 1.01%)</title><rect x="871.7" y="643.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="874.7" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$108/785376788.run (3,115 samples, 1.01%)</title><rect x="871.7" y="627.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.7" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (3,115 samples, 1.01%)</title><rect x="871.7" y="611.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.7" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (3,115 samples, 1.01%)</title><rect x="871.7" y="595.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.7" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (3,115 samples, 1.01%)</title><rect x="871.7" y="579.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.7" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (3,065 samples, 0.99%)</title><rect x="871.9" y="563.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="874.9" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,970 samples, 0.96%)</title><rect x="871.9" y="547.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.9" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,970 samples, 0.96%)</title><rect x="871.9" y="531.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.9" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,970 samples, 0.96%)</title><rect x="871.9" y="515.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.9" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (2,970 samples, 0.96%)</title><rect x="871.9" y="499.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.9" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,945 samples, 0.63%)</title><rect x="871.9" y="483.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,945 samples, 0.63%)</title><rect x="871.9" y="467.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,927 samples, 0.62%)</title><rect x="871.9" y="451.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="874.9" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,927 samples, 0.62%)</title><rect x="871.9" y="435.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="874.9" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,854 samples, 0.60%)</title><rect x="871.9" y="419.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,854 samples, 0.60%)</title><rect x="871.9" y="403.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.9" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,854 samples, 0.60%)</title><rect x="871.9" y="387.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="874.9" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,854 samples, 0.60%)</title><rect x="871.9" y="371.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.9" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,854 samples, 0.60%)</title><rect x="871.9" y="355.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="874.9" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,854 samples, 0.60%)</title><rect x="871.9" y="339.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="874.9" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,854 samples, 0.60%)</title><rect x="871.9" y="323.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.9" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,854 samples, 0.60%)</title><rect x="871.9" y="307.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,854 samples, 0.60%)</title><rect x="871.9" y="291.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.9" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,854 samples, 0.60%)</title><rect x="871.9" y="275.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.9" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,854 samples, 0.60%)</title><rect x="871.9" y="259.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="874.9" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,854 samples, 0.60%)</title><rect x="871.9" y="243.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,854 samples, 0.60%)</title><rect x="871.9" y="227.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.9" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,677 samples, 0.54%)</title><rect x="871.9" y="211.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1,677 samples, 0.54%)</title><rect x="871.9" y="195.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.9" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,674 samples, 0.54%)</title><rect x="871.9" y="179.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.9" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1,674 samples, 0.54%)</title><rect x="871.9" y="163.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="874.9" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (621 samples, 0.20%)</title><rect x="871.9" y="147.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="874.9" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (525 samples, 0.17%)</title><rect x="871.9" y="131.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.9" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (478 samples, 0.15%)</title><rect x="871.9" y="115.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="874.9" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (478 samples, 0.15%)</title><rect x="871.9" y="99.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="874.9" y="110.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (287 samples, 0.09%)</title><rect x="872.1" y="83.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.1" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (237 samples, 0.08%)</title><rect x="872.3" y="67.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.3" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (205 samples, 0.07%)</title><rect x="872.4" y="51.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.4" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (205 samples, 0.07%)</title><rect x="872.4" y="35.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="875.4" y="46.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (153 samples, 0.05%)</title><rect x="873.2" y="83.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="876.2" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (153 samples, 0.05%)</title><rect x="873.2" y="67.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="876.2" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (96 samples, 0.03%)</title><rect x="873.9" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.9" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (561 samples, 0.18%)</title><rect x="874.5" y="147.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.5" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (68 samples, 0.02%)</title><rect x="874.5" y="131.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="877.5" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (493 samples, 0.16%)</title><rect x="874.8" y="131.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.8" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (459 samples, 0.15%)</title><rect x="874.9" y="115.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="877.9" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (459 samples, 0.15%)</title><rect x="874.9" y="99.0" width="1.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="877.9" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (431 samples, 0.14%)</title><rect x="876.7" y="147.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="879.7" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (380 samples, 0.12%)</title><rect x="876.7" y="131.0" width="1.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="879.7" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (177 samples, 0.06%)</title><rect x="878.3" y="211.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.3" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (177 samples, 0.06%)</title><rect x="878.3" y="195.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (177 samples, 0.06%)</title><rect x="878.3" y="179.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="881.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (177 samples, 0.06%)</title><rect x="878.3" y="163.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="881.3" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (177 samples, 0.06%)</title><rect x="878.3" y="147.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.3" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (177 samples, 0.06%)</title><rect x="878.3" y="131.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="881.3" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (177 samples, 0.06%)</title><rect x="878.3" y="115.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="881.3" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (177 samples, 0.06%)</title><rect x="878.3" y="99.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.3" y="110.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (177 samples, 0.06%)</title><rect x="878.3" y="83.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.3" y="94.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (173 samples, 0.06%)</title><rect x="878.3" y="67.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.3" y="78.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (69 samples, 0.02%)</title><rect x="879.0" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="882.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (751 samples, 0.24%)</title><rect x="879.3" y="483.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="882.3" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (751 samples, 0.24%)</title><rect x="879.3" y="467.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.3" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (751 samples, 0.24%)</title><rect x="879.3" y="451.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="882.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (749 samples, 0.24%)</title><rect x="879.3" y="435.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.3" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (749 samples, 0.24%)</title><rect x="879.3" y="419.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.3" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (720 samples, 0.23%)</title><rect x="879.3" y="403.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="882.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (687 samples, 0.22%)</title><rect x="879.4" y="387.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (687 samples, 0.22%)</title><rect x="879.4" y="371.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (674 samples, 0.22%)</title><rect x="879.5" y="355.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="882.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (651 samples, 0.21%)</title><rect x="879.5" y="339.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="882.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (609 samples, 0.20%)</title><rect x="879.6" y="323.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.6" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (561 samples, 0.18%)</title><rect x="879.8" y="307.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.8" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (543 samples, 0.18%)</title><rect x="879.9" y="291.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="882.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (543 samples, 0.18%)</title><rect x="879.9" y="275.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (543 samples, 0.18%)</title><rect x="879.9" y="259.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="882.9" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (543 samples, 0.18%)</title><rect x="879.9" y="243.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="882.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (519 samples, 0.17%)</title><rect x="879.9" y="227.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="882.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (519 samples, 0.17%)</title><rect x="879.9" y="211.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="882.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (221 samples, 0.07%)</title><rect x="879.9" y="195.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="882.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (212 samples, 0.07%)</title><rect x="880.0" y="179.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="883.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (192 samples, 0.06%)</title><rect x="880.0" y="163.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (182 samples, 0.06%)</title><rect x="880.0" y="147.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.0" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (182 samples, 0.06%)</title><rect x="880.0" y="131.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.0" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (161 samples, 0.05%)</title><rect x="880.1" y="115.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="883.1" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (135 samples, 0.04%)</title><rect x="880.1" y="99.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.1" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (67 samples, 0.02%)</title><rect x="880.1" y="83.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="883.1" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (68 samples, 0.02%)</title><rect x="880.4" y="83.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="883.4" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (119 samples, 0.04%)</title><rect x="880.8" y="195.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.8" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (79 samples, 0.03%)</title><rect x="880.9" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="883.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (79 samples, 0.03%)</title><rect x="880.9" y="163.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.9" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (167 samples, 0.05%)</title><rect x="881.3" y="195.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.3" y="206.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (167 samples, 0.05%)</title><rect x="881.3" y="179.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="884.3" y="190.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (92 samples, 0.03%)</title><rect x="882.2" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (92 samples, 0.03%)</title><rect x="882.2" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="885.2" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (92 samples, 0.03%)</title><rect x="882.2" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="885.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (92 samples, 0.03%)</title><rect x="882.2" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="885.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (67 samples, 0.02%)</title><rect x="882.3" y="419.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="885.3" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (181 samples, 0.06%)</title><rect x="882.5" y="483.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.5" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (180 samples, 0.06%)</title><rect x="882.5" y="467.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="885.5" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (176 samples, 0.06%)</title><rect x="882.5" y="451.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="885.5" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (176 samples, 0.06%)</title><rect x="882.5" y="435.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="885.5" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (176 samples, 0.06%)</title><rect x="882.5" y="419.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="885.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (175 samples, 0.06%)</title><rect x="882.5" y="403.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.5" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (103 samples, 0.03%)</title><rect x="882.6" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="885.6" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (90 samples, 0.03%)</title><rect x="883.2" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="886.2" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (87 samples, 0.03%)</title><rect x="883.2" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="886.2" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (87 samples, 0.03%)</title><rect x="883.2" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (87 samples, 0.03%)</title><rect x="883.2" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="886.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (68 samples, 0.02%)</title><rect x="883.3" y="483.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="886.3" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (80,479 samples, 25.97%)</title><rect x="883.6" y="707.0" width="306.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.6" y="718.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,470 samples, 0.80%)</title><rect x="883.6" y="691.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="886.6" y="702.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,470 samples, 0.80%)</title><rect x="883.6" y="675.0" width="9.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="886.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (78,009 samples, 25.17%)</title><rect x="893.0" y="691.0" width="297.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="896.0" y="702.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (78,009 samples, 25.17%)</title><rect x="893.0" y="675.0" width="297.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.0" y="686.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (78,009 samples, 25.17%)</title><rect x="893.0" y="659.0" width="297.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="896.0" y="670.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (16,905 samples, 5.45%)</title><rect x="893.0" y="643.0" width="64.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.0" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (16,905 samples, 5.45%)</title><rect x="893.0" y="627.0" width="64.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="896.0" y="638.0">one/nio..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (7,042 samples, 2.27%)</title><rect x="893.0" y="611.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.0" y="622.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,277 samples, 0.73%)</title><rect x="893.0" y="595.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,277 samples, 0.73%)</title><rect x="893.0" y="579.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="896.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,277 samples, 0.73%)</title><rect x="893.0" y="563.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="896.0" y="574.0"></text>
</g>
<g>
<title>java.lang.String (1,185 samples, 0.38%)</title><rect x="893.0" y="547.0" width="4.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="896.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,092 samples, 0.35%)</title><rect x="897.5" y="547.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.5" y="558.0"></text>
</g>
<g>
<title>byte[] (1,092 samples, 0.35%)</title><rect x="897.5" y="531.0" width="4.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="900.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3,013 samples, 0.97%)</title><rect x="901.6" y="595.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,013 samples, 0.97%)</title><rect x="901.6" y="579.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="904.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,013 samples, 0.97%)</title><rect x="901.6" y="563.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="904.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,013 samples, 0.97%)</title><rect x="901.6" y="547.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.6" y="558.0"></text>
</g>
<g>
<title>java.lang.String (891 samples, 0.29%)</title><rect x="901.6" y="531.0" width="3.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="904.6" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,122 samples, 0.68%)</title><rect x="905.0" y="531.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.0" y="542.0"></text>
</g>
<g>
<title>byte[] (2,122 samples, 0.68%)</title><rect x="905.0" y="515.0" width="8.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="908.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (1,752 samples, 0.57%)</title><rect x="913.1" y="595.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="916.1" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1876592442.linkToTargetMethod (1,700 samples, 0.55%)</title><rect x="913.1" y="579.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.1" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,700 samples, 0.55%)</title><rect x="913.1" y="563.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$152/54338970.get$Lambda (1,700 samples, 0.55%)</title><rect x="913.1" y="547.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="916.1" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$152 (1,700 samples, 0.55%)</title><rect x="913.1" y="531.0" width="6.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="916.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9,863 samples, 3.18%)</title><rect x="919.8" y="611.0" width="37.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.8" y="622.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (9,863 samples, 3.18%)</title><rect x="919.8" y="595.0" width="37.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.8" y="606.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9,863 samples, 3.18%)</title><rect x="919.8" y="579.0" width="37.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.8" y="590.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,603 samples, 0.52%)</title><rect x="919.8" y="563.0" width="6.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="922.8" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8,260 samples, 2.67%)</title><rect x="925.9" y="563.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.9" y="574.0">ja..</text>
</g>
<g>
<title>byte[] (8,260 samples, 2.67%)</title><rect x="925.9" y="547.0" width="31.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="928.9" y="558.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (44,208 samples, 14.27%)</title><rect x="957.3" y="643.0" width="168.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.3" y="654.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one.nio.http.Request (4,902 samples, 1.58%)</title><rect x="957.3" y="627.0" width="18.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="960.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7,029 samples, 2.27%)</title><rect x="976.0" y="627.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.0" y="638.0">o..</text>
</g>
<g>
<title>java.lang.String[] (3,863 samples, 1.25%)</title><rect x="976.0" y="611.0" width="14.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="979.0" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (3,166 samples, 1.02%)</title><rect x="990.7" y="611.0" width="12.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="993.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32,277 samples, 10.42%)</title><rect x="1002.8" y="627.0" width="122.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.8" y="638.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (32,277 samples, 10.42%)</title><rect x="1002.8" y="611.0" width="122.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.8" y="622.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (10,784 samples, 3.48%)</title><rect x="1002.8" y="595.0" width="41.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1005.8" y="606.0">cha..</text>
</g>
<g>
<title>char[] (5,391 samples, 1.74%)</title><rect x="1043.8" y="595.0" width="20.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1046.8" y="606.0"></text>
</g>
<g>
<title>java.lang.String (1,646 samples, 0.53%)</title><rect x="1064.4" y="595.0" width="6.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1067.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14,456 samples, 4.66%)</title><rect x="1070.6" y="595.0" width="55.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1073.6" y="606.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14,456 samples, 4.66%)</title><rect x="1070.6" y="579.0" width="55.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.6" y="590.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (14,456 samples, 4.66%)</title><rect x="1070.6" y="563.0" width="55.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.6" y="574.0">java/..</text>
</g>
<g>
<title>byte[] (14,064 samples, 4.54%)</title><rect x="1070.6" y="547.0" width="53.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1073.6" y="558.0">byte[]</text>
</g>
<g>
<title>byte[] (392 samples, 0.13%)</title><rect x="1124.2" y="547.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1127.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,896 samples, 5.45%)</title><rect x="1125.7" y="643.0" width="64.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.7" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,896 samples, 5.45%)</title><rect x="1125.7" y="627.0" width="64.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1128.7" y="638.0">one/nio..</text>
</g>
<g>
<title>char[] (8,033 samples, 2.59%)</title><rect x="1125.7" y="611.0" width="30.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1128.7" y="622.0">ch..</text>
</g>
<g>
<title>char[] (603 samples, 0.19%)</title><rect x="1156.3" y="611.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1159.3" y="622.0"></text>
</g>
<g>
<title>java.lang.String (3,808 samples, 1.23%)</title><rect x="1158.5" y="611.0" width="14.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1161.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,452 samples, 1.44%)</title><rect x="1173.0" y="611.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1176.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,452 samples, 1.44%)</title><rect x="1173.0" y="595.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1176.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,452 samples, 1.44%)</title><rect x="1173.0" y="579.0" width="17.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1176.0" y="590.0"></text>
</g>
<g>
<title>byte[] (4,452 samples, 1.44%)</title><rect x="1173.0" y="563.0" width="17.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1176.0" y="574.0"></text>
</g>
</g>
</svg>
