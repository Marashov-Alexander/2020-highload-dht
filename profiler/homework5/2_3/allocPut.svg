<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (72,270 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (52,536 samples, 72.69%)</title><rect x="10.1" y="739.0" width="857.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (25 samples, 0.03%)</title><rect x="10.1" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.1" y="734.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (25 samples, 0.03%)</title><rect x="10.1" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/507023607.linkToTargetMethod (25 samples, 0.03%)</title><rect x="10.1" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1541714150.invoke (25 samples, 0.03%)</title><rect x="10.1" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (25 samples, 0.03%)</title><rect x="10.1" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52,511 samples, 72.66%)</title><rect x="10.5" y="723.0" width="857.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.5" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52,511 samples, 72.66%)</title><rect x="10.5" y="707.0" width="857.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.5" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,251 samples, 1.73%)</title><rect x="10.5" y="691.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,251 samples, 1.73%)</title><rect x="10.5" y="675.0" width="20.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,226 samples, 1.70%)</title><rect x="10.5" y="659.0" width="20.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,226 samples, 1.70%)</title><rect x="10.5" y="643.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.5" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,226 samples, 1.70%)</title><rect x="10.5" y="627.0" width="20.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (25 samples, 0.03%)</title><rect x="30.5" y="659.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (25 samples, 0.03%)</title><rect x="30.5" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (25 samples, 0.03%)</title><rect x="30.5" y="627.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (25 samples, 0.03%)</title><rect x="30.5" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.5" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (25 samples, 0.03%)</title><rect x="30.5" y="595.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="33.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$77/1379583237.run (155 samples, 0.21%)</title><rect x="30.9" y="691.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$2 (155 samples, 0.21%)</title><rect x="30.9" y="675.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (155 samples, 0.21%)</title><rect x="30.9" y="659.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (31 samples, 0.04%)</title><rect x="31.1" y="643.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (113 samples, 0.16%)</title><rect x="31.6" y="643.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.6" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (85 samples, 0.12%)</title><rect x="31.6" y="627.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.6" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (85 samples, 0.12%)</title><rect x="31.6" y="611.0" width="1.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="34.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.upsert (19 samples, 0.03%)</title><rect x="33.2" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$86/914604914.run (21,773 samples, 30.13%)</title><rect x="33.5" y="691.0" width="355.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.5" y="702.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (21,773 samples, 30.13%)</title><rect x="33.5" y="675.0" width="355.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.5" y="686.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$81/1316063782.accept (21,773 samples, 30.13%)</title><rect x="33.5" y="659.0" width="355.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.5" y="670.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$3 (21,773 samples, 30.13%)</title><rect x="33.5" y="643.0" width="355.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="654.0">ru/mail/polis/service/alexander/marashov/Respons..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (21,757 samples, 30.11%)</title><rect x="33.5" y="627.0" width="355.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.5" y="638.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (21,757 samples, 30.11%)</title><rect x="33.5" y="611.0" width="355.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.5" y="622.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (37 samples, 0.05%)</title><rect x="33.5" y="595.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="36.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (20,801 samples, 28.78%)</title><rect x="34.1" y="595.0" width="339.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.1" y="606.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (7,563 samples, 10.46%)</title><rect x="34.1" y="579.0" width="123.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="37.1" y="590.0">byte[]</text>
</g>
<g>
<title>byte[] (13,238 samples, 18.32%)</title><rect x="157.6" y="579.0" width="216.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="160.6" y="590.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (665 samples, 0.92%)</title><rect x="373.7" y="595.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (25 samples, 0.03%)</title><rect x="373.9" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (25 samples, 0.03%)</title><rect x="373.9" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (570 samples, 0.79%)</title><rect x="374.4" y="579.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.4" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (570 samples, 0.79%)</title><rect x="374.4" y="563.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (570 samples, 0.79%)</title><rect x="374.4" y="547.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.4" y="558.0"></text>
</g>
<g>
<title>char[] (411 samples, 0.57%)</title><rect x="374.4" y="531.0" width="6.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="377.4" y="542.0"></text>
</g>
<g>
<title>java.lang.String (90 samples, 0.12%)</title><rect x="381.1" y="531.0" width="1.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="384.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (69 samples, 0.10%)</title><rect x="382.5" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (69 samples, 0.10%)</title><rect x="382.5" y="515.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (69 samples, 0.10%)</title><rect x="382.5" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.5" y="510.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.10%)</title><rect x="382.5" y="483.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="385.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (22 samples, 0.03%)</title><rect x="383.7" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.7" y="590.0"></text>
</g>
<g>
<title>java.lang.String[] (22 samples, 0.03%)</title><rect x="383.7" y="563.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="386.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (33 samples, 0.05%)</title><rect x="384.0" y="579.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (33 samples, 0.05%)</title><rect x="384.0" y="563.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (33 samples, 0.05%)</title><rect x="384.0" y="547.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.0" y="558.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.02%)</title><rect x="384.0" y="531.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="387.0" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 0.02%)</title><rect x="384.3" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.3" y="542.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.02%)</title><rect x="384.3" y="515.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="387.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (201 samples, 0.28%)</title><rect x="384.6" y="595.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (201 samples, 0.28%)</title><rect x="384.6" y="579.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.6" y="590.0"></text>
</g>
<g>
<title>byte[] (201 samples, 0.28%)</title><rect x="384.6" y="563.0" width="3.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="387.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (36 samples, 0.05%)</title><rect x="387.9" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (36 samples, 0.05%)</title><rect x="387.9" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.9" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (36 samples, 0.05%)</title><rect x="387.9" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.9" y="574.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.03%)</title><rect x="387.9" y="547.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="390.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 0.02%)</title><rect x="388.2" y="547.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.2" y="558.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.02%)</title><rect x="388.2" y="531.0" width="0.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="391.2" y="542.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (17 samples, 0.02%)</title><rect x="388.4" y="595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.4" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (17 samples, 0.02%)</title><rect x="388.4" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.4" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (17 samples, 0.02%)</title><rect x="388.4" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.4" y="574.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (17 samples, 0.02%)</title><rect x="388.4" y="547.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="391.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (16 samples, 0.02%)</title><rect x="388.7" y="627.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.signalAll (16 samples, 0.02%)</title><rect x="388.7" y="611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signalAll (16 samples, 0.02%)</title><rect x="388.7" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignalAll (16 samples, 0.02%)</title><rect x="388.7" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 0.02%)</title><rect x="388.7" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (16 samples, 0.02%)</title><rect x="388.7" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.initializeSyncQueue (16 samples, 0.02%)</title><rect x="388.7" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.7" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (16 samples, 0.02%)</title><rect x="388.7" y="515.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="391.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/54338970.run (28,491 samples, 39.42%)</title><rect x="389.0" y="691.0" width="465.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.0" y="702.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityPut$3 (28,491 samples, 39.42%)</title><rect x="389.0" y="675.0" width="465.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.0" y="686.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$hand..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,474 samples, 2.04%)</title><rect x="389.0" y="659.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="392.0" y="670.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,474 samples, 2.04%)</title><rect x="389.0" y="643.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.0" y="654.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,474 samples, 2.04%)</title><rect x="389.0" y="627.0" width="24.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="392.0" y="638.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.put (11,501 samples, 15.91%)</title><rect x="413.0" y="659.0" width="187.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.0" y="670.0">ru/mail/polis/service/al..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (480 samples, 0.66%)</title><rect x="413.0" y="643.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (480 samples, 0.66%)</title><rect x="413.0" y="627.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$77/1379583237.get$Lambda (270 samples, 0.37%)</title><rect x="413.0" y="611.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.0" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$77 (270 samples, 0.37%)</title><rect x="413.0" y="595.0" width="4.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="416.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$81/1316063782.get$Lambda (210 samples, 0.29%)</title><rect x="417.5" y="611.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.5" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$81 (210 samples, 0.29%)</title><rect x="417.5" y="595.0" width="3.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="420.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,051 samples, 1.45%)</title><rect x="420.9" y="643.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,051 samples, 1.45%)</title><rect x="420.9" y="627.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.9" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,051 samples, 1.45%)</title><rect x="420.9" y="611.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="423.9" y="622.0"></text>
</g>
<g>
<title>java.lang.String (490 samples, 0.68%)</title><rect x="420.9" y="595.0" width="8.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="423.9" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (561 samples, 0.78%)</title><rect x="428.9" y="595.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.9" y="606.0"></text>
</g>
<g>
<title>byte[] (561 samples, 0.78%)</title><rect x="428.9" y="579.0" width="9.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="431.9" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.SimpleResponseAnalyzer (442 samples, 0.61%)</title><rect x="438.0" y="643.0" width="7.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="441.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (5,907 samples, 8.17%)</title><rect x="445.3" y="643.0" width="96.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="448.3" y="654.0">ru/mail/pol..</text>
</g>
<g>
<title>one.nio.http.Response (517 samples, 0.72%)</title><rect x="445.3" y="627.0" width="8.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="448.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,065 samples, 2.86%)</title><rect x="453.7" y="627.0" width="33.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.7" y="638.0">on..</text>
</g>
<g>
<title>byte[] (843 samples, 1.17%)</title><rect x="453.7" y="611.0" width="13.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="456.7" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (704 samples, 0.97%)</title><rect x="467.5" y="611.0" width="11.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="470.5" y="622.0"></text>
</g>
<g>
<title>java.lang.String (518 samples, 0.72%)</title><rect x="479.0" y="611.0" width="8.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="482.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (3,325 samples, 4.60%)</title><rect x="487.4" y="627.0" width="54.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.4" y="638.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,961 samples, 2.71%)</title><rect x="487.4" y="611.0" width="32.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.4" y="622.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,961 samples, 2.71%)</title><rect x="487.4" y="595.0" width="32.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="490.4" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (35 samples, 0.05%)</title><rect x="519.4" y="611.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="522.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (35 samples, 0.05%)</title><rect x="519.4" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (35 samples, 0.05%)</title><rect x="519.4" y="579.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (33 samples, 0.05%)</title><rect x="519.4" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (33 samples, 0.05%)</title><rect x="519.4" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 0.03%)</title><rect x="519.4" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.4" y="542.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (19 samples, 0.03%)</title><rect x="519.4" y="515.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="522.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.upsert (1,329 samples, 1.84%)</title><rect x="520.0" y="611.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.0" y="622.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (812 samples, 1.12%)</title><rect x="520.0" y="595.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="523.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (812 samples, 1.12%)</title><rect x="520.0" y="579.0" width="13.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="523.0" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (286 samples, 0.40%)</title><rect x="520.0" y="563.0" width="4.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="523.0" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (526 samples, 0.73%)</title><rect x="524.7" y="563.0" width="8.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="527.7" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (517 samples, 0.72%)</title><rect x="533.3" y="595.0" width="8.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="536.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (469 samples, 0.65%)</title><rect x="541.7" y="643.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.7" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (453 samples, 0.63%)</title><rect x="541.7" y="627.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.7" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (453 samples, 0.63%)</title><rect x="541.7" y="611.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$86/914604914.get$Lambda (453 samples, 0.63%)</title><rect x="541.7" y="595.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.7" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$86 (453 samples, 0.63%)</title><rect x="541.7" y="579.0" width="7.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="544.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 0.02%)</title><rect x="549.1" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (16 samples, 0.02%)</title><rect x="549.1" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.02%)</title><rect x="549.1" y="595.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.02%)</title><rect x="549.1" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (16 samples, 0.02%)</title><rect x="549.1" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.1" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (16 samples, 0.02%)</title><rect x="549.1" y="547.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="552.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (269 samples, 0.37%)</title><rect x="549.4" y="643.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="552.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (269 samples, 0.37%)</title><rect x="549.4" y="627.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (269 samples, 0.37%)</title><rect x="549.4" y="611.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.4" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (269 samples, 0.37%)</title><rect x="549.4" y="595.0" width="4.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="552.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (1,114 samples, 1.54%)</title><rect x="553.8" y="643.0" width="18.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.privateGetResult (1,111 samples, 1.54%)</title><rect x="553.8" y="627.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="556.8" y="638.0"></text>
</g>
<g>
<title>one.nio.http.Response (252 samples, 0.35%)</title><rect x="553.8" y="611.0" width="4.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="556.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (859 samples, 1.19%)</title><rect x="557.9" y="611.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.9" y="622.0"></text>
</g>
<g>
<title>byte[] (359 samples, 0.50%)</title><rect x="557.9" y="595.0" width="5.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="560.9" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (262 samples, 0.36%)</title><rect x="563.8" y="595.0" width="4.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="566.8" y="606.0"></text>
</g>
<g>
<title>java.lang.String (238 samples, 0.33%)</title><rect x="568.1" y="595.0" width="3.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="571.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.&lt;init&gt; (596 samples, 0.82%)</title><rect x="571.9" y="643.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (596 samples, 0.82%)</title><rect x="571.9" y="627.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="574.9" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (130 samples, 0.18%)</title><rect x="571.9" y="611.0" width="2.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="574.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (265 samples, 0.37%)</title><rect x="574.1" y="611.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.1" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (265 samples, 0.37%)</title><rect x="574.1" y="595.0" width="4.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="577.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (201 samples, 0.28%)</title><rect x="578.4" y="611.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (201 samples, 0.28%)</title><rect x="578.4" y="595.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.4" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (201 samples, 0.28%)</title><rect x="578.4" y="579.0" width="3.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="581.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,173 samples, 1.62%)</title><rect x="581.7" y="643.0" width="19.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,173 samples, 1.62%)</title><rect x="581.7" y="627.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.7" y="638.0"></text>
</g>
<g>
<title>java.lang.String[] (292 samples, 0.40%)</title><rect x="581.7" y="611.0" width="4.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="584.7" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (260 samples, 0.36%)</title><rect x="586.4" y="611.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.4" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (260 samples, 0.36%)</title><rect x="586.4" y="595.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="589.4" y="606.0"></text>
</g>
<g>
<title>java.lang.Object[] (260 samples, 0.36%)</title><rect x="586.4" y="579.0" width="4.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="589.4" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (621 samples, 0.86%)</title><rect x="590.7" y="611.0" width="10.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="593.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (4,130 samples, 5.71%)</title><rect x="600.8" y="659.0" width="67.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.8" y="670.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4,130 samples, 5.71%)</title><rect x="600.8" y="643.0" width="67.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.8" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4,130 samples, 5.71%)</title><rect x="600.8" y="627.0" width="67.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.8" y="638.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,913 samples, 4.03%)</title><rect x="600.8" y="611.0" width="47.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.8" y="622.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,913 samples, 4.03%)</title><rect x="600.8" y="595.0" width="47.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.8" y="606.0">one/..</text>
</g>
<g>
<title>byte[] (2,791 samples, 3.86%)</title><rect x="600.8" y="579.0" width="45.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="603.8" y="590.0">byte[]</text>
</g>
<g>
<title>byte[] (122 samples, 0.17%)</title><rect x="646.4" y="579.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="649.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,217 samples, 1.68%)</title><rect x="648.4" y="611.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.4" y="622.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,217 samples, 1.68%)</title><rect x="648.4" y="595.0" width="19.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="651.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (11,386 samples, 15.75%)</title><rect x="668.3" y="659.0" width="185.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.3" y="670.0">ru/mail/polis/service/al..</text>
</g>
<g>
<title>java/lang/String.getBytes (946 samples, 1.31%)</title><rect x="668.3" y="643.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (946 samples, 1.31%)</title><rect x="668.3" y="627.0" width="15.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (946 samples, 1.31%)</title><rect x="668.3" y="611.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.3" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (946 samples, 1.31%)</title><rect x="668.3" y="595.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.3" y="606.0"></text>
</g>
<g>
<title>byte[] (946 samples, 1.31%)</title><rect x="668.3" y="579.0" width="15.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="671.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,464 samples, 2.03%)</title><rect x="683.7" y="643.0" width="23.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.7" y="654.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,464 samples, 2.03%)</title><rect x="683.7" y="627.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.7" y="638.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,464 samples, 2.03%)</title><rect x="683.7" y="611.0" width="23.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="686.7" y="622.0">j..</text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (756 samples, 1.05%)</title><rect x="707.6" y="643.0" width="12.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="710.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (8,220 samples, 11.37%)</title><rect x="720.0" y="643.0" width="134.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.0" y="654.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1,390 samples, 1.92%)</title><rect x="720.0" y="627.0" width="22.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.0" y="638.0">c..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (928 samples, 1.28%)</title><rect x="720.0" y="611.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.0" y="622.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (928 samples, 1.28%)</title><rect x="720.0" y="595.0" width="15.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="723.0" y="606.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (462 samples, 0.64%)</title><rect x="735.1" y="611.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.1" y="622.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (462 samples, 0.64%)</title><rect x="735.1" y="595.0" width="7.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="738.1" y="606.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (6,830 samples, 9.45%)</title><rect x="742.7" y="627.0" width="111.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.7" y="638.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2,957 samples, 4.09%)</title><rect x="742.7" y="611.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.7" y="622.0">com/..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2,957 samples, 4.09%)</title><rect x="742.7" y="595.0" width="48.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.7" y="606.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,957 samples, 4.09%)</title><rect x="742.7" y="579.0" width="48.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.7" y="590.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,957 samples, 4.09%)</title><rect x="742.7" y="563.0" width="48.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.7" y="574.0">com/..</text>
</g>
<g>
<title>java/lang/String.subSequence (2,957 samples, 4.09%)</title><rect x="742.7" y="547.0" width="48.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.7" y="558.0">java..</text>
</g>
<g>
<title>java/lang/String.substring (2,957 samples, 4.09%)</title><rect x="742.7" y="531.0" width="48.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.7" y="542.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,957 samples, 4.09%)</title><rect x="742.7" y="515.0" width="48.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.7" y="526.0">java..</text>
</g>
<g>
<title>java.lang.String (1,497 samples, 2.07%)</title><rect x="742.7" y="499.0" width="24.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="745.7" y="510.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,460 samples, 2.02%)</title><rect x="767.1" y="499.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="770.1" y="510.0">j..</text>
</g>
<g>
<title>byte[] (1,460 samples, 2.02%)</title><rect x="767.1" y="483.0" width="23.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="770.1" y="494.0">b..</text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1,421 samples, 1.97%)</title><rect x="790.9" y="611.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.9" y="622.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,421 samples, 1.97%)</title><rect x="790.9" y="595.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.9" y="606.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,421 samples, 1.97%)</title><rect x="790.9" y="579.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.9" y="590.0">c..</text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (1,421 samples, 1.97%)</title><rect x="790.9" y="563.0" width="23.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="793.9" y="574.0">c..</text>
</g>
<g>
<title>java.util.ArrayList (702 samples, 0.97%)</title><rect x="814.1" y="611.0" width="11.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="817.1" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,750 samples, 2.42%)</title><rect x="825.6" y="611.0" width="28.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.6" y="622.0">ja..</text>
</g>
<g>
<title>java/util/ArrayList.add (1,750 samples, 2.42%)</title><rect x="825.6" y="595.0" width="28.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.6" y="606.0">ja..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,750 samples, 2.42%)</title><rect x="825.6" y="579.0" width="28.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.6" y="590.0">ja..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,750 samples, 2.42%)</title><rect x="825.6" y="563.0" width="28.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.6" y="574.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,750 samples, 2.42%)</title><rect x="825.6" y="547.0" width="28.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.6" y="558.0">ja..</text>
</g>
<g>
<title>java.lang.Object[] (1,748 samples, 2.42%)</title><rect x="825.6" y="531.0" width="28.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="828.6" y="542.0">ja..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (841 samples, 1.16%)</title><rect x="854.2" y="691.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="857.2" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (841 samples, 1.16%)</title><rect x="854.2" y="675.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.2" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$121/1107097229.run (841 samples, 1.16%)</title><rect x="854.2" y="659.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.2" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (841 samples, 1.16%)</title><rect x="854.2" y="643.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="857.2" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (841 samples, 1.16%)</title><rect x="854.2" y="627.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.2" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (841 samples, 1.16%)</title><rect x="854.2" y="611.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="857.2" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (826 samples, 1.14%)</title><rect x="854.4" y="595.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="857.4" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (802 samples, 1.11%)</title><rect x="854.4" y="579.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.4" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (802 samples, 1.11%)</title><rect x="854.4" y="563.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.4" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (802 samples, 1.11%)</title><rect x="854.4" y="547.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.4" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (802 samples, 1.11%)</title><rect x="854.4" y="531.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.4" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (532 samples, 0.74%)</title><rect x="854.4" y="515.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="857.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (532 samples, 0.74%)</title><rect x="854.4" y="499.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (528 samples, 0.73%)</title><rect x="854.5" y="483.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.5" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (528 samples, 0.73%)</title><rect x="854.5" y="467.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.5" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (500 samples, 0.69%)</title><rect x="854.5" y="451.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="857.5" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (500 samples, 0.69%)</title><rect x="854.5" y="435.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.5" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (500 samples, 0.69%)</title><rect x="854.5" y="419.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.5" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (500 samples, 0.69%)</title><rect x="854.5" y="403.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="857.5" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (500 samples, 0.69%)</title><rect x="854.5" y="387.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.5" y="398.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (500 samples, 0.69%)</title><rect x="854.5" y="371.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.5" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (500 samples, 0.69%)</title><rect x="854.5" y="355.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.5" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (500 samples, 0.69%)</title><rect x="854.5" y="339.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="857.5" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (500 samples, 0.69%)</title><rect x="854.5" y="323.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.5" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (500 samples, 0.69%)</title><rect x="854.5" y="307.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.5" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (500 samples, 0.69%)</title><rect x="854.5" y="291.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.5" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (500 samples, 0.69%)</title><rect x="854.5" y="275.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="857.5" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (500 samples, 0.69%)</title><rect x="854.5" y="259.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="857.5" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (458 samples, 0.63%)</title><rect x="854.5" y="243.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="857.5" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (458 samples, 0.63%)</title><rect x="854.5" y="227.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.5" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (457 samples, 0.63%)</title><rect x="854.5" y="211.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="857.5" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (457 samples, 0.63%)</title><rect x="854.5" y="195.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.5" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (195 samples, 0.27%)</title><rect x="854.5" y="179.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.5" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (158 samples, 0.22%)</title><rect x="854.5" y="163.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.5" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (147 samples, 0.20%)</title><rect x="854.5" y="147.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.5" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (147 samples, 0.20%)</title><rect x="854.5" y="131.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.5" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (84 samples, 0.12%)</title><rect x="854.7" y="115.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.7" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (69 samples, 0.10%)</title><rect x="855.0" y="99.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.0" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (61 samples, 0.08%)</title><rect x="855.1" y="83.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.1" y="94.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (61 samples, 0.08%)</title><rect x="855.1" y="67.0" width="1.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="858.1" y="78.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (46 samples, 0.06%)</title><rect x="856.1" y="115.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.1" y="126.0"></text>
</g>
<g>
<title>java.lang.Object[] (46 samples, 0.06%)</title><rect x="856.1" y="99.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="859.1" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (37 samples, 0.05%)</title><rect x="857.0" y="163.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.0" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (19 samples, 0.03%)</title><rect x="857.2" y="147.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.2" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (19 samples, 0.03%)</title><rect x="857.6" y="179.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="860.6" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (137 samples, 0.19%)</title><rect x="858.0" y="179.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.0" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (20 samples, 0.03%)</title><rect x="858.0" y="163.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.0" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (117 samples, 0.16%)</title><rect x="858.3" y="163.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (107 samples, 0.15%)</title><rect x="858.5" y="147.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="861.5" y="158.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (107 samples, 0.15%)</title><rect x="858.5" y="131.0" width="1.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="861.5" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (103 samples, 0.14%)</title><rect x="860.2" y="179.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.2" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (90 samples, 0.12%)</title><rect x="860.2" y="163.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="863.2" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (42 samples, 0.06%)</title><rect x="861.9" y="243.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="864.9" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (42 samples, 0.06%)</title><rect x="861.9" y="227.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (42 samples, 0.06%)</title><rect x="861.9" y="211.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (42 samples, 0.06%)</title><rect x="861.9" y="195.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.9" y="206.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (42 samples, 0.06%)</title><rect x="861.9" y="179.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="864.9" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (42 samples, 0.06%)</title><rect x="861.9" y="163.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="864.9" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (42 samples, 0.06%)</title><rect x="861.9" y="147.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.9" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (42 samples, 0.06%)</title><rect x="861.9" y="131.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.9" y="142.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (42 samples, 0.06%)</title><rect x="861.9" y="115.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="864.9" y="126.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (42 samples, 0.06%)</title><rect x="861.9" y="99.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="864.9" y="110.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (17 samples, 0.02%)</title><rect x="862.1" y="83.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="865.1" y="94.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (26 samples, 0.04%)</title><rect x="862.6" y="451.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="865.6" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (22 samples, 0.03%)</title><rect x="862.7" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="865.7" y="446.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (22 samples, 0.03%)</title><rect x="862.7" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="865.7" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (213 samples, 0.29%)</title><rect x="863.1" y="515.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.1" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (213 samples, 0.29%)</title><rect x="863.1" y="499.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.1" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (213 samples, 0.29%)</title><rect x="863.1" y="483.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.1" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (212 samples, 0.29%)</title><rect x="863.1" y="467.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (212 samples, 0.29%)</title><rect x="863.1" y="451.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="866.1" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (205 samples, 0.28%)</title><rect x="863.1" y="435.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.1" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (205 samples, 0.28%)</title><rect x="863.1" y="419.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (205 samples, 0.28%)</title><rect x="863.1" y="403.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (202 samples, 0.28%)</title><rect x="863.2" y="387.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (197 samples, 0.27%)</title><rect x="863.2" y="371.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (197 samples, 0.27%)</title><rect x="863.2" y="355.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.2" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (181 samples, 0.25%)</title><rect x="863.4" y="339.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.4" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (179 samples, 0.25%)</title><rect x="863.5" y="323.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (179 samples, 0.25%)</title><rect x="863.5" y="307.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (179 samples, 0.25%)</title><rect x="863.5" y="291.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="866.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (179 samples, 0.25%)</title><rect x="863.5" y="275.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="866.5" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (174 samples, 0.24%)</title><rect x="863.5" y="259.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="866.5" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (174 samples, 0.24%)</title><rect x="863.5" y="243.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.5" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (82 samples, 0.11%)</title><rect x="863.5" y="227.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (27 samples, 0.04%)</title><rect x="863.5" y="211.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (25 samples, 0.03%)</title><rect x="863.5" y="195.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.5" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (18 samples, 0.02%)</title><rect x="863.6" y="179.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="866.6" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (55 samples, 0.08%)</title><rect x="864.0" y="211.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.0" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (46 samples, 0.06%)</title><rect x="864.0" y="195.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="867.0" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (43 samples, 0.06%)</title><rect x="864.0" y="179.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (43 samples, 0.06%)</title><rect x="864.0" y="163.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (38 samples, 0.05%)</title><rect x="864.1" y="147.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.1" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (27 samples, 0.04%)</title><rect x="864.1" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.1" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (26 samples, 0.04%)</title><rect x="864.1" y="115.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.1" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (22 samples, 0.03%)</title><rect x="864.2" y="99.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.2" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (17 samples, 0.02%)</title><rect x="864.2" y="83.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.2" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (17 samples, 0.02%)</title><rect x="864.2" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.2" y="78.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (17 samples, 0.02%)</title><rect x="864.2" y="51.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.2" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (17 samples, 0.02%)</title><rect x="864.2" y="35.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.2" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (40 samples, 0.06%)</title><rect x="864.9" y="227.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (36 samples, 0.05%)</title><rect x="864.9" y="211.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (36 samples, 0.05%)</title><rect x="864.9" y="195.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (31 samples, 0.04%)</title><rect x="865.0" y="179.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (28 samples, 0.04%)</title><rect x="865.0" y="163.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="868.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (50 samples, 0.07%)</title><rect x="865.5" y="227.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.5" y="238.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (50 samples, 0.07%)</title><rect x="865.5" y="211.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="868.5" y="222.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (21 samples, 0.03%)</title><rect x="866.6" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (21 samples, 0.03%)</title><rect x="866.6" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (21 samples, 0.03%)</title><rect x="866.6" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.6" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (21 samples, 0.03%)</title><rect x="866.6" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.6" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (16 samples, 0.02%)</title><rect x="866.7" y="451.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="869.7" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (35 samples, 0.05%)</title><rect x="866.9" y="515.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.9" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (34 samples, 0.05%)</title><rect x="867.0" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.0" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (33 samples, 0.05%)</title><rect x="867.0" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.0" y="494.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (33 samples, 0.05%)</title><rect x="867.0" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="870.0" y="478.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (33 samples, 0.05%)</title><rect x="867.0" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (33 samples, 0.05%)</title><rect x="867.0" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (21 samples, 0.03%)</title><rect x="867.0" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (22 samples, 0.03%)</title><rect x="867.5" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.5" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (22 samples, 0.03%)</title><rect x="867.5" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.5" y="574.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (21 samples, 0.03%)</title><rect x="867.5" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (21 samples, 0.03%)</title><rect x="867.5" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.5" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (19,581 samples, 27.09%)</title><rect x="867.9" y="739.0" width="319.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.9" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (292 samples, 0.40%)</title><rect x="867.9" y="723.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.9" y="734.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (292 samples, 0.40%)</title><rect x="867.9" y="707.0" width="4.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="870.9" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (19,289 samples, 26.69%)</title><rect x="872.7" y="723.0" width="314.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.7" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (19,289 samples, 26.69%)</title><rect x="872.7" y="707.0" width="314.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.7" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (19,289 samples, 26.69%)</title><rect x="872.7" y="691.0" width="314.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.7" y="702.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,088 samples, 5.66%)</title><rect x="872.7" y="675.0" width="66.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.7" y="686.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,088 samples, 5.66%)</title><rect x="872.7" y="659.0" width="66.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.7" y="670.0">one/nio..</text>
</g>
<g>
<title>RequestHandler2_handleEntityPut.handleRequest (2,940 samples, 4.07%)</title><rect x="872.7" y="643.0" width="48.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="875.7" y="654.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,081 samples, 1.50%)</title><rect x="872.7" y="627.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,081 samples, 1.50%)</title><rect x="872.7" y="611.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,081 samples, 1.50%)</title><rect x="872.7" y="595.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.7" y="606.0"></text>
</g>
<g>
<title>java.lang.String (574 samples, 0.79%)</title><rect x="872.7" y="579.0" width="9.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="875.7" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (507 samples, 0.70%)</title><rect x="882.0" y="579.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.0" y="590.0"></text>
</g>
<g>
<title>byte[] (507 samples, 0.70%)</title><rect x="882.0" y="563.0" width="8.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="885.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,262 samples, 1.75%)</title><rect x="890.3" y="627.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="893.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,262 samples, 1.75%)</title><rect x="890.3" y="611.0" width="20.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="893.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,262 samples, 1.75%)</title><rect x="890.3" y="595.0" width="20.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="893.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,262 samples, 1.75%)</title><rect x="890.3" y="579.0" width="20.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="893.3" y="590.0"></text>
</g>
<g>
<title>java.lang.String (648 samples, 0.90%)</title><rect x="890.3" y="563.0" width="10.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="893.3" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (614 samples, 0.85%)</title><rect x="900.9" y="563.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="903.9" y="574.0"></text>
</g>
<g>
<title>byte[] (614 samples, 0.85%)</title><rect x="900.9" y="547.0" width="10.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="903.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityPut (597 samples, 0.83%)</title><rect x="910.9" y="627.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.9" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/76338237.linkToTargetMethod (589 samples, 0.81%)</title><rect x="910.9" y="611.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="913.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (589 samples, 0.81%)</title><rect x="910.9" y="595.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="913.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/54338970.get$Lambda (589 samples, 0.81%)</title><rect x="910.9" y="579.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="913.9" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$75 (589 samples, 0.81%)</title><rect x="910.9" y="563.0" width="9.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="913.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,148 samples, 1.59%)</title><rect x="920.7" y="643.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,148 samples, 1.59%)</title><rect x="920.7" y="627.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.7" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,148 samples, 1.59%)</title><rect x="920.7" y="611.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.7" y="622.0"></text>
</g>
<g>
<title>java.lang.String (510 samples, 0.71%)</title><rect x="920.7" y="595.0" width="8.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="923.7" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (638 samples, 0.88%)</title><rect x="929.0" y="595.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.0" y="606.0"></text>
</g>
<g>
<title>byte[] (638 samples, 0.88%)</title><rect x="929.0" y="579.0" width="10.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="932.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6,872 samples, 9.51%)</title><rect x="939.4" y="675.0" width="112.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.4" y="686.0">one/nio/http/H..</text>
</g>
<g>
<title>one.nio.http.Request (727 samples, 1.01%)</title><rect x="939.4" y="659.0" width="11.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="942.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,617 samples, 2.24%)</title><rect x="951.3" y="659.0" width="26.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.3" y="670.0">o..</text>
</g>
<g>
<title>java.lang.String[] (1,605 samples, 2.22%)</title><rect x="951.3" y="643.0" width="26.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="954.3" y="654.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,528 samples, 6.27%)</title><rect x="977.7" y="659.0" width="73.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.7" y="670.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,528 samples, 6.27%)</title><rect x="977.7" y="643.0" width="73.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.7" y="654.0">one/nio/..</text>
</g>
<g>
<title>char[] (2,785 samples, 3.85%)</title><rect x="977.7" y="627.0" width="45.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="980.7" y="638.0">char[]</text>
</g>
<g>
<title>char[] (30 samples, 0.04%)</title><rect x="1023.2" y="627.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1026.2" y="638.0"></text>
</g>
<g>
<title>java.lang.String (605 samples, 0.84%)</title><rect x="1023.7" y="627.0" width="9.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1026.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,108 samples, 1.53%)</title><rect x="1033.5" y="627.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.5" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,108 samples, 1.53%)</title><rect x="1033.5" y="611.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1036.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,108 samples, 1.53%)</title><rect x="1033.5" y="595.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1036.5" y="606.0"></text>
</g>
<g>
<title>byte[] (1,104 samples, 1.53%)</title><rect x="1033.5" y="579.0" width="18.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1036.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (746 samples, 1.03%)</title><rect x="1051.6" y="675.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1054.6" y="686.0"></text>
</g>
<g>
<title>byte[] (746 samples, 1.03%)</title><rect x="1051.6" y="659.0" width="12.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1054.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (972 samples, 1.34%)</title><rect x="1063.8" y="675.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1066.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (972 samples, 1.34%)</title><rect x="1063.8" y="659.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1066.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (972 samples, 1.34%)</title><rect x="1063.8" y="643.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1066.8" y="654.0"></text>
</g>
<g>
<title>java.lang.String (400 samples, 0.55%)</title><rect x="1063.8" y="627.0" width="6.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1066.8" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (572 samples, 0.79%)</title><rect x="1070.3" y="627.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.3" y="638.0"></text>
</g>
<g>
<title>byte[] (572 samples, 0.79%)</title><rect x="1070.3" y="611.0" width="9.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1073.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,611 samples, 9.15%)</title><rect x="1079.7" y="675.0" width="107.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1082.7" y="686.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,611 samples, 9.15%)</title><rect x="1079.7" y="659.0" width="107.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1082.7" y="670.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (3,390 samples, 4.69%)</title><rect x="1079.7" y="643.0" width="55.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1082.7" y="654.0">char[]</text>
</g>
<g>
<title>java.lang.String (991 samples, 1.37%)</title><rect x="1135.1" y="643.0" width="16.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1138.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,225 samples, 3.08%)</title><rect x="1151.3" y="643.0" width="36.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1154.3" y="654.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,225 samples, 3.08%)</title><rect x="1151.3" y="627.0" width="36.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1154.3" y="638.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,225 samples, 3.08%)</title><rect x="1151.3" y="611.0" width="36.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1154.3" y="622.0">jav..</text>
</g>
<g>
<title>byte[] (2,225 samples, 3.08%)</title><rect x="1151.3" y="595.0" width="36.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1154.3" y="606.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Flusher.run (146 samples, 0.20%)</title><rect x="1187.6" y="739.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1190.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.serialize (142 samples, 0.20%)</title><rect x="1187.7" y="723.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (139 samples, 0.19%)</title><rect x="1187.7" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (78 samples, 0.11%)</title><rect x="1187.7" y="691.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (78 samples, 0.11%)</title><rect x="1187.7" y="675.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (78 samples, 0.11%)</title><rect x="1187.7" y="659.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1190.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (78 samples, 0.11%)</title><rect x="1187.7" y="643.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$146/202599129.getAsBoolean (78 samples, 0.11%)</title><rect x="1187.7" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (78 samples, 0.11%)</title><rect x="1187.7" y="611.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (78 samples, 0.11%)</title><rect x="1187.7" y="595.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (25 samples, 0.03%)</title><rect x="1187.7" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1190.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (25 samples, 0.03%)</title><rect x="1187.7" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (25 samples, 0.03%)</title><rect x="1187.7" y="547.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (53 samples, 0.07%)</title><rect x="1188.1" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$134/643474225.apply (53 samples, 0.07%)</title><rect x="1188.1" y="563.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (53 samples, 0.07%)</title><rect x="1188.1" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1191.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (40 samples, 0.06%)</title><rect x="1188.1" y="531.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1191.1" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (40 samples, 0.06%)</title><rect x="1188.1" y="515.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1191.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$$Lambda$140/683287089.accept (61 samples, 0.08%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.lambda$serialize$0 (61 samples, 0.08%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (42 samples, 0.06%)</title><rect x="1189.3" y="659.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (42 samples, 0.06%)</title><rect x="1189.3" y="643.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.3" y="654.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (42 samples, 0.06%)</title><rect x="1189.3" y="627.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1192.3" y="638.0"></text>
</g>
</g>
</svg>
