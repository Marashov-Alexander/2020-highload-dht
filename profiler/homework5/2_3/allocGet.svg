<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (245,387 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (180,293 samples, 73.47%)</title><rect x="10.0" y="707.0" width="867.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (180,250 samples, 73.46%)</title><rect x="10.2" y="691.0" width="866.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (180,250 samples, 73.46%)</title><rect x="10.2" y="675.0" width="866.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.2" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,487 samples, 0.61%)</title><rect x="10.2" y="659.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,487 samples, 0.61%)</title><rect x="10.2" y="643.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,481 samples, 0.60%)</title><rect x="10.2" y="627.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,481 samples, 0.60%)</title><rect x="10.2" y="611.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.2" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,481 samples, 0.60%)</title><rect x="10.2" y="595.0" width="7.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="13.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$152/1332248785.run (28,352 samples, 11.55%)</title><rect x="17.4" y="659.0" width="136.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="670.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$0 (28,352 samples, 11.55%)</title><rect x="17.4" y="643.0" width="136.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.4" y="654.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (28,053 samples, 11.43%)</title><rect x="17.4" y="627.0" width="134.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.4" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (62 samples, 0.03%)</title><rect x="17.4" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (27,046 samples, 11.02%)</title><rect x="17.7" y="611.0" width="130.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="622.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (487 samples, 0.20%)</title><rect x="17.7" y="595.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (487 samples, 0.20%)</title><rect x="17.7" y="579.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (487 samples, 0.20%)</title><rect x="17.7" y="563.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (487 samples, 0.20%)</title><rect x="17.7" y="547.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.7" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (487 samples, 0.20%)</title><rect x="17.7" y="531.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (487 samples, 0.20%)</title><rect x="17.7" y="515.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (487 samples, 0.20%)</title><rect x="17.7" y="499.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (487 samples, 0.20%)</title><rect x="17.7" y="483.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (487 samples, 0.20%)</title><rect x="17.7" y="467.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (487 samples, 0.20%)</title><rect x="17.7" y="451.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (487 samples, 0.20%)</title><rect x="17.7" y="435.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (144 samples, 0.06%)</title><rect x="18.0" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (53 samples, 0.02%)</title><rect x="18.0" y="403.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.02%)</title><rect x="18.0" y="387.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (290 samples, 0.12%)</title><rect x="18.7" y="419.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (101 samples, 0.04%)</title><rect x="19.0" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (101 samples, 0.04%)</title><rect x="19.0" y="387.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.0" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (69 samples, 0.03%)</title><rect x="19.0" y="371.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="22.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (53 samples, 0.02%)</title><rect x="19.5" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.02%)</title><rect x="19.5" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (64 samples, 0.03%)</title><rect x="19.8" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (64 samples, 0.03%)</title><rect x="19.8" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (26,559 samples, 10.82%)</title><rect x="20.1" y="595.0" width="127.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.1" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3,800 samples, 1.55%)</title><rect x="20.1" y="579.0" width="18.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3,782 samples, 1.54%)</title><rect x="20.2" y="563.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (115 samples, 0.05%)</title><rect x="20.3" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.3" y="558.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (115 samples, 0.05%)</title><rect x="20.3" y="531.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="23.3" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,398 samples, 1.38%)</title><rect x="21.0" y="547.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.0" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,398 samples, 1.38%)</title><rect x="21.0" y="531.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (103 samples, 0.04%)</title><rect x="21.0" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (103 samples, 0.04%)</title><rect x="21.0" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.0" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (103 samples, 0.04%)</title><rect x="21.0" y="483.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="24.0" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,295 samples, 1.34%)</title><rect x="21.5" y="515.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,295 samples, 1.34%)</title><rect x="21.5" y="499.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,295 samples, 1.34%)</title><rect x="21.5" y="483.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,295 samples, 1.34%)</title><rect x="21.5" y="467.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3,295 samples, 1.34%)</title><rect x="21.5" y="451.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,295 samples, 1.34%)</title><rect x="21.5" y="435.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="24.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (3,295 samples, 1.34%)</title><rect x="21.5" y="419.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.5" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (241 samples, 0.10%)</title><rect x="21.5" y="403.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.5" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (241 samples, 0.10%)</title><rect x="21.5" y="387.0" width="1.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="24.5" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (111 samples, 0.05%)</title><rect x="22.7" y="403.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="25.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (1,055 samples, 0.43%)</title><rect x="23.2" y="403.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (367 samples, 0.15%)</title><rect x="23.2" y="387.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (367 samples, 0.15%)</title><rect x="23.2" y="371.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (220 samples, 0.09%)</title><rect x="23.2" y="355.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="26.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (147 samples, 0.06%)</title><rect x="24.3" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.3" y="366.0"></text>
</g>
<g>
<title>byte[] (147 samples, 0.06%)</title><rect x="24.3" y="339.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="27.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (340 samples, 0.14%)</title><rect x="25.0" y="387.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (340 samples, 0.14%)</title><rect x="25.0" y="371.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (219 samples, 0.09%)</title><rect x="25.0" y="355.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="28.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (121 samples, 0.05%)</title><rect x="26.0" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.0" y="366.0"></text>
</g>
<g>
<title>byte[] (121 samples, 0.05%)</title><rect x="26.0" y="339.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="29.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (348 samples, 0.14%)</title><rect x="26.6" y="387.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (348 samples, 0.14%)</title><rect x="26.6" y="371.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (231 samples, 0.09%)</title><rect x="26.6" y="355.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="29.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (117 samples, 0.05%)</title><rect x="27.7" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.7" y="366.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.05%)</title><rect x="27.7" y="339.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="30.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (1,888 samples, 0.77%)</title><rect x="28.3" y="403.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.3" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (113 samples, 0.05%)</title><rect x="28.3" y="387.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="31.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (366 samples, 0.15%)</title><rect x="28.8" y="387.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (366 samples, 0.15%)</title><rect x="28.8" y="371.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.8" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (224 samples, 0.09%)</title><rect x="28.8" y="355.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="31.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (142 samples, 0.06%)</title><rect x="29.9" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.9" y="366.0"></text>
</g>
<g>
<title>byte[] (142 samples, 0.06%)</title><rect x="29.9" y="339.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="32.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (694 samples, 0.28%)</title><rect x="30.6" y="387.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (694 samples, 0.28%)</title><rect x="30.6" y="371.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (447 samples, 0.18%)</title><rect x="30.6" y="355.0" width="2.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="33.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (247 samples, 0.10%)</title><rect x="32.8" y="355.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.8" y="366.0"></text>
</g>
<g>
<title>byte[] (247 samples, 0.10%)</title><rect x="32.8" y="339.0" width="1.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="35.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (353 samples, 0.14%)</title><rect x="33.9" y="387.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (353 samples, 0.14%)</title><rect x="33.9" y="371.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.9" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (228 samples, 0.09%)</title><rect x="33.9" y="355.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="36.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (125 samples, 0.05%)</title><rect x="35.0" y="355.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.0" y="366.0"></text>
</g>
<g>
<title>byte[] (125 samples, 0.05%)</title><rect x="35.0" y="339.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="38.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (362 samples, 0.15%)</title><rect x="35.6" y="387.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (362 samples, 0.15%)</title><rect x="35.6" y="371.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (251 samples, 0.10%)</title><rect x="35.6" y="355.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="38.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (111 samples, 0.05%)</title><rect x="36.8" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.8" y="366.0"></text>
</g>
<g>
<title>byte[] (111 samples, 0.05%)</title><rect x="36.8" y="339.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="39.8" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (201 samples, 0.08%)</title><rect x="37.4" y="547.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (201 samples, 0.08%)</title><rect x="37.4" y="531.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (201 samples, 0.08%)</title><rect x="37.4" y="515.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (81 samples, 0.03%)</title><rect x="37.4" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$146/202599129.getAsBoolean (81 samples, 0.03%)</title><rect x="37.4" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (81 samples, 0.03%)</title><rect x="37.4" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (81 samples, 0.03%)</title><rect x="37.4" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (58 samples, 0.02%)</title><rect x="37.5" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$134/643474225.apply (58 samples, 0.02%)</title><rect x="37.5" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (58 samples, 0.02%)</title><rect x="37.5" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (120 samples, 0.05%)</title><rect x="37.8" y="499.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.8" y="510.0"></text>
</g>
<g>
<title>java.util.ArrayList (138 samples, 0.06%)</title><rect x="38.3" y="579.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="41.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (511 samples, 0.21%)</title><rect x="39.4" y="579.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (502 samples, 0.20%)</title><rect x="39.5" y="563.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (502 samples, 0.20%)</title><rect x="39.5" y="547.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.5" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (502 samples, 0.20%)</title><rect x="39.5" y="531.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (502 samples, 0.20%)</title><rect x="39.5" y="515.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (502 samples, 0.20%)</title><rect x="39.5" y="499.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (502 samples, 0.20%)</title><rect x="39.5" y="483.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (502 samples, 0.20%)</title><rect x="39.5" y="467.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (502 samples, 0.20%)</title><rect x="39.5" y="451.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (502 samples, 0.20%)</title><rect x="39.5" y="435.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (502 samples, 0.20%)</title><rect x="39.5" y="419.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (502 samples, 0.20%)</title><rect x="39.5" y="403.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (157 samples, 0.06%)</title><rect x="39.7" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (61 samples, 0.02%)</title><rect x="39.7" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (61 samples, 0.02%)</title><rect x="39.7" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (291 samples, 0.12%)</title><rect x="40.5" y="387.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (56 samples, 0.02%)</title><rect x="40.6" y="371.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (56 samples, 0.02%)</title><rect x="40.6" y="355.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (112 samples, 0.05%)</title><rect x="40.8" y="371.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (112 samples, 0.05%)</title><rect x="40.8" y="355.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.8" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (77 samples, 0.03%)</title><rect x="40.8" y="339.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="43.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (53 samples, 0.02%)</title><rect x="41.4" y="371.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.02%)</title><rect x="41.4" y="355.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="44.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (53 samples, 0.02%)</title><rect x="41.6" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.02%)</title><rect x="41.6" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (239 samples, 0.10%)</title><rect x="41.9" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (65 samples, 0.03%)</title><rect x="41.9" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (59 samples, 0.02%)</title><rect x="42.4" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (62 samples, 0.03%)</title><rect x="42.7" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.7" y="574.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (62 samples, 0.03%)</title><rect x="42.7" y="547.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="45.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (21,786 samples, 8.88%)</title><rect x="43.0" y="579.0" width="104.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.0" y="590.0">ru/mail/poli..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (134 samples, 0.05%)</title><rect x="43.0" y="563.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="46.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (21,652 samples, 8.82%)</title><rect x="43.7" y="563.0" width="104.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.7" y="574.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (21,652 samples, 8.82%)</title><rect x="43.7" y="547.0" width="104.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.7" y="558.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (21,652 samples, 8.82%)</title><rect x="43.7" y="531.0" width="104.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.7" y="542.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (7,579 samples, 3.09%)</title><rect x="43.7" y="515.0" width="36.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.7" y="526.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,579 samples, 3.09%)</title><rect x="43.7" y="499.0" width="36.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.7" y="510.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,569 samples, 1.86%)</title><rect x="43.7" y="483.0" width="21.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="46.7" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,010 samples, 1.23%)</title><rect x="65.6" y="483.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.6" y="494.0"></text>
</g>
<g>
<title>byte[] (3,010 samples, 1.23%)</title><rect x="65.6" y="467.0" width="14.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="68.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (6,994 samples, 2.85%)</title><rect x="80.1" y="515.0" width="33.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.1" y="526.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6,994 samples, 2.85%)</title><rect x="80.1" y="499.0" width="33.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.1" y="510.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,673 samples, 1.90%)</title><rect x="80.1" y="483.0" width="22.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="83.1" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,321 samples, 0.95%)</title><rect x="102.6" y="483.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.6" y="494.0"></text>
</g>
<g>
<title>byte[] (2,321 samples, 0.95%)</title><rect x="102.6" y="467.0" width="11.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="105.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (7,079 samples, 2.88%)</title><rect x="113.7" y="515.0" width="34.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.7" y="526.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,079 samples, 2.88%)</title><rect x="113.7" y="499.0" width="34.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.7" y="510.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,768 samples, 1.94%)</title><rect x="113.7" y="483.0" width="23.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="116.7" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,311 samples, 0.94%)</title><rect x="136.7" y="483.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.7" y="494.0"></text>
</g>
<g>
<title>byte[] (2,311 samples, 0.94%)</title><rect x="136.7" y="467.0" width="11.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="139.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (929 samples, 0.38%)</title><rect x="147.8" y="611.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.8" y="622.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (422 samples, 0.17%)</title><rect x="148.1" y="595.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.1" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (422 samples, 0.17%)</title><rect x="148.1" y="579.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.1" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (422 samples, 0.17%)</title><rect x="148.1" y="563.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.1" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (422 samples, 0.17%)</title><rect x="148.1" y="547.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.1" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (422 samples, 0.17%)</title><rect x="148.1" y="531.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.1" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (422 samples, 0.17%)</title><rect x="148.1" y="515.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.1" y="526.0"></text>
</g>
<g>
<title>int[] (211 samples, 0.09%)</title><rect x="148.1" y="499.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="151.1" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (211 samples, 0.09%)</title><rect x="149.1" y="499.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="152.1" y="510.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (393 samples, 0.16%)</title><rect x="150.3" y="595.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.3" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (393 samples, 0.16%)</title><rect x="150.3" y="579.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.3" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (393 samples, 0.16%)</title><rect x="150.3" y="563.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.3" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (393 samples, 0.16%)</title><rect x="150.3" y="547.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.3" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (393 samples, 0.16%)</title><rect x="150.3" y="531.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="153.3" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (393 samples, 0.16%)</title><rect x="150.3" y="515.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.3" y="526.0"></text>
</g>
<g>
<title>int[] (182 samples, 0.07%)</title><rect x="150.3" y="499.0" width="0.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="153.3" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (211 samples, 0.09%)</title><rect x="151.2" y="499.0" width="1.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="154.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (299 samples, 0.12%)</title><rect x="152.3" y="627.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (286 samples, 0.12%)</title><rect x="152.3" y="611.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (229 samples, 0.09%)</title><rect x="152.3" y="595.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.3" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (78 samples, 0.03%)</title><rect x="152.7" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.7" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (78 samples, 0.03%)</title><rect x="152.7" y="563.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="155.7" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (59 samples, 0.02%)</title><rect x="153.1" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (57 samples, 0.02%)</title><rect x="153.4" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.compute (57 samples, 0.02%)</title><rect x="153.4" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$86/914604914.run (26,492 samples, 10.80%)</title><rect x="153.7" y="659.0" width="127.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.7" y="670.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (26,492 samples, 10.80%)</title><rect x="153.7" y="643.0" width="127.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.7" y="654.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$153/1263996388.accept (26,492 samples, 10.80%)</title><rect x="153.7" y="627.0" width="127.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="156.7" y="638.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$1 (26,492 samples, 10.80%)</title><rect x="153.7" y="611.0" width="127.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.7" y="622.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (25,979 samples, 10.59%)</title><rect x="153.7" y="595.0" width="124.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.7" y="606.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (25,979 samples, 10.59%)</title><rect x="153.7" y="579.0" width="124.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="156.7" y="590.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (58 samples, 0.02%)</title><rect x="153.7" y="563.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="156.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (24,258 samples, 9.89%)</title><rect x="154.0" y="563.0" width="116.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.0" y="574.0">one/nio/http/H..</text>
</g>
<g>
<title>byte[] (6,090 samples, 2.48%)</title><rect x="154.0" y="547.0" width="29.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="157.0" y="558.0">by..</text>
</g>
<g>
<title>byte[] (18,168 samples, 7.40%)</title><rect x="183.3" y="547.0" width="87.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="186.3" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,180 samples, 0.48%)</title><rect x="270.6" y="563.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.6" y="574.0"></text>
</g>
<g>
<title>byte[] (61 samples, 0.02%)</title><rect x="270.6" y="547.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="273.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (65 samples, 0.03%)</title><rect x="270.9" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (65 samples, 0.03%)</title><rect x="270.9" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (932 samples, 0.38%)</title><rect x="271.3" y="547.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.3" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (932 samples, 0.38%)</title><rect x="271.3" y="531.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (932 samples, 0.38%)</title><rect x="271.3" y="515.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.3" y="526.0"></text>
</g>
<g>
<title>char[] (633 samples, 0.26%)</title><rect x="271.3" y="499.0" width="3.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="274.3" y="510.0"></text>
</g>
<g>
<title>java.lang.String (127 samples, 0.05%)</title><rect x="274.4" y="499.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="277.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (172 samples, 0.07%)</title><rect x="275.0" y="499.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (172 samples, 0.07%)</title><rect x="275.0" y="483.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (172 samples, 0.07%)</title><rect x="275.0" y="467.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.0" y="478.0"></text>
</g>
<g>
<title>byte[] (172 samples, 0.07%)</title><rect x="275.0" y="451.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="278.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (69 samples, 0.03%)</title><rect x="276.0" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (69 samples, 0.03%)</title><rect x="276.0" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (69 samples, 0.03%)</title><rect x="276.0" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (363 samples, 0.15%)</title><rect x="276.3" y="563.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (363 samples, 0.15%)</title><rect x="276.3" y="547.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.3" y="558.0"></text>
</g>
<g>
<title>byte[] (363 samples, 0.15%)</title><rect x="276.3" y="531.0" width="1.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="279.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (84 samples, 0.03%)</title><rect x="278.0" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (84 samples, 0.03%)</title><rect x="278.0" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (84 samples, 0.03%)</title><rect x="278.0" y="531.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (513 samples, 0.21%)</title><rect x="278.6" y="595.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (502 samples, 0.20%)</title><rect x="278.7" y="579.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (443 samples, 0.18%)</title><rect x="278.7" y="563.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (66 samples, 0.03%)</title><rect x="278.7" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (66 samples, 0.03%)</title><rect x="278.7" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.7" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (66 samples, 0.03%)</title><rect x="278.7" y="515.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="281.7" y="526.0"></text>
</g>
<g>
<title>one.nio.serial.DeserializeStream (65 samples, 0.03%)</title><rect x="279.0" y="547.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="282.0" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (147 samples, 0.06%)</title><rect x="279.3" y="547.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.3" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (147 samples, 0.06%)</title><rect x="279.3" y="531.0" width="0.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="282.3" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (129 samples, 0.05%)</title><rect x="280.0" y="547.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.0" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.read (90 samples, 0.04%)</title><rect x="280.0" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.0" y="542.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.read (90 samples, 0.04%)</title><rect x="280.0" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.0" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (59 samples, 0.02%)</title><rect x="280.0" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.0" y="510.0"></text>
</g>
<g>
<title>one/nio/serial/ByteArraySerializer.read (59 samples, 0.02%)</title><rect x="280.0" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.0" y="494.0"></text>
</g>
<g>
<title>one/nio/serial/ByteArraySerializer.read (59 samples, 0.02%)</title><rect x="280.0" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.0" y="478.0"></text>
</g>
<g>
<title>byte[] (59 samples, 0.02%)</title><rect x="280.0" y="451.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="283.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (59 samples, 0.02%)</title><rect x="280.8" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.compute (59 samples, 0.02%)</title><rect x="280.8" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$151/1948971226.run (121,307 samples, 49.43%)</title><rect x="281.1" y="659.0" width="583.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.1" y="670.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$151/1948971226.run</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2 (121,307 samples, 49.43%)</title><rect x="281.1" y="643.0" width="583.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.1" y="654.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.get (100,869 samples, 41.11%)</title><rect x="281.1" y="627.0" width="485.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.1" y="638.0">ru/mail/polis/service/alexander/marashov/ResponseManager.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,781 samples, 0.73%)</title><rect x="281.1" y="611.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,781 samples, 0.73%)</title><rect x="281.1" y="595.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$152/1332248785.get$Lambda (189 samples, 0.08%)</title><rect x="281.1" y="579.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.1" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$152 (189 samples, 0.08%)</title><rect x="281.1" y="563.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="284.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$153/1263996388.get$Lambda (1,592 samples, 0.65%)</title><rect x="282.0" y="579.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="285.0" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$153 (1,592 samples, 0.65%)</title><rect x="282.0" y="563.0" width="7.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="285.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (114 samples, 0.05%)</title><rect x="289.7" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (114 samples, 0.05%)</title><rect x="289.7" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (114 samples, 0.05%)</title><rect x="289.7" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.7" y="590.0"></text>
</g>
<g>
<title>java.lang.String (56 samples, 0.02%)</title><rect x="289.7" y="563.0" width="0.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="292.7" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (58 samples, 0.02%)</title><rect x="289.9" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.9" y="574.0"></text>
</g>
<g>
<title>byte[] (58 samples, 0.02%)</title><rect x="289.9" y="547.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="292.9" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.ResponseAnalyzerGet (4,510 samples, 1.84%)</title><rect x="290.2" y="611.0" width="21.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="293.2" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (74,661 samples, 30.43%)</title><rect x="311.9" y="611.0" width="359.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.9" y="622.0">ru/mail/polis/service/alexander/marashov/DaoManag..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (252 samples, 0.10%)</title><rect x="312.1" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.1" y="606.0"></text>
</g>
<g>
<title>byte[] (100 samples, 0.04%)</title><rect x="312.1" y="579.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="315.1" y="590.0"></text>
</g>
<g>
<title>java.lang.String[] (74 samples, 0.03%)</title><rect x="312.6" y="579.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="315.6" y="590.0"></text>
</g>
<g>
<title>java.lang.String (78 samples, 0.03%)</title><rect x="313.0" y="579.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="316.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (71,420 samples, 29.11%)</title><rect x="313.3" y="595.0" width="343.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.3" y="606.0">ru/mail/polis/dao/DAO.rowGet</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,690 samples, 0.69%)</title><rect x="313.3" y="579.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,690 samples, 0.69%)</title><rect x="313.3" y="563.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.3" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,690 samples, 0.69%)</title><rect x="313.3" y="547.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.3" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,690 samples, 0.69%)</title><rect x="313.3" y="531.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.3" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,690 samples, 0.69%)</title><rect x="313.3" y="515.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="316.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,690 samples, 0.69%)</title><rect x="313.3" y="499.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.3" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,690 samples, 0.69%)</title><rect x="313.3" y="483.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,690 samples, 0.69%)</title><rect x="313.3" y="467.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,690 samples, 0.69%)</title><rect x="313.3" y="451.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="316.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,690 samples, 0.69%)</title><rect x="313.3" y="435.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,690 samples, 0.69%)</title><rect x="313.3" y="419.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (113 samples, 0.05%)</title><rect x="313.3" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.3" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (113 samples, 0.05%)</title><rect x="313.3" y="387.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="316.3" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (69 samples, 0.03%)</title><rect x="313.9" y="403.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="316.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (520 samples, 0.21%)</title><rect x="314.2" y="403.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (213 samples, 0.09%)</title><rect x="314.2" y="387.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (213 samples, 0.09%)</title><rect x="314.2" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (123 samples, 0.05%)</title><rect x="314.2" y="355.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="317.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (90 samples, 0.04%)</title><rect x="314.8" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.8" y="366.0"></text>
</g>
<g>
<title>byte[] (90 samples, 0.04%)</title><rect x="314.8" y="339.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="317.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (160 samples, 0.07%)</title><rect x="315.2" y="387.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (160 samples, 0.07%)</title><rect x="315.2" y="371.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (110 samples, 0.04%)</title><rect x="315.2" y="355.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="318.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (147 samples, 0.06%)</title><rect x="316.0" y="387.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (147 samples, 0.06%)</title><rect x="316.0" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.0" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (95 samples, 0.04%)</title><rect x="316.0" y="355.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="319.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (52 samples, 0.02%)</title><rect x="316.5" y="355.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.5" y="366.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.02%)</title><rect x="316.5" y="339.0" width="0.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="319.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (988 samples, 0.40%)</title><rect x="316.7" y="403.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (195 samples, 0.08%)</title><rect x="317.0" y="387.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (195 samples, 0.08%)</title><rect x="317.0" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.0" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (102 samples, 0.04%)</title><rect x="317.0" y="355.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="320.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (93 samples, 0.04%)</title><rect x="317.4" y="355.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="320.4" y="366.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.04%)</title><rect x="317.4" y="339.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="320.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (374 samples, 0.15%)</title><rect x="317.9" y="387.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (374 samples, 0.15%)</title><rect x="317.9" y="371.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.9" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (256 samples, 0.10%)</title><rect x="317.9" y="355.0" width="1.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="320.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (118 samples, 0.05%)</title><rect x="319.1" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="322.1" y="366.0"></text>
</g>
<g>
<title>byte[] (118 samples, 0.05%)</title><rect x="319.1" y="339.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="322.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (183 samples, 0.07%)</title><rect x="319.7" y="387.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (183 samples, 0.07%)</title><rect x="319.7" y="371.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (126 samples, 0.05%)</title><rect x="319.7" y="355.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="322.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (57 samples, 0.02%)</title><rect x="320.3" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.3" y="366.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.02%)</title><rect x="320.3" y="339.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="323.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (186 samples, 0.08%)</title><rect x="320.6" y="387.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (186 samples, 0.08%)</title><rect x="320.6" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (130 samples, 0.05%)</title><rect x="320.6" y="355.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="323.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (56 samples, 0.02%)</title><rect x="321.2" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.2" y="366.0"></text>
</g>
<g>
<title>byte[] (56 samples, 0.02%)</title><rect x="321.2" y="339.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="324.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (69,730 samples, 28.42%)</title><rect x="321.5" y="579.0" width="335.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.5" y="590.0">ru/mail/polis/dao/alexander/marashov/DAOImpl...</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (12,089 samples, 4.93%)</title><rect x="321.5" y="563.0" width="58.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.5" y="574.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (12,044 samples, 4.91%)</title><rect x="321.7" y="547.0" width="57.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.7" y="558.0">com/go..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (59 samples, 0.02%)</title><rect x="321.7" y="531.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="324.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (413 samples, 0.17%)</title><rect x="322.0" y="531.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.0" y="542.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (413 samples, 0.17%)</title><rect x="322.0" y="515.0" width="1.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="325.0" y="526.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (83 samples, 0.03%)</title><rect x="323.9" y="531.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="326.9" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (63 samples, 0.03%)</title><rect x="324.3" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.3" y="542.0"></text>
</g>
<g>
<title>java.lang.Object[] (63 samples, 0.03%)</title><rect x="324.3" y="515.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="327.3" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (10,700 samples, 4.36%)</title><rect x="324.6" y="531.0" width="51.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.6" y="542.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (10,700 samples, 4.36%)</title><rect x="324.6" y="515.0" width="51.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.6" y="526.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (259 samples, 0.11%)</title><rect x="324.6" y="499.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.6" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (259 samples, 0.11%)</title><rect x="324.6" y="483.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.6" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (259 samples, 0.11%)</title><rect x="324.6" y="467.0" width="1.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="327.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10,441 samples, 4.25%)</title><rect x="325.9" y="499.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.9" y="510.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10,441 samples, 4.25%)</title><rect x="325.9" y="483.0" width="50.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.9" y="494.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,441 samples, 4.25%)</title><rect x="325.9" y="467.0" width="50.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.9" y="478.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10,441 samples, 4.25%)</title><rect x="325.9" y="451.0" width="50.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.9" y="462.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (10,441 samples, 4.25%)</title><rect x="325.9" y="435.0" width="50.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.9" y="446.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (10,441 samples, 4.25%)</title><rect x="325.9" y="419.0" width="50.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.9" y="430.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (10,441 samples, 4.25%)</title><rect x="325.9" y="403.0" width="50.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.9" y="414.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (715 samples, 0.29%)</title><rect x="325.9" y="387.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.9" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (715 samples, 0.29%)</title><rect x="325.9" y="371.0" width="3.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="328.9" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (372 samples, 0.15%)</title><rect x="329.3" y="387.0" width="1.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="332.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (3,377 samples, 1.38%)</title><rect x="331.1" y="387.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (1,225 samples, 0.50%)</title><rect x="331.1" y="371.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,225 samples, 0.50%)</title><rect x="331.1" y="355.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.1" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (732 samples, 0.30%)</title><rect x="331.1" y="339.0" width="3.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="334.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (493 samples, 0.20%)</title><rect x="334.6" y="339.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.6" y="350.0"></text>
</g>
<g>
<title>byte[] (493 samples, 0.20%)</title><rect x="334.6" y="323.0" width="2.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="337.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (1,054 samples, 0.43%)</title><rect x="337.0" y="371.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,054 samples, 0.43%)</title><rect x="337.0" y="355.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (726 samples, 0.30%)</title><rect x="337.0" y="339.0" width="3.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="340.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (328 samples, 0.13%)</title><rect x="340.5" y="339.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="343.5" y="350.0"></text>
</g>
<g>
<title>byte[] (328 samples, 0.13%)</title><rect x="340.5" y="323.0" width="1.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="343.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (1,098 samples, 0.45%)</title><rect x="342.1" y="371.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,098 samples, 0.45%)</title><rect x="342.1" y="355.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.1" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (691 samples, 0.28%)</title><rect x="342.1" y="339.0" width="3.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="345.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (407 samples, 0.17%)</title><rect x="345.4" y="339.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.4" y="350.0"></text>
</g>
<g>
<title>byte[] (407 samples, 0.17%)</title><rect x="345.4" y="323.0" width="2.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="348.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (5,977 samples, 2.44%)</title><rect x="347.4" y="387.0" width="28.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.4" y="398.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (367 samples, 0.15%)</title><rect x="347.4" y="371.0" width="1.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="350.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (1,208 samples, 0.49%)</title><rect x="349.1" y="371.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,208 samples, 0.49%)</title><rect x="349.1" y="355.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.1" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (728 samples, 0.30%)</title><rect x="349.1" y="339.0" width="3.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="352.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (480 samples, 0.20%)</title><rect x="352.6" y="339.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.6" y="350.0"></text>
</g>
<g>
<title>byte[] (480 samples, 0.20%)</title><rect x="352.6" y="323.0" width="2.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="355.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (2,237 samples, 0.91%)</title><rect x="354.9" y="371.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,237 samples, 0.91%)</title><rect x="354.9" y="355.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,457 samples, 0.59%)</title><rect x="354.9" y="339.0" width="7.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="357.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (780 samples, 0.32%)</title><rect x="361.9" y="339.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="364.9" y="350.0"></text>
</g>
<g>
<title>byte[] (780 samples, 0.32%)</title><rect x="361.9" y="323.0" width="3.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="364.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (1,102 samples, 0.45%)</title><rect x="365.7" y="371.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,102 samples, 0.45%)</title><rect x="365.7" y="355.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.7" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (747 samples, 0.30%)</title><rect x="365.7" y="339.0" width="3.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="368.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (355 samples, 0.14%)</title><rect x="369.3" y="339.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.3" y="350.0"></text>
</g>
<g>
<title>byte[] (355 samples, 0.14%)</title><rect x="369.3" y="323.0" width="1.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="372.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (1,063 samples, 0.43%)</title><rect x="371.0" y="371.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,063 samples, 0.43%)</title><rect x="371.0" y="355.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (720 samples, 0.29%)</title><rect x="371.0" y="339.0" width="3.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="374.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (343 samples, 0.14%)</title><rect x="374.5" y="339.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="377.5" y="350.0"></text>
</g>
<g>
<title>byte[] (343 samples, 0.14%)</title><rect x="374.5" y="323.0" width="1.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="377.5" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (726 samples, 0.30%)</title><rect x="376.1" y="531.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (726 samples, 0.30%)</title><rect x="376.1" y="515.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (726 samples, 0.30%)</title><rect x="376.1" y="499.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (251 samples, 0.10%)</title><rect x="376.1" y="483.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$146/202599129.getAsBoolean (251 samples, 0.10%)</title><rect x="376.1" y="467.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (251 samples, 0.10%)</title><rect x="376.1" y="451.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (251 samples, 0.10%)</title><rect x="376.1" y="435.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (200 samples, 0.08%)</title><rect x="376.3" y="419.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$134/643474225.apply (200 samples, 0.08%)</title><rect x="376.3" y="403.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (200 samples, 0.08%)</title><rect x="376.3" y="387.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (139 samples, 0.06%)</title><rect x="376.3" y="371.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.3" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (139 samples, 0.06%)</title><rect x="376.3" y="355.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="379.3" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (61 samples, 0.02%)</title><rect x="377.0" y="371.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="380.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (475 samples, 0.19%)</title><rect x="377.3" y="483.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.3" y="494.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (107 samples, 0.04%)</title><rect x="377.3" y="467.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="380.3" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (100 samples, 0.04%)</title><rect x="377.8" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.8" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (100 samples, 0.04%)</title><rect x="377.8" y="451.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.8" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$143/2013896526.get$Lambda (52 samples, 0.02%)</title><rect x="377.8" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.8" y="446.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$143 (52 samples, 0.02%)</title><rect x="377.8" y="419.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="380.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (60 samples, 0.02%)</title><rect x="378.3" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (60 samples, 0.02%)</title><rect x="378.3" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.3" y="462.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (60 samples, 0.02%)</title><rect x="378.3" y="435.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="381.3" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (208 samples, 0.08%)</title><rect x="378.6" y="467.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.6" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (208 samples, 0.08%)</title><rect x="378.6" y="451.0" width="1.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="381.6" y="462.0"></text>
</g>
<g>
<title>java.util.ArrayList (59 samples, 0.02%)</title><rect x="379.6" y="563.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="382.6" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (112 samples, 0.05%)</title><rect x="379.9" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.9" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (112 samples, 0.05%)</title><rect x="379.9" y="547.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="382.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (153 samples, 0.06%)</title><rect x="380.4" y="563.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="383.4" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (153 samples, 0.06%)</title><rect x="380.4" y="547.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="383.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,791 samples, 0.73%)</title><rect x="381.2" y="563.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.2" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (53 samples, 0.02%)</title><rect x="381.2" y="547.0" width="0.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="384.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,738 samples, 0.71%)</title><rect x="381.4" y="547.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,738 samples, 0.71%)</title><rect x="381.4" y="531.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.4" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,738 samples, 0.71%)</title><rect x="381.4" y="515.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.4" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,738 samples, 0.71%)</title><rect x="381.4" y="499.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.4" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,738 samples, 0.71%)</title><rect x="381.4" y="483.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.4" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,738 samples, 0.71%)</title><rect x="381.4" y="467.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,738 samples, 0.71%)</title><rect x="381.4" y="451.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,738 samples, 0.71%)</title><rect x="381.4" y="435.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,738 samples, 0.71%)</title><rect x="381.4" y="419.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,738 samples, 0.71%)</title><rect x="381.4" y="403.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,738 samples, 0.71%)</title><rect x="381.4" y="387.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (131 samples, 0.05%)</title><rect x="381.4" y="371.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (131 samples, 0.05%)</title><rect x="381.4" y="355.0" width="0.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="384.4" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (57 samples, 0.02%)</title><rect x="382.0" y="371.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="385.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (588 samples, 0.24%)</title><rect x="382.3" y="371.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (220 samples, 0.09%)</title><rect x="382.3" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (220 samples, 0.09%)</title><rect x="382.3" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.3" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (142 samples, 0.06%)</title><rect x="382.3" y="323.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="385.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (78 samples, 0.03%)</title><rect x="383.0" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.0" y="334.0"></text>
</g>
<g>
<title>byte[] (78 samples, 0.03%)</title><rect x="383.0" y="307.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="386.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (153 samples, 0.06%)</title><rect x="383.4" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (153 samples, 0.06%)</title><rect x="383.4" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (102 samples, 0.04%)</title><rect x="383.4" y="323.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="386.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (215 samples, 0.09%)</title><rect x="384.1" y="355.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (215 samples, 0.09%)</title><rect x="384.1" y="339.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.1" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (142 samples, 0.06%)</title><rect x="384.1" y="323.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="387.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (73 samples, 0.03%)</title><rect x="384.8" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.8" y="334.0"></text>
</g>
<g>
<title>byte[] (73 samples, 0.03%)</title><rect x="384.8" y="307.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="387.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (962 samples, 0.39%)</title><rect x="385.1" y="371.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (190 samples, 0.08%)</title><rect x="385.4" y="355.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (190 samples, 0.08%)</title><rect x="385.4" y="339.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (118 samples, 0.05%)</title><rect x="385.4" y="323.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="388.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (72 samples, 0.03%)</title><rect x="385.9" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.9" y="334.0"></text>
</g>
<g>
<title>byte[] (72 samples, 0.03%)</title><rect x="385.9" y="307.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="388.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (354 samples, 0.14%)</title><rect x="386.3" y="355.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (354 samples, 0.14%)</title><rect x="386.3" y="339.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.3" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (210 samples, 0.09%)</title><rect x="386.3" y="323.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="389.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (144 samples, 0.06%)</title><rect x="387.3" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.3" y="334.0"></text>
</g>
<g>
<title>byte[] (144 samples, 0.06%)</title><rect x="387.3" y="307.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="390.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (175 samples, 0.07%)</title><rect x="388.0" y="355.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (175 samples, 0.07%)</title><rect x="388.0" y="339.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (104 samples, 0.04%)</title><rect x="388.0" y="323.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="391.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (71 samples, 0.03%)</title><rect x="388.5" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.5" y="334.0"></text>
</g>
<g>
<title>byte[] (71 samples, 0.03%)</title><rect x="388.5" y="307.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="391.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (194 samples, 0.08%)</title><rect x="388.8" y="355.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (194 samples, 0.08%)</title><rect x="388.8" y="339.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.8" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (106 samples, 0.04%)</title><rect x="388.8" y="323.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="391.8" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (88 samples, 0.04%)</title><rect x="389.3" y="323.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.3" y="334.0"></text>
</g>
<g>
<title>byte[] (88 samples, 0.04%)</title><rect x="389.3" y="307.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="392.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (757 samples, 0.31%)</title><rect x="389.8" y="563.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="392.8" y="574.0"></text>
</g>
<g>
<title>java/util/Collection.stream (248 samples, 0.10%)</title><rect x="389.8" y="547.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (73 samples, 0.03%)</title><rect x="389.8" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.8" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (73 samples, 0.03%)</title><rect x="389.8" y="515.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="392.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (175 samples, 0.07%)</title><rect x="390.1" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.1" y="542.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (175 samples, 0.07%)</title><rect x="390.1" y="515.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="393.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (114 samples, 0.05%)</title><rect x="391.1" y="547.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (114 samples, 0.05%)</title><rect x="391.1" y="531.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (114 samples, 0.05%)</title><rect x="391.1" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.1" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (114 samples, 0.05%)</title><rect x="391.1" y="499.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="394.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (205 samples, 0.08%)</title><rect x="391.7" y="547.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.7" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (54 samples, 0.02%)</title><rect x="391.7" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.7" y="542.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (54 samples, 0.02%)</title><rect x="391.7" y="515.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="394.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (151 samples, 0.06%)</title><rect x="392.0" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (107 samples, 0.04%)</title><rect x="392.2" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.2" y="526.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (107 samples, 0.04%)</title><rect x="392.2" y="499.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="395.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (150 samples, 0.06%)</title><rect x="392.7" y="547.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.7" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (150 samples, 0.06%)</title><rect x="392.7" y="531.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="395.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (54,769 samples, 22.32%)</title><rect x="393.4" y="563.0" width="263.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.4" y="574.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (362 samples, 0.15%)</title><rect x="393.4" y="547.0" width="1.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="396.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (54,407 samples, 22.17%)</title><rect x="395.1" y="547.0" width="261.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="398.1" y="558.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (54,407 samples, 22.17%)</title><rect x="395.1" y="531.0" width="261.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.1" y="542.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (54,407 samples, 22.17%)</title><rect x="395.1" y="515.0" width="261.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.1" y="526.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (19,076 samples, 7.77%)</title><rect x="395.1" y="499.0" width="91.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.1" y="510.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (19,076 samples, 7.77%)</title><rect x="395.1" y="483.0" width="91.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.1" y="494.0">java/nio/By..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,727 samples, 4.78%)</title><rect x="395.1" y="467.0" width="56.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="398.1" y="478.0">java.n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7,349 samples, 2.99%)</title><rect x="451.5" y="467.0" width="35.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.5" y="478.0">jav..</text>
</g>
<g>
<title>byte[] (7,349 samples, 2.99%)</title><rect x="451.5" y="451.0" width="35.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="454.5" y="462.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (17,753 samples, 7.23%)</title><rect x="486.9" y="499.0" width="85.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.9" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,753 samples, 7.23%)</title><rect x="486.9" y="483.0" width="85.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.9" y="494.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,701 samples, 4.77%)</title><rect x="486.9" y="467.0" width="56.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="489.9" y="478.0">java.n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6,052 samples, 2.47%)</title><rect x="543.1" y="467.0" width="29.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="546.1" y="478.0">ja..</text>
</g>
<g>
<title>byte[] (6,052 samples, 2.47%)</title><rect x="543.1" y="451.0" width="29.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="546.1" y="462.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (17,578 samples, 7.16%)</title><rect x="572.2" y="499.0" width="84.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.2" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,578 samples, 7.16%)</title><rect x="572.2" y="483.0" width="84.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.2" y="494.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,612 samples, 4.73%)</title><rect x="572.2" y="467.0" width="55.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="575.2" y="478.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,966 samples, 2.43%)</title><rect x="628.1" y="467.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="631.1" y="478.0">ja..</text>
</g>
<g>
<title>byte[] (5,966 samples, 2.43%)</title><rect x="628.1" y="451.0" width="28.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="631.1" y="462.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (2,940 samples, 1.20%)</title><rect x="656.8" y="595.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.8" y="606.0"></text>
</g>
<g>
<title>byte[] (112 samples, 0.05%)</title><rect x="656.8" y="579.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="659.8" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.CalcSizeStream (97 samples, 0.04%)</title><rect x="657.3" y="579.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="660.3" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,284 samples, 0.52%)</title><rect x="657.8" y="579.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.8" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (1,284 samples, 0.52%)</title><rect x="657.8" y="563.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.8" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (1,284 samples, 0.52%)</title><rect x="657.8" y="547.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.8" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,284 samples, 0.52%)</title><rect x="657.8" y="531.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.8" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,284 samples, 0.52%)</title><rect x="657.8" y="515.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.8" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,284 samples, 0.52%)</title><rect x="657.8" y="499.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.8" y="510.0"></text>
</g>
<g>
<title>int[] (652 samples, 0.27%)</title><rect x="657.8" y="483.0" width="3.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="660.8" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (632 samples, 0.26%)</title><rect x="660.9" y="483.0" width="3.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="663.9" y="494.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.&lt;init&gt; (106 samples, 0.04%)</title><rect x="664.0" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.0" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.SerializationContext (106 samples, 0.04%)</title><rect x="664.0" y="563.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="667.0" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,287 samples, 0.52%)</title><rect x="664.5" y="579.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.5" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (1,287 samples, 0.52%)</title><rect x="664.5" y="563.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.5" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (1,287 samples, 0.52%)</title><rect x="664.5" y="547.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.5" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,287 samples, 0.52%)</title><rect x="664.5" y="531.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.5" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,287 samples, 0.52%)</title><rect x="664.5" y="515.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.5" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,287 samples, 0.52%)</title><rect x="664.5" y="499.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.5" y="510.0"></text>
</g>
<g>
<title>int[] (656 samples, 0.27%)</title><rect x="664.5" y="483.0" width="3.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="667.5" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (631 samples, 0.26%)</title><rect x="667.6" y="483.0" width="3.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="670.6" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValueSerializer$SerializableValue (54 samples, 0.02%)</title><rect x="670.7" y="579.0" width="0.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="673.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (3,437 samples, 1.40%)</title><rect x="670.9" y="611.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="673.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,374 samples, 1.37%)</title><rect x="670.9" y="595.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,374 samples, 1.37%)</title><rect x="670.9" y="579.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$86/914604914.get$Lambda (3,374 samples, 1.37%)</title><rect x="670.9" y="563.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="673.9" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$86 (3,374 samples, 1.37%)</title><rect x="670.9" y="547.0" width="16.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="673.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (63 samples, 0.03%)</title><rect x="687.1" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (63 samples, 0.03%)</title><rect x="687.1" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (63 samples, 0.03%)</title><rect x="687.1" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (63 samples, 0.03%)</title><rect x="687.1" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="690.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (63 samples, 0.03%)</title><rect x="687.1" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.1" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (63 samples, 0.03%)</title><rect x="687.1" y="515.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="690.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (93 samples, 0.04%)</title><rect x="687.4" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (93 samples, 0.04%)</title><rect x="687.4" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (93 samples, 0.04%)</title><rect x="687.4" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.4" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (93 samples, 0.04%)</title><rect x="687.4" y="563.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="690.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (7,565 samples, 3.08%)</title><rect x="687.9" y="611.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.9" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateGetResult (7,565 samples, 3.08%)</title><rect x="687.9" y="595.0" width="36.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.9" y="606.0">ru/..</text>
</g>
<g>
<title>java/util/HashMap.entrySet (95 samples, 0.04%)</title><rect x="687.9" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.9" y="590.0"></text>
</g>
<g>
<title>java.util.HashMap$EntrySet (95 samples, 0.04%)</title><rect x="687.9" y="563.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="690.9" y="574.0"></text>
</g>
<g>
<title>one.nio.http.Response (568 samples, 0.23%)</title><rect x="688.3" y="579.0" width="2.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="691.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6,902 samples, 2.81%)</title><rect x="691.1" y="579.0" width="33.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.1" y="590.0">on..</text>
</g>
<g>
<title>byte[] (1,512 samples, 0.62%)</title><rect x="691.1" y="563.0" width="7.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="694.1" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (1,436 samples, 0.59%)</title><rect x="698.3" y="563.0" width="7.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="701.3" y="574.0"></text>
</g>
<g>
<title>java.lang.String (3,954 samples, 1.61%)</title><rect x="705.3" y="563.0" width="19.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="708.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.&lt;init&gt; (2,241 samples, 0.91%)</title><rect x="724.3" y="611.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="727.3" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap (1,866 samples, 0.76%)</title><rect x="724.3" y="595.0" width="8.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="727.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (375 samples, 0.15%)</title><rect x="733.2" y="595.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="736.2" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (70 samples, 0.03%)</title><rect x="733.2" y="579.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="736.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (152 samples, 0.06%)</title><rect x="733.6" y="579.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="736.6" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (152 samples, 0.06%)</title><rect x="733.6" y="563.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="736.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (153 samples, 0.06%)</title><rect x="734.3" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (153 samples, 0.06%)</title><rect x="734.3" y="563.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.3" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (153 samples, 0.06%)</title><rect x="734.3" y="547.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="737.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (6,467 samples, 2.64%)</title><rect x="735.0" y="611.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.0" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (6,467 samples, 2.64%)</title><rect x="735.0" y="595.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.0" y="606.0">ru..</text>
</g>
<g>
<title>java.lang.String[] (475 samples, 0.19%)</title><rect x="735.0" y="579.0" width="2.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="738.0" y="590.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (3,786 samples, 1.54%)</title><rect x="737.3" y="579.0" width="18.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="740.3" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (233 samples, 0.09%)</title><rect x="755.5" y="579.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (233 samples, 0.09%)</title><rect x="755.5" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.5" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (233 samples, 0.09%)</title><rect x="755.5" y="547.0" width="1.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="758.5" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (1,973 samples, 0.80%)</title><rect x="756.7" y="579.0" width="9.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="759.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (3,239 samples, 1.32%)</title><rect x="766.1" y="627.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,239 samples, 1.32%)</title><rect x="766.1" y="611.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="769.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3,239 samples, 1.32%)</title><rect x="766.1" y="595.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="769.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,671 samples, 0.68%)</title><rect x="766.1" y="579.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,671 samples, 0.68%)</title><rect x="766.1" y="563.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="769.1" y="574.0"></text>
</g>
<g>
<title>byte[] (791 samples, 0.32%)</title><rect x="766.1" y="547.0" width="3.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="769.1" y="558.0"></text>
</g>
<g>
<title>byte[] (880 samples, 0.36%)</title><rect x="769.9" y="547.0" width="4.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="772.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,568 samples, 0.64%)</title><rect x="774.2" y="579.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.2" y="590.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,568 samples, 0.64%)</title><rect x="774.2" y="563.0" width="7.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="777.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (17,199 samples, 7.01%)</title><rect x="781.7" y="627.0" width="82.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.7" y="638.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.getBytes (567 samples, 0.23%)</title><rect x="781.7" y="611.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="784.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (567 samples, 0.23%)</title><rect x="781.7" y="595.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (567 samples, 0.23%)</title><rect x="781.7" y="579.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.7" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (567 samples, 0.23%)</title><rect x="781.7" y="563.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.7" y="574.0"></text>
</g>
<g>
<title>byte[] (567 samples, 0.23%)</title><rect x="781.7" y="547.0" width="2.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="784.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,958 samples, 0.80%)</title><rect x="784.4" y="611.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,958 samples, 0.80%)</title><rect x="784.4" y="595.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.4" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,958 samples, 0.80%)</title><rect x="784.4" y="579.0" width="9.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="787.4" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (710 samples, 0.29%)</title><rect x="793.9" y="611.0" width="3.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="796.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (13,964 samples, 5.69%)</title><rect x="797.3" y="611.0" width="67.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.3" y="622.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (5,909 samples, 2.41%)</title><rect x="797.3" y="595.0" width="28.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.3" y="606.0">co..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (5,465 samples, 2.23%)</title><rect x="797.3" y="579.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="800.3" y="590.0">c..</text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (5,465 samples, 2.23%)</title><rect x="797.3" y="563.0" width="26.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="800.3" y="574.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (444 samples, 0.18%)</title><rect x="823.6" y="579.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.6" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (444 samples, 0.18%)</title><rect x="823.6" y="563.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="826.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (8,055 samples, 3.28%)</title><rect x="825.7" y="595.0" width="38.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.7" y="606.0">com..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2,406 samples, 0.98%)</title><rect x="825.7" y="579.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.7" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2,406 samples, 0.98%)</title><rect x="825.7" y="563.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="828.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,406 samples, 0.98%)</title><rect x="825.7" y="547.0" width="11.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,406 samples, 0.98%)</title><rect x="825.7" y="531.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="828.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (2,406 samples, 0.98%)</title><rect x="825.7" y="515.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,406 samples, 0.98%)</title><rect x="825.7" y="499.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="828.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,406 samples, 0.98%)</title><rect x="825.7" y="483.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="828.7" y="494.0"></text>
</g>
<g>
<title>java.lang.String (584 samples, 0.24%)</title><rect x="825.7" y="467.0" width="2.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="828.7" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,822 samples, 0.74%)</title><rect x="828.5" y="467.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.5" y="478.0"></text>
</g>
<g>
<title>byte[] (1,822 samples, 0.74%)</title><rect x="828.5" y="451.0" width="8.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="831.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (446 samples, 0.18%)</title><rect x="837.3" y="579.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (446 samples, 0.18%)</title><rect x="837.3" y="563.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (446 samples, 0.18%)</title><rect x="837.3" y="547.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.3" y="558.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (446 samples, 0.18%)</title><rect x="837.3" y="531.0" width="2.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="840.3" y="542.0"></text>
</g>
<g>
<title>java.util.ArrayList (718 samples, 0.29%)</title><rect x="839.4" y="579.0" width="3.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="842.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4,485 samples, 1.83%)</title><rect x="842.9" y="579.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.add (4,485 samples, 1.83%)</title><rect x="842.9" y="563.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (4,485 samples, 1.83%)</title><rect x="842.9" y="547.0" width="21.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (4,485 samples, 1.83%)</title><rect x="842.9" y="531.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.9" y="542.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (4,485 samples, 1.83%)</title><rect x="842.9" y="515.0" width="21.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="845.9" y="526.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (4,483 samples, 1.83%)</title><rect x="842.9" y="499.0" width="21.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="845.9" y="510.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2,612 samples, 1.06%)</title><rect x="864.4" y="659.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.4" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,612 samples, 1.06%)</title><rect x="864.4" y="643.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="867.4" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$121/1107097229.run (2,612 samples, 1.06%)</title><rect x="864.4" y="627.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="867.4" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2,612 samples, 1.06%)</title><rect x="864.4" y="611.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.4" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2,612 samples, 1.06%)</title><rect x="864.4" y="595.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.4" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2,612 samples, 1.06%)</title><rect x="864.4" y="579.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="867.4" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2,567 samples, 1.05%)</title><rect x="864.6" y="563.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.6" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,461 samples, 1.00%)</title><rect x="864.6" y="547.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="867.6" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,461 samples, 1.00%)</title><rect x="864.6" y="531.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.6" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,461 samples, 1.00%)</title><rect x="864.6" y="515.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.6" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (2,461 samples, 1.00%)</title><rect x="864.6" y="499.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.6" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,602 samples, 0.65%)</title><rect x="864.7" y="483.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="867.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,602 samples, 0.65%)</title><rect x="864.7" y="467.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,593 samples, 0.65%)</title><rect x="864.7" y="451.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.7" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,593 samples, 0.65%)</title><rect x="864.7" y="435.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.7" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,531 samples, 0.62%)</title><rect x="864.7" y="419.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.7" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,531 samples, 0.62%)</title><rect x="864.7" y="403.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="867.7" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,531 samples, 0.62%)</title><rect x="864.7" y="387.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.7" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,531 samples, 0.62%)</title><rect x="864.7" y="371.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.7" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,531 samples, 0.62%)</title><rect x="864.7" y="355.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.7" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,530 samples, 0.62%)</title><rect x="864.7" y="339.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="867.7" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,530 samples, 0.62%)</title><rect x="864.7" y="323.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.7" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,530 samples, 0.62%)</title><rect x="864.7" y="307.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="867.7" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,530 samples, 0.62%)</title><rect x="864.7" y="291.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.7" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,530 samples, 0.62%)</title><rect x="864.7" y="275.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.7" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,530 samples, 0.62%)</title><rect x="864.7" y="259.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.7" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,530 samples, 0.62%)</title><rect x="864.7" y="243.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="867.7" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,530 samples, 0.62%)</title><rect x="864.7" y="227.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.7" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,391 samples, 0.57%)</title><rect x="864.7" y="211.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.7" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1,391 samples, 0.57%)</title><rect x="864.7" y="195.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="867.7" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,389 samples, 0.57%)</title><rect x="864.7" y="179.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.7" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1,389 samples, 0.57%)</title><rect x="864.7" y="163.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="867.7" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (512 samples, 0.21%)</title><rect x="864.7" y="147.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.7" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (428 samples, 0.17%)</title><rect x="864.7" y="131.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.7" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (403 samples, 0.16%)</title><rect x="864.7" y="115.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="867.7" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (403 samples, 0.16%)</title><rect x="864.7" y="99.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.7" y="110.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (228 samples, 0.09%)</title><rect x="864.9" y="83.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="867.9" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (192 samples, 0.08%)</title><rect x="865.0" y="67.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.0" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (168 samples, 0.07%)</title><rect x="865.1" y="51.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.1" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (168 samples, 0.07%)</title><rect x="865.1" y="35.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="868.1" y="46.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (137 samples, 0.06%)</title><rect x="865.9" y="83.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.9" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (137 samples, 0.06%)</title><rect x="865.9" y="67.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="868.9" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (84 samples, 0.03%)</title><rect x="866.7" y="131.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.7" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (57 samples, 0.02%)</title><rect x="867.1" y="147.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="870.1" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (460 samples, 0.19%)</title><rect x="867.4" y="147.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="870.4" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (420 samples, 0.17%)</title><rect x="867.6" y="131.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.6" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (393 samples, 0.16%)</title><rect x="867.8" y="115.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.8" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (393 samples, 0.16%)</title><rect x="867.8" y="99.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="870.8" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (351 samples, 0.14%)</title><rect x="869.7" y="147.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="872.7" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (302 samples, 0.12%)</title><rect x="869.7" y="131.0" width="1.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="872.7" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (139 samples, 0.06%)</title><rect x="871.4" y="211.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.4" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (139 samples, 0.06%)</title><rect x="871.4" y="195.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="874.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (139 samples, 0.06%)</title><rect x="871.4" y="179.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (139 samples, 0.06%)</title><rect x="871.4" y="163.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.4" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (139 samples, 0.06%)</title><rect x="871.4" y="147.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="874.4" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (139 samples, 0.06%)</title><rect x="871.4" y="131.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="874.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (139 samples, 0.06%)</title><rect x="871.4" y="115.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.4" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (139 samples, 0.06%)</title><rect x="871.4" y="99.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.4" y="110.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (139 samples, 0.06%)</title><rect x="871.4" y="83.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.4" y="94.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (138 samples, 0.06%)</title><rect x="871.4" y="67.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.4" y="78.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (60 samples, 0.02%)</title><rect x="871.5" y="51.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="874.5" y="62.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (61 samples, 0.02%)</title><rect x="872.0" y="419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (636 samples, 0.26%)</title><rect x="872.4" y="483.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.4" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (636 samples, 0.26%)</title><rect x="872.4" y="467.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.4" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (636 samples, 0.26%)</title><rect x="872.4" y="451.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (632 samples, 0.26%)</title><rect x="872.4" y="435.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="875.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (632 samples, 0.26%)</title><rect x="872.4" y="419.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (615 samples, 0.25%)</title><rect x="872.4" y="403.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (605 samples, 0.25%)</title><rect x="872.4" y="387.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (605 samples, 0.25%)</title><rect x="872.4" y="371.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (593 samples, 0.24%)</title><rect x="872.5" y="355.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (575 samples, 0.23%)</title><rect x="872.5" y="339.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="875.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (554 samples, 0.23%)</title><rect x="872.6" y="323.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.6" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (511 samples, 0.21%)</title><rect x="872.8" y="307.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.8" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (500 samples, 0.20%)</title><rect x="872.8" y="291.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (500 samples, 0.20%)</title><rect x="872.8" y="275.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="875.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (500 samples, 0.20%)</title><rect x="872.8" y="259.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.8" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (500 samples, 0.20%)</title><rect x="872.8" y="243.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.8" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (475 samples, 0.19%)</title><rect x="872.9" y="227.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="875.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (475 samples, 0.19%)</title><rect x="872.9" y="211.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (243 samples, 0.10%)</title><rect x="872.9" y="195.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (76 samples, 0.03%)</title><rect x="872.9" y="179.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (59 samples, 0.02%)</title><rect x="872.9" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.9" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (167 samples, 0.07%)</title><rect x="873.3" y="179.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.3" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (149 samples, 0.06%)</title><rect x="873.3" y="163.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.3" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (148 samples, 0.06%)</title><rect x="873.3" y="147.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="876.3" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (148 samples, 0.06%)</title><rect x="873.3" y="131.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.3" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (128 samples, 0.05%)</title><rect x="873.4" y="115.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="876.4" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (112 samples, 0.05%)</title><rect x="873.4" y="99.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.4" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (67 samples, 0.03%)</title><rect x="873.6" y="83.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="876.6" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (53 samples, 0.02%)</title><rect x="873.6" y="67.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="876.6" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (78 samples, 0.03%)</title><rect x="874.1" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="877.1" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (61 samples, 0.02%)</title><rect x="874.1" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.1" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (61 samples, 0.02%)</title><rect x="874.1" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="877.1" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (52 samples, 0.02%)</title><rect x="874.2" y="147.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="877.2" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (133 samples, 0.05%)</title><rect x="874.5" y="195.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.5" y="206.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (133 samples, 0.05%)</title><rect x="874.5" y="179.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="877.5" y="190.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (80 samples, 0.03%)</title><rect x="875.4" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.4" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (80 samples, 0.03%)</title><rect x="875.4" y="467.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.4" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (80 samples, 0.03%)</title><rect x="875.4" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="878.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (80 samples, 0.03%)</title><rect x="875.4" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="878.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (54 samples, 0.02%)</title><rect x="875.6" y="419.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.6" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (138 samples, 0.06%)</title><rect x="875.8" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.8" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (134 samples, 0.05%)</title><rect x="875.8" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.8" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (134 samples, 0.05%)</title><rect x="875.8" y="451.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.8" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (134 samples, 0.05%)</title><rect x="875.8" y="435.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.8" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (134 samples, 0.05%)</title><rect x="875.8" y="419.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.8" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (134 samples, 0.05%)</title><rect x="875.8" y="403.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="878.8" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (83 samples, 0.03%)</title><rect x="875.9" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.9" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (102 samples, 0.04%)</title><rect x="876.5" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="879.5" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (101 samples, 0.04%)</title><rect x="876.5" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="879.5" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (100 samples, 0.04%)</title><rect x="876.5" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="879.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (99 samples, 0.04%)</title><rect x="876.5" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (79 samples, 0.03%)</title><rect x="876.5" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="879.5" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (65,094 samples, 26.53%)</title><rect x="877.0" y="707.0" width="313.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.0" y="718.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,960 samples, 0.80%)</title><rect x="877.0" y="691.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="880.0" y="702.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,960 samples, 0.80%)</title><rect x="877.0" y="675.0" width="9.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="880.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (63,134 samples, 25.73%)</title><rect x="886.4" y="691.0" width="303.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.4" y="702.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (63,134 samples, 25.73%)</title><rect x="886.4" y="675.0" width="303.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="889.4" y="686.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (63,134 samples, 25.73%)</title><rect x="886.4" y="659.0" width="303.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="889.4" y="670.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (17,829 samples, 7.27%)</title><rect x="886.4" y="643.0" width="85.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="889.4" y="654.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (17,829 samples, 7.27%)</title><rect x="886.4" y="627.0" width="85.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.4" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (7,602 samples, 3.10%)</title><rect x="886.4" y="611.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="889.4" y="622.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,084 samples, 0.85%)</title><rect x="886.4" y="595.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="889.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,084 samples, 0.85%)</title><rect x="886.4" y="579.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="889.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,084 samples, 0.85%)</title><rect x="886.4" y="563.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.4" y="574.0"></text>
</g>
<g>
<title>java.lang.String (820 samples, 0.33%)</title><rect x="886.4" y="547.0" width="3.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="889.4" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,264 samples, 0.52%)</title><rect x="890.3" y="547.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="893.3" y="558.0"></text>
</g>
<g>
<title>byte[] (1,264 samples, 0.52%)</title><rect x="890.3" y="531.0" width="6.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="893.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3,791 samples, 1.54%)</title><rect x="896.4" y="595.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="899.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,791 samples, 1.54%)</title><rect x="896.4" y="579.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,791 samples, 1.54%)</title><rect x="896.4" y="563.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="899.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,791 samples, 1.54%)</title><rect x="896.4" y="547.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="899.4" y="558.0"></text>
</g>
<g>
<title>java.lang.String (2,146 samples, 0.87%)</title><rect x="896.4" y="531.0" width="10.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="899.4" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,645 samples, 0.67%)</title><rect x="906.7" y="531.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.7" y="542.0"></text>
</g>
<g>
<title>byte[] (1,645 samples, 0.67%)</title><rect x="906.7" y="515.0" width="8.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="909.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (1,727 samples, 0.70%)</title><rect x="914.7" y="595.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="917.7" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/76338237.linkToTargetMethod (1,710 samples, 0.70%)</title><rect x="914.7" y="579.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="917.7" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,710 samples, 0.70%)</title><rect x="914.7" y="563.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="917.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$151/1948971226.get$Lambda (1,710 samples, 0.70%)</title><rect x="914.7" y="547.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.7" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$151 (1,710 samples, 0.70%)</title><rect x="914.7" y="531.0" width="8.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="917.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10,227 samples, 4.17%)</title><rect x="923.0" y="611.0" width="49.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.0" y="622.0">one/n..</text>
</g>
<g>
<title>java/lang/String.substring (10,227 samples, 4.17%)</title><rect x="923.0" y="595.0" width="49.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.0" y="606.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10,227 samples, 4.17%)</title><rect x="923.0" y="579.0" width="49.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.0" y="590.0">java/..</text>
</g>
<g>
<title>java.lang.String (5,222 samples, 2.13%)</title><rect x="923.0" y="563.0" width="25.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="926.0" y="574.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,005 samples, 2.04%)</title><rect x="948.1" y="563.0" width="24.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.1" y="574.0">j..</text>
</g>
<g>
<title>byte[] (5,005 samples, 2.04%)</title><rect x="948.1" y="547.0" width="24.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="951.1" y="558.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (31,875 samples, 12.99%)</title><rect x="972.1" y="643.0" width="153.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.1" y="654.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one.nio.http.Request (5,920 samples, 2.41%)</title><rect x="972.1" y="627.0" width="28.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="975.1" y="638.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,009 samples, 1.63%)</title><rect x="1000.6" y="627.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1003.6" y="638.0"></text>
</g>
<g>
<title>java.lang.String[] (3,130 samples, 1.28%)</title><rect x="1000.6" y="611.0" width="15.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1003.6" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (879 samples, 0.36%)</title><rect x="1015.7" y="611.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1018.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21,946 samples, 8.94%)</title><rect x="1019.9" y="627.0" width="105.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1022.9" y="638.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (21,946 samples, 8.94%)</title><rect x="1019.9" y="611.0" width="105.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1022.9" y="622.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (5,327 samples, 2.17%)</title><rect x="1019.9" y="595.0" width="25.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1022.9" y="606.0">c..</text>
</g>
<g>
<title>char[] (6,073 samples, 2.47%)</title><rect x="1045.5" y="595.0" width="29.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1048.5" y="606.0">ch..</text>
</g>
<g>
<title>java.lang.String (1,131 samples, 0.46%)</title><rect x="1074.7" y="595.0" width="5.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1077.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,415 samples, 3.84%)</title><rect x="1080.1" y="595.0" width="45.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1083.1" y="606.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,415 samples, 3.84%)</title><rect x="1080.1" y="579.0" width="45.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1083.1" y="590.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (9,415 samples, 3.84%)</title><rect x="1080.1" y="563.0" width="45.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1083.1" y="574.0">java..</text>
</g>
<g>
<title>byte[] (9,402 samples, 3.83%)</title><rect x="1080.1" y="547.0" width="45.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1083.1" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,430 samples, 5.47%)</title><rect x="1125.4" y="643.0" width="64.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.4" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,430 samples, 5.47%)</title><rect x="1125.4" y="627.0" width="64.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.4" y="638.0">one/nio..</text>
</g>
<g>
<title>char[] (5,494 samples, 2.24%)</title><rect x="1125.4" y="611.0" width="26.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1128.4" y="622.0">c..</text>
</g>
<g>
<title>char[] (691 samples, 0.28%)</title><rect x="1151.8" y="611.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1154.8" y="622.0"></text>
</g>
<g>
<title>java.lang.String (2,981 samples, 1.21%)</title><rect x="1155.2" y="611.0" width="14.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1158.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,264 samples, 1.74%)</title><rect x="1169.5" y="611.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1172.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,264 samples, 1.74%)</title><rect x="1169.5" y="595.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1172.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,264 samples, 1.74%)</title><rect x="1169.5" y="579.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1172.5" y="590.0"></text>
</g>
<g>
<title>byte[] (4,264 samples, 1.74%)</title><rect x="1169.5" y="563.0" width="20.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1172.5" y="574.0"></text>
</g>
</g>
</svg>
