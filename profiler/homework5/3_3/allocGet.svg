<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (250,145 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (181,014 samples, 72.36%)</title><rect x="10.0" y="707.0" width="853.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="718.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (180,971 samples, 72.35%)</title><rect x="10.2" y="691.0" width="853.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.2" y="702.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (180,971 samples, 72.35%)</title><rect x="10.2" y="675.0" width="853.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.2" y="686.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,873 samples, 0.75%)</title><rect x="10.2" y="659.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,873 samples, 0.75%)</title><rect x="10.2" y="643.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,862 samples, 0.74%)</title><rect x="10.2" y="627.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,862 samples, 0.74%)</title><rect x="10.2" y="611.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.2" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,862 samples, 0.74%)</title><rect x="10.2" y="595.0" width="8.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="13.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$149/1637537171.run (28,015 samples, 11.20%)</title><rect x="19.0" y="659.0" width="132.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.0" y="670.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$0 (28,015 samples, 11.20%)</title><rect x="19.0" y="643.0" width="132.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.0" y="654.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (27,694 samples, 11.07%)</title><rect x="19.0" y="627.0" width="130.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="638.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (69 samples, 0.03%)</title><rect x="19.2" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (26,683 samples, 10.67%)</title><rect x="19.5" y="611.0" width="125.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.5" y="622.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (525 samples, 0.21%)</title><rect x="19.5" y="595.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.5" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (525 samples, 0.21%)</title><rect x="19.5" y="579.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (525 samples, 0.21%)</title><rect x="19.5" y="563.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.5" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (525 samples, 0.21%)</title><rect x="19.5" y="547.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (525 samples, 0.21%)</title><rect x="19.5" y="531.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (525 samples, 0.21%)</title><rect x="19.5" y="515.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (525 samples, 0.21%)</title><rect x="19.5" y="499.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (525 samples, 0.21%)</title><rect x="19.5" y="483.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (525 samples, 0.21%)</title><rect x="19.5" y="467.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (525 samples, 0.21%)</title><rect x="19.5" y="451.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (525 samples, 0.21%)</title><rect x="19.5" y="435.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (165 samples, 0.07%)</title><rect x="19.8" y="419.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (56 samples, 0.02%)</title><rect x="19.8" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (56 samples, 0.02%)</title><rect x="19.8" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (59 samples, 0.02%)</title><rect x="20.1" y="403.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (59 samples, 0.02%)</title><rect x="20.1" y="387.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (298 samples, 0.12%)</title><rect x="20.6" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (69 samples, 0.03%)</title><rect x="20.6" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (69 samples, 0.03%)</title><rect x="20.6" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (91 samples, 0.04%)</title><rect x="21.0" y="403.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (91 samples, 0.04%)</title><rect x="21.0" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.0" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (73 samples, 0.03%)</title><rect x="21.0" y="371.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="24.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (56 samples, 0.02%)</title><rect x="21.4" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (56 samples, 0.02%)</title><rect x="21.4" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (67 samples, 0.03%)</title><rect x="21.7" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (67 samples, 0.03%)</title><rect x="21.7" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (26,158 samples, 10.46%)</title><rect x="22.0" y="595.0" width="123.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.0" y="606.0">ru/mail/polis/d..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3,042 samples, 1.22%)</title><rect x="22.0" y="579.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.0" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3,029 samples, 1.21%)</title><rect x="22.0" y="563.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.0" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (120 samples, 0.05%)</title><rect x="22.1" y="547.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="558.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (120 samples, 0.05%)</title><rect x="22.1" y="531.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="25.1" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,646 samples, 1.06%)</title><rect x="22.9" y="547.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.9" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,646 samples, 1.06%)</title><rect x="22.9" y="531.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.9" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,616 samples, 1.05%)</title><rect x="23.1" y="515.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.1" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,616 samples, 1.05%)</title><rect x="23.1" y="499.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,616 samples, 1.05%)</title><rect x="23.1" y="483.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,616 samples, 1.05%)</title><rect x="23.1" y="467.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,616 samples, 1.05%)</title><rect x="23.1" y="451.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (2,616 samples, 1.05%)</title><rect x="23.1" y="435.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (2,616 samples, 1.05%)</title><rect x="23.1" y="419.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (176 samples, 0.07%)</title><rect x="23.1" y="403.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.1" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (176 samples, 0.07%)</title><rect x="23.1" y="387.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="26.1" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (80 samples, 0.03%)</title><rect x="23.9" y="403.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="26.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (863 samples, 0.34%)</title><rect x="24.3" y="403.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (284 samples, 0.11%)</title><rect x="24.3" y="387.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (284 samples, 0.11%)</title><rect x="24.3" y="371.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.3" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (191 samples, 0.08%)</title><rect x="24.3" y="355.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="27.3" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (93 samples, 0.04%)</title><rect x="25.2" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.2" y="366.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.04%)</title><rect x="25.2" y="339.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="28.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (304 samples, 0.12%)</title><rect x="25.6" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (304 samples, 0.12%)</title><rect x="25.6" y="371.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (208 samples, 0.08%)</title><rect x="25.6" y="355.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="28.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (96 samples, 0.04%)</title><rect x="26.6" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.6" y="366.0"></text>
</g>
<g>
<title>byte[] (96 samples, 0.04%)</title><rect x="26.6" y="339.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="29.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (275 samples, 0.11%)</title><rect x="27.0" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (275 samples, 0.11%)</title><rect x="27.0" y="371.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.0" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (185 samples, 0.07%)</title><rect x="27.0" y="355.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="30.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (90 samples, 0.04%)</title><rect x="27.9" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.9" y="366.0"></text>
</g>
<g>
<title>byte[] (90 samples, 0.04%)</title><rect x="27.9" y="339.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="30.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (1,497 samples, 0.60%)</title><rect x="28.3" y="403.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.3" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (82 samples, 0.03%)</title><rect x="28.3" y="387.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="31.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (293 samples, 0.12%)</title><rect x="28.7" y="387.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (293 samples, 0.12%)</title><rect x="28.7" y="371.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (178 samples, 0.07%)</title><rect x="28.7" y="355.0" width="0.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="31.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (115 samples, 0.05%)</title><rect x="29.6" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.6" y="366.0"></text>
</g>
<g>
<title>byte[] (115 samples, 0.05%)</title><rect x="29.6" y="339.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="32.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (538 samples, 0.22%)</title><rect x="30.1" y="387.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (538 samples, 0.22%)</title><rect x="30.1" y="371.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.1" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (355 samples, 0.14%)</title><rect x="30.1" y="355.0" width="1.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="33.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (183 samples, 0.07%)</title><rect x="31.8" y="355.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.8" y="366.0"></text>
</g>
<g>
<title>byte[] (183 samples, 0.07%)</title><rect x="31.8" y="339.0" width="0.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="34.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (311 samples, 0.12%)</title><rect x="32.6" y="387.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (311 samples, 0.12%)</title><rect x="32.6" y="371.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (204 samples, 0.08%)</title><rect x="32.6" y="355.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="35.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (107 samples, 0.04%)</title><rect x="33.6" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.6" y="366.0"></text>
</g>
<g>
<title>byte[] (107 samples, 0.04%)</title><rect x="33.6" y="339.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="36.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (273 samples, 0.11%)</title><rect x="34.1" y="387.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (273 samples, 0.11%)</title><rect x="34.1" y="371.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.1" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (179 samples, 0.07%)</title><rect x="34.1" y="355.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="37.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (94 samples, 0.04%)</title><rect x="35.0" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="38.0" y="366.0"></text>
</g>
<g>
<title>byte[] (94 samples, 0.04%)</title><rect x="35.0" y="339.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="38.0" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (197 samples, 0.08%)</title><rect x="35.4" y="547.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (197 samples, 0.08%)</title><rect x="35.4" y="531.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (197 samples, 0.08%)</title><rect x="35.4" y="515.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (57 samples, 0.02%)</title><rect x="35.4" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$143/1248898623.getAsBoolean (57 samples, 0.02%)</title><rect x="35.4" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (57 samples, 0.02%)</title><rect x="35.4" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (57 samples, 0.02%)</title><rect x="35.4" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (140 samples, 0.06%)</title><rect x="35.7" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.7" y="510.0"></text>
</g>
<g>
<title>java.util.ArrayList (142 samples, 0.06%)</title><rect x="36.3" y="579.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="39.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (53 samples, 0.02%)</title><rect x="37.2" y="579.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.2" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (53 samples, 0.02%)</title><rect x="37.2" y="563.0" width="0.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="40.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (488 samples, 0.20%)</title><rect x="37.4" y="579.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (463 samples, 0.19%)</title><rect x="37.5" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (463 samples, 0.19%)</title><rect x="37.5" y="547.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.5" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (463 samples, 0.19%)</title><rect x="37.5" y="531.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (463 samples, 0.19%)</title><rect x="37.5" y="515.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.5" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (463 samples, 0.19%)</title><rect x="37.5" y="499.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.5" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (463 samples, 0.19%)</title><rect x="37.5" y="483.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.5" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (463 samples, 0.19%)</title><rect x="37.5" y="467.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.5" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (463 samples, 0.19%)</title><rect x="37.5" y="451.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (463 samples, 0.19%)</title><rect x="37.5" y="435.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (463 samples, 0.19%)</title><rect x="37.5" y="419.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (463 samples, 0.19%)</title><rect x="37.5" y="403.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (128 samples, 0.05%)</title><rect x="37.7" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (289 samples, 0.12%)</title><rect x="38.4" y="387.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (57 samples, 0.02%)</title><rect x="38.5" y="371.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (57 samples, 0.02%)</title><rect x="38.5" y="355.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (98 samples, 0.04%)</title><rect x="38.7" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (98 samples, 0.04%)</title><rect x="38.7" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.7" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (65 samples, 0.03%)</title><rect x="38.7" y="339.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="41.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (57 samples, 0.02%)</title><rect x="39.2" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (57 samples, 0.02%)</title><rect x="39.2" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (53 samples, 0.02%)</title><rect x="39.5" y="371.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (53 samples, 0.02%)</title><rect x="39.5" y="355.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (213 samples, 0.09%)</title><rect x="39.7" y="579.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.7" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (64 samples, 0.03%)</title><rect x="39.7" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (69 samples, 0.03%)</title><rect x="40.2" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (22,186 samples, 8.87%)</title><rect x="40.7" y="579.0" width="104.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.7" y="590.0">ru/mail/poli..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (118 samples, 0.05%)</title><rect x="40.7" y="563.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="43.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (22,068 samples, 8.82%)</title><rect x="41.3" y="563.0" width="104.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.3" y="574.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (22,068 samples, 8.82%)</title><rect x="41.3" y="547.0" width="104.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.3" y="558.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (22,068 samples, 8.82%)</title><rect x="41.3" y="531.0" width="104.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.3" y="542.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (7,643 samples, 3.06%)</title><rect x="41.3" y="515.0" width="36.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.3" y="526.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,643 samples, 3.06%)</title><rect x="41.3" y="499.0" width="36.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="510.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,650 samples, 1.86%)</title><rect x="41.3" y="483.0" width="21.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="44.3" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,993 samples, 1.20%)</title><rect x="63.2" y="483.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.2" y="494.0"></text>
</g>
<g>
<title>byte[] (2,993 samples, 1.20%)</title><rect x="63.2" y="467.0" width="14.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="66.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (7,152 samples, 2.86%)</title><rect x="77.3" y="515.0" width="33.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.3" y="526.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,152 samples, 2.86%)</title><rect x="77.3" y="499.0" width="33.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.3" y="510.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,746 samples, 1.90%)</title><rect x="77.3" y="483.0" width="22.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="80.3" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,406 samples, 0.96%)</title><rect x="99.7" y="483.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.7" y="494.0"></text>
</g>
<g>
<title>byte[] (2,406 samples, 0.96%)</title><rect x="99.7" y="467.0" width="11.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="102.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (7,273 samples, 2.91%)</title><rect x="111.1" y="515.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.1" y="526.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,273 samples, 2.91%)</title><rect x="111.1" y="499.0" width="34.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.1" y="510.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,941 samples, 1.98%)</title><rect x="111.1" y="483.0" width="23.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="114.1" y="494.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,332 samples, 0.93%)</title><rect x="134.4" y="483.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.4" y="494.0"></text>
</g>
<g>
<title>byte[] (2,332 samples, 0.93%)</title><rect x="134.4" y="467.0" width="11.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="137.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (912 samples, 0.36%)</title><rect x="145.4" y="611.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.4" y="622.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (395 samples, 0.16%)</title><rect x="145.8" y="595.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.8" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (395 samples, 0.16%)</title><rect x="145.8" y="579.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.8" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (395 samples, 0.16%)</title><rect x="145.8" y="563.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.8" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (395 samples, 0.16%)</title><rect x="145.8" y="547.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.8" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (395 samples, 0.16%)</title><rect x="145.8" y="531.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.8" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (395 samples, 0.16%)</title><rect x="145.8" y="515.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.8" y="526.0"></text>
</g>
<g>
<title>int[] (192 samples, 0.08%)</title><rect x="145.8" y="499.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="148.8" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (203 samples, 0.08%)</title><rect x="146.7" y="499.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="149.7" y="510.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (389 samples, 0.16%)</title><rect x="147.8" y="595.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.8" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (389 samples, 0.16%)</title><rect x="147.8" y="579.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.8" y="590.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (389 samples, 0.16%)</title><rect x="147.8" y="563.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.8" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (389 samples, 0.16%)</title><rect x="147.8" y="547.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.8" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (389 samples, 0.16%)</title><rect x="147.8" y="531.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.8" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (389 samples, 0.16%)</title><rect x="147.8" y="515.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="150.8" y="526.0"></text>
</g>
<g>
<title>int[] (176 samples, 0.07%)</title><rect x="147.8" y="499.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="150.8" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (213 samples, 0.09%)</title><rect x="148.6" y="499.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="151.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (321 samples, 0.13%)</title><rect x="149.7" y="627.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (308 samples, 0.12%)</title><rect x="149.7" y="611.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (226 samples, 0.09%)</title><rect x="149.7" y="595.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.7" y="606.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (82 samples, 0.03%)</title><rect x="150.0" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.0" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (82 samples, 0.03%)</title><rect x="150.0" y="563.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="153.0" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (61 samples, 0.02%)</title><rect x="150.4" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (82 samples, 0.03%)</title><rect x="150.8" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.compute (82 samples, 0.03%)</title><rect x="150.8" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$84/2037434908.run (26,938 samples, 10.77%)</title><rect x="151.2" y="659.0" width="127.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.2" y="670.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (26,938 samples, 10.77%)</title><rect x="151.2" y="643.0" width="127.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.2" y="654.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$150/1668259984.accept (26,938 samples, 10.77%)</title><rect x="151.2" y="627.0" width="127.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.2" y="638.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$get$1 (26,938 samples, 10.77%)</title><rect x="151.2" y="611.0" width="127.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.2" y="622.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (26,427 samples, 10.56%)</title><rect x="151.2" y="595.0" width="124.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.2" y="606.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (26,427 samples, 10.56%)</title><rect x="151.2" y="579.0" width="124.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.2" y="590.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (56 samples, 0.02%)</title><rect x="151.2" y="563.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="154.2" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (24,660 samples, 9.86%)</title><rect x="151.5" y="563.0" width="116.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.5" y="574.0">one/nio/http/H..</text>
</g>
<g>
<title>byte[] (5,805 samples, 2.32%)</title><rect x="151.5" y="547.0" width="27.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="154.5" y="558.0">b..</text>
</g>
<g>
<title>byte[] (18,855 samples, 7.54%)</title><rect x="178.8" y="547.0" width="89.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="181.8" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,228 samples, 0.49%)</title><rect x="267.8" y="563.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.8" y="574.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.02%)</title><rect x="267.8" y="547.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="270.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (67 samples, 0.03%)</title><rect x="268.1" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (67 samples, 0.03%)</title><rect x="268.1" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (921 samples, 0.37%)</title><rect x="268.6" y="547.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.6" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (921 samples, 0.37%)</title><rect x="268.6" y="531.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.6" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (921 samples, 0.37%)</title><rect x="268.6" y="515.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.6" y="526.0"></text>
</g>
<g>
<title>char[] (656 samples, 0.26%)</title><rect x="268.6" y="499.0" width="3.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="271.6" y="510.0"></text>
</g>
<g>
<title>java.lang.String (124 samples, 0.05%)</title><rect x="271.7" y="499.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="274.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (141 samples, 0.06%)</title><rect x="272.2" y="499.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (141 samples, 0.06%)</title><rect x="272.2" y="483.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (141 samples, 0.06%)</title><rect x="272.2" y="467.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.2" y="478.0"></text>
</g>
<g>
<title>byte[] (141 samples, 0.06%)</title><rect x="272.2" y="451.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="275.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (64 samples, 0.03%)</title><rect x="272.9" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.9" y="558.0"></text>
</g>
<g>
<title>java.lang.String[] (64 samples, 0.03%)</title><rect x="272.9" y="531.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="275.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (79 samples, 0.03%)</title><rect x="273.2" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (79 samples, 0.03%)</title><rect x="273.2" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (79 samples, 0.03%)</title><rect x="273.2" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (378 samples, 0.15%)</title><rect x="273.6" y="563.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.6" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (378 samples, 0.15%)</title><rect x="273.6" y="547.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="558.0"></text>
</g>
<g>
<title>byte[] (378 samples, 0.15%)</title><rect x="273.6" y="531.0" width="1.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="276.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (69 samples, 0.03%)</title><rect x="275.4" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (69 samples, 0.03%)</title><rect x="275.4" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (69 samples, 0.03%)</title><rect x="275.4" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="278.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (511 samples, 0.20%)</title><rect x="275.9" y="595.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (502 samples, 0.20%)</title><rect x="275.9" y="579.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.deserialize (437 samples, 0.17%)</title><rect x="275.9" y="563.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (63 samples, 0.03%)</title><rect x="275.9" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (63 samples, 0.03%)</title><rect x="275.9" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="278.9" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (63 samples, 0.03%)</title><rect x="275.9" y="515.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="278.9" y="526.0"></text>
</g>
<g>
<title>one.nio.serial.DeserializeStream (73 samples, 0.03%)</title><rect x="276.2" y="547.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="279.2" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.&lt;init&gt; (170 samples, 0.07%)</title><rect x="276.5" y="547.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.5" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (170 samples, 0.07%)</title><rect x="276.5" y="531.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="279.5" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/DeserializeStream.readObject (103 samples, 0.04%)</title><rect x="277.3" y="547.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.3" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.read (67 samples, 0.03%)</title><rect x="277.3" y="531.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.3" y="542.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.read (67 samples, 0.03%)</title><rect x="277.3" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateAccept (65 samples, 0.03%)</title><rect x="278.0" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.compute (65 samples, 0.03%)</title><rect x="278.0" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$148/1601371073.run (121,531 samples, 48.58%)</title><rect x="278.3" y="659.0" width="573.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.3" y="670.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$148/1601371073.run</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2 (121,531 samples, 48.58%)</title><rect x="278.3" y="643.0" width="573.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.3" y="654.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityGet$2</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.get (96,204 samples, 38.46%)</title><rect x="278.3" y="627.0" width="453.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.3" y="638.0">ru/mail/polis/service/alexander/marashov/ResponseManager.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,481 samples, 0.99%)</title><rect x="278.3" y="611.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,481 samples, 0.99%)</title><rect x="278.3" y="595.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$149/1637537171.get$Lambda (1,142 samples, 0.46%)</title><rect x="278.3" y="579.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.3" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$149 (1,142 samples, 0.46%)</title><rect x="278.3" y="563.0" width="5.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="281.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$150/1668259984.get$Lambda (1,339 samples, 0.54%)</title><rect x="283.7" y="579.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.7" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$150 (1,339 samples, 0.54%)</title><rect x="283.7" y="563.0" width="6.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="286.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (127 samples, 0.05%)</title><rect x="290.0" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (127 samples, 0.05%)</title><rect x="290.0" y="595.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (127 samples, 0.05%)</title><rect x="290.0" y="579.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="590.0"></text>
</g>
<g>
<title>java.lang.String (63 samples, 0.03%)</title><rect x="290.0" y="563.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="293.0" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (64 samples, 0.03%)</title><rect x="290.3" y="563.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.3" y="574.0"></text>
</g>
<g>
<title>byte[] (64 samples, 0.03%)</title><rect x="290.3" y="547.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="293.3" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.ResponseAnalyzerGet (1,970 samples, 0.79%)</title><rect x="290.6" y="611.0" width="9.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="293.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.rowGet (73,406 samples, 29.35%)</title><rect x="299.9" y="611.0" width="346.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.9" y="622.0">ru/mail/polis/service/alexander/marashov/DaoMan..</text>
</g>
<g>
<title>one.nio.http.Response (62 samples, 0.02%)</title><rect x="299.9" y="595.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="302.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (231 samples, 0.09%)</title><rect x="300.2" y="595.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.2" y="606.0"></text>
</g>
<g>
<title>byte[] (101 samples, 0.04%)</title><rect x="300.2" y="579.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="303.2" y="590.0"></text>
</g>
<g>
<title>java.lang.String[] (74 samples, 0.03%)</title><rect x="300.6" y="579.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="303.6" y="590.0"></text>
</g>
<g>
<title>java.lang.String (56 samples, 0.02%)</title><rect x="301.0" y="579.0" width="0.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="304.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.rowGet (69,910 samples, 27.95%)</title><rect x="301.2" y="595.0" width="329.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.2" y="606.0">ru/mail/polis/dao/DAO.rowGet</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,735 samples, 0.69%)</title><rect x="301.2" y="579.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.2" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,735 samples, 0.69%)</title><rect x="301.2" y="563.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.2" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,735 samples, 0.69%)</title><rect x="301.2" y="547.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.2" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,735 samples, 0.69%)</title><rect x="301.2" y="531.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.2" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,735 samples, 0.69%)</title><rect x="301.2" y="515.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,735 samples, 0.69%)</title><rect x="301.2" y="499.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.2" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,735 samples, 0.69%)</title><rect x="301.2" y="483.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.2" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,735 samples, 0.69%)</title><rect x="301.2" y="467.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.2" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,735 samples, 0.69%)</title><rect x="301.2" y="451.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,735 samples, 0.69%)</title><rect x="301.2" y="435.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,735 samples, 0.69%)</title><rect x="301.2" y="419.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (130 samples, 0.05%)</title><rect x="301.2" y="403.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.2" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (130 samples, 0.05%)</title><rect x="301.2" y="387.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="304.2" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (54 samples, 0.02%)</title><rect x="301.9" y="403.0" width="0.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="304.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (565 samples, 0.23%)</title><rect x="302.1" y="403.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (194 samples, 0.08%)</title><rect x="302.1" y="387.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (194 samples, 0.08%)</title><rect x="302.1" y="371.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.1" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (113 samples, 0.05%)</title><rect x="302.1" y="355.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="305.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (81 samples, 0.03%)</title><rect x="302.6" y="355.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.6" y="366.0"></text>
</g>
<g>
<title>byte[] (81 samples, 0.03%)</title><rect x="302.6" y="339.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="305.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (181 samples, 0.07%)</title><rect x="303.0" y="387.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (181 samples, 0.07%)</title><rect x="303.0" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.0" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (122 samples, 0.05%)</title><rect x="303.0" y="355.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="306.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (59 samples, 0.02%)</title><rect x="303.6" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.6" y="366.0"></text>
</g>
<g>
<title>byte[] (59 samples, 0.02%)</title><rect x="303.6" y="339.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="306.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (190 samples, 0.08%)</title><rect x="303.9" y="387.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (190 samples, 0.08%)</title><rect x="303.9" y="371.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.9" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (122 samples, 0.05%)</title><rect x="303.9" y="355.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="306.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (68 samples, 0.03%)</title><rect x="304.5" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.5" y="366.0"></text>
</g>
<g>
<title>byte[] (68 samples, 0.03%)</title><rect x="304.5" y="339.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="307.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (986 samples, 0.39%)</title><rect x="304.8" y="403.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.8" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (72 samples, 0.03%)</title><rect x="304.8" y="387.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="307.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (205 samples, 0.08%)</title><rect x="305.1" y="387.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (205 samples, 0.08%)</title><rect x="305.1" y="371.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.1" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (109 samples, 0.04%)</title><rect x="305.1" y="355.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="308.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (96 samples, 0.04%)</title><rect x="305.6" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.6" y="366.0"></text>
</g>
<g>
<title>byte[] (96 samples, 0.04%)</title><rect x="305.6" y="339.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="308.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (361 samples, 0.14%)</title><rect x="306.1" y="387.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.1" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (361 samples, 0.14%)</title><rect x="306.1" y="371.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.1" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (251 samples, 0.10%)</title><rect x="306.1" y="355.0" width="1.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="309.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (110 samples, 0.04%)</title><rect x="307.3" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.3" y="366.0"></text>
</g>
<g>
<title>byte[] (110 samples, 0.04%)</title><rect x="307.3" y="339.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="310.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (175 samples, 0.07%)</title><rect x="307.8" y="387.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.8" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (175 samples, 0.07%)</title><rect x="307.8" y="371.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.8" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (109 samples, 0.04%)</title><rect x="307.8" y="355.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="310.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (66 samples, 0.03%)</title><rect x="308.3" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.3" y="366.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.03%)</title><rect x="308.3" y="339.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="311.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (173 samples, 0.07%)</title><rect x="308.6" y="387.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (173 samples, 0.07%)</title><rect x="308.6" y="371.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (125 samples, 0.05%)</title><rect x="308.6" y="355.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="311.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.rowIterator (68,175 samples, 27.25%)</title><rect x="309.4" y="579.0" width="321.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.4" y="590.0">ru/mail/polis/dao/alexander/marashov/DAOImp..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (9,794 samples, 3.92%)</title><rect x="309.4" y="563.0" width="46.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.4" y="574.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (9,762 samples, 3.90%)</title><rect x="309.6" y="547.0" width="46.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.6" y="558.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (368 samples, 0.15%)</title><rect x="309.8" y="531.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.8" y="542.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (368 samples, 0.15%)</title><rect x="309.8" y="515.0" width="1.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="312.8" y="526.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (74 samples, 0.03%)</title><rect x="311.5" y="531.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="314.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (63 samples, 0.03%)</title><rect x="311.9" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.9" y="542.0"></text>
</g>
<g>
<title>java.lang.Object[] (63 samples, 0.03%)</title><rect x="311.9" y="515.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="314.9" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (8,527 samples, 3.41%)</title><rect x="312.2" y="531.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.2" y="542.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (8,527 samples, 3.41%)</title><rect x="312.2" y="515.0" width="40.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.2" y="526.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (113 samples, 0.05%)</title><rect x="312.2" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.2" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (113 samples, 0.05%)</title><rect x="312.2" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="315.2" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (113 samples, 0.05%)</title><rect x="312.2" y="467.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="315.2" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8,414 samples, 3.36%)</title><rect x="312.7" y="499.0" width="39.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.7" y="510.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8,414 samples, 3.36%)</title><rect x="312.7" y="483.0" width="39.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.7" y="494.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,414 samples, 3.36%)</title><rect x="312.7" y="467.0" width="39.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.7" y="478.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,414 samples, 3.36%)</title><rect x="312.7" y="451.0" width="39.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.7" y="462.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,414 samples, 3.36%)</title><rect x="312.7" y="435.0" width="39.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.7" y="446.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (8,414 samples, 3.36%)</title><rect x="312.7" y="419.0" width="39.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.7" y="430.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (8,414 samples, 3.36%)</title><rect x="312.7" y="403.0" width="39.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.7" y="414.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (604 samples, 0.24%)</title><rect x="312.7" y="387.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.7" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (604 samples, 0.24%)</title><rect x="312.7" y="371.0" width="2.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="315.7" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (279 samples, 0.11%)</title><rect x="315.6" y="387.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="318.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (2,795 samples, 1.12%)</title><rect x="316.9" y="387.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (987 samples, 0.39%)</title><rect x="316.9" y="371.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (987 samples, 0.39%)</title><rect x="316.9" y="355.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (586 samples, 0.23%)</title><rect x="316.9" y="339.0" width="2.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="319.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (401 samples, 0.16%)</title><rect x="319.6" y="339.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.6" y="350.0"></text>
</g>
<g>
<title>byte[] (401 samples, 0.16%)</title><rect x="319.6" y="323.0" width="1.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="322.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (928 samples, 0.37%)</title><rect x="321.5" y="371.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (928 samples, 0.37%)</title><rect x="321.5" y="355.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.5" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (607 samples, 0.24%)</title><rect x="321.5" y="339.0" width="2.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="324.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (321 samples, 0.13%)</title><rect x="324.4" y="339.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.4" y="350.0"></text>
</g>
<g>
<title>byte[] (321 samples, 0.13%)</title><rect x="324.4" y="323.0" width="1.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="327.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (880 samples, 0.35%)</title><rect x="325.9" y="371.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (880 samples, 0.35%)</title><rect x="325.9" y="355.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (583 samples, 0.23%)</title><rect x="325.9" y="339.0" width="2.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="328.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (297 samples, 0.12%)</title><rect x="328.7" y="339.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.7" y="350.0"></text>
</g>
<g>
<title>byte[] (297 samples, 0.12%)</title><rect x="328.7" y="323.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="331.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (4,736 samples, 1.89%)</title><rect x="330.1" y="387.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.1" y="398.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (283 samples, 0.11%)</title><rect x="330.1" y="371.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="333.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (966 samples, 0.39%)</title><rect x="331.4" y="371.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (966 samples, 0.39%)</title><rect x="331.4" y="355.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.4" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (586 samples, 0.23%)</title><rect x="331.4" y="339.0" width="2.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="334.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (380 samples, 0.15%)</title><rect x="334.2" y="339.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.2" y="350.0"></text>
</g>
<g>
<title>byte[] (380 samples, 0.15%)</title><rect x="334.2" y="323.0" width="1.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="337.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (1,771 samples, 0.71%)</title><rect x="336.0" y="371.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,771 samples, 0.71%)</title><rect x="336.0" y="355.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,170 samples, 0.47%)</title><rect x="336.0" y="339.0" width="5.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="339.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (601 samples, 0.24%)</title><rect x="341.5" y="339.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.5" y="350.0"></text>
</g>
<g>
<title>byte[] (601 samples, 0.24%)</title><rect x="341.5" y="323.0" width="2.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="344.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (883 samples, 0.35%)</title><rect x="344.3" y="371.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (883 samples, 0.35%)</title><rect x="344.3" y="355.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.3" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (604 samples, 0.24%)</title><rect x="344.3" y="339.0" width="2.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="347.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (279 samples, 0.11%)</title><rect x="347.2" y="339.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.2" y="350.0"></text>
</g>
<g>
<title>byte[] (279 samples, 0.11%)</title><rect x="347.2" y="323.0" width="1.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="350.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (833 samples, 0.33%)</title><rect x="348.5" y="371.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (833 samples, 0.33%)</title><rect x="348.5" y="355.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.5" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (541 samples, 0.22%)</title><rect x="348.5" y="339.0" width="2.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="351.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (292 samples, 0.12%)</title><rect x="351.0" y="339.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.0" y="350.0"></text>
</g>
<g>
<title>byte[] (292 samples, 0.12%)</title><rect x="351.0" y="323.0" width="1.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="354.0" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (684 samples, 0.27%)</title><rect x="352.4" y="531.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (684 samples, 0.27%)</title><rect x="352.4" y="515.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (684 samples, 0.27%)</title><rect x="352.4" y="499.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (237 samples, 0.09%)</title><rect x="352.4" y="483.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$143/1248898623.getAsBoolean (237 samples, 0.09%)</title><rect x="352.4" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (237 samples, 0.09%)</title><rect x="352.4" y="451.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (237 samples, 0.09%)</title><rect x="352.4" y="435.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (62 samples, 0.02%)</title><rect x="352.4" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="355.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (62 samples, 0.02%)</title><rect x="352.4" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.4" y="414.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (62 samples, 0.02%)</title><rect x="352.4" y="387.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="355.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (175 samples, 0.07%)</title><rect x="352.7" y="419.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$131/1875641432.apply (175 samples, 0.07%)</title><rect x="352.7" y="403.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (175 samples, 0.07%)</title><rect x="352.7" y="387.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (126 samples, 0.05%)</title><rect x="352.7" y="371.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (126 samples, 0.05%)</title><rect x="352.7" y="355.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="355.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (447 samples, 0.18%)</title><rect x="353.5" y="483.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.5" y="494.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (110 samples, 0.04%)</title><rect x="353.5" y="467.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="356.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (66 samples, 0.03%)</title><rect x="354.0" y="467.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (66 samples, 0.03%)</title><rect x="354.0" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (58 samples, 0.02%)</title><rect x="354.4" y="467.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (58 samples, 0.02%)</title><rect x="354.4" y="451.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.4" y="462.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (58 samples, 0.02%)</title><rect x="354.4" y="435.0" width="0.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="357.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (213 samples, 0.09%)</title><rect x="354.6" y="467.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.6" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (213 samples, 0.09%)</title><rect x="354.6" y="451.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="357.6" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (117 samples, 0.05%)</title><rect x="355.8" y="563.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.8" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (117 samples, 0.05%)</title><rect x="355.8" y="547.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="358.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (188 samples, 0.08%)</title><rect x="356.4" y="563.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.4" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (188 samples, 0.08%)</title><rect x="356.4" y="547.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="359.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,841 samples, 0.74%)</title><rect x="357.3" y="563.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.3" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (70 samples, 0.03%)</title><rect x="357.3" y="547.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="360.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,771 samples, 0.71%)</title><rect x="357.6" y="547.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,771 samples, 0.71%)</title><rect x="357.6" y="531.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.6" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,771 samples, 0.71%)</title><rect x="357.6" y="515.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,771 samples, 0.71%)</title><rect x="357.6" y="499.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,771 samples, 0.71%)</title><rect x="357.6" y="483.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.6" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,771 samples, 0.71%)</title><rect x="357.6" y="467.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,771 samples, 0.71%)</title><rect x="357.6" y="451.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,771 samples, 0.71%)</title><rect x="357.6" y="435.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.6" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,771 samples, 0.71%)</title><rect x="357.6" y="419.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,771 samples, 0.71%)</title><rect x="357.6" y="403.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (1,771 samples, 0.71%)</title><rect x="357.6" y="387.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (114 samples, 0.05%)</title><rect x="357.6" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="360.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (114 samples, 0.05%)</title><rect x="357.6" y="355.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="360.6" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (66 samples, 0.03%)</title><rect x="358.2" y="371.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="361.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (583 samples, 0.23%)</title><rect x="358.5" y="371.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (201 samples, 0.08%)</title><rect x="358.5" y="355.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (201 samples, 0.08%)</title><rect x="358.5" y="339.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.5" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (106 samples, 0.04%)</title><rect x="358.5" y="323.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="361.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (95 samples, 0.04%)</title><rect x="359.0" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.0" y="334.0"></text>
</g>
<g>
<title>byte[] (95 samples, 0.04%)</title><rect x="359.0" y="307.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="362.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (190 samples, 0.08%)</title><rect x="359.4" y="355.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (190 samples, 0.08%)</title><rect x="359.4" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (133 samples, 0.05%)</title><rect x="359.4" y="323.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="362.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (57 samples, 0.02%)</title><rect x="360.0" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.0" y="334.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.02%)</title><rect x="360.0" y="307.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="363.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (192 samples, 0.08%)</title><rect x="360.3" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="363.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (192 samples, 0.08%)</title><rect x="360.3" y="339.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.3" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (110 samples, 0.04%)</title><rect x="360.3" y="323.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="363.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (82 samples, 0.03%)</title><rect x="360.8" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.8" y="334.0"></text>
</g>
<g>
<title>byte[] (82 samples, 0.03%)</title><rect x="360.8" y="307.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="363.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (1,008 samples, 0.40%)</title><rect x="361.2" y="371.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.2" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (57 samples, 0.02%)</title><rect x="361.2" y="355.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="364.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (199 samples, 0.08%)</title><rect x="361.5" y="355.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (199 samples, 0.08%)</title><rect x="361.5" y="339.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.5" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (133 samples, 0.05%)</title><rect x="361.5" y="323.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="364.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (66 samples, 0.03%)</title><rect x="362.1" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.1" y="334.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.03%)</title><rect x="362.1" y="307.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="365.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (402 samples, 0.16%)</title><rect x="362.4" y="355.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (402 samples, 0.16%)</title><rect x="362.4" y="339.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.4" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (286 samples, 0.11%)</title><rect x="362.4" y="323.0" width="1.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="365.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (116 samples, 0.05%)</title><rect x="363.8" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.8" y="334.0"></text>
</g>
<g>
<title>byte[] (116 samples, 0.05%)</title><rect x="363.8" y="307.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="366.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getLongFrom (187 samples, 0.07%)</title><rect x="364.3" y="355.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.3" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (187 samples, 0.07%)</title><rect x="364.3" y="339.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.3" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (118 samples, 0.05%)</title><rect x="364.3" y="323.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="367.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (69 samples, 0.03%)</title><rect x="364.9" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.9" y="334.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.03%)</title><rect x="364.9" y="307.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="367.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (163 samples, 0.07%)</title><rect x="365.2" y="355.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (163 samples, 0.07%)</title><rect x="365.2" y="339.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.2" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (115 samples, 0.05%)</title><rect x="365.2" y="323.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="368.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (775 samples, 0.31%)</title><rect x="366.0" y="563.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collection.stream (237 samples, 0.09%)</title><rect x="366.0" y="547.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (100 samples, 0.04%)</title><rect x="366.0" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.0" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (100 samples, 0.04%)</title><rect x="366.0" y="515.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="369.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (137 samples, 0.05%)</title><rect x="366.4" y="531.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.4" y="542.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (137 samples, 0.05%)</title><rect x="366.4" y="515.0" width="0.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="369.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (99 samples, 0.04%)</title><rect x="367.3" y="547.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (99 samples, 0.04%)</title><rect x="367.3" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (99 samples, 0.04%)</title><rect x="367.3" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.3" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (99 samples, 0.04%)</title><rect x="367.3" y="499.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="370.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (237 samples, 0.09%)</title><rect x="367.8" y="547.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.8" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (74 samples, 0.03%)</title><rect x="367.8" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.8" y="542.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (74 samples, 0.03%)</title><rect x="367.8" y="515.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="370.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (163 samples, 0.07%)</title><rect x="368.1" y="531.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (119 samples, 0.05%)</title><rect x="368.3" y="515.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.3" y="526.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (119 samples, 0.05%)</title><rect x="368.3" y="499.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="371.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (155 samples, 0.06%)</title><rect x="368.9" y="547.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.9" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (155 samples, 0.06%)</title><rect x="368.9" y="531.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="371.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (55,414 samples, 22.15%)</title><rect x="369.6" y="563.0" width="261.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.6" y="574.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (349 samples, 0.14%)</title><rect x="369.6" y="547.0" width="1.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="372.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (55,065 samples, 22.01%)</title><rect x="371.3" y="547.0" width="259.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.3" y="558.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (55,065 samples, 22.01%)</title><rect x="371.3" y="531.0" width="259.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.3" y="542.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (55,065 samples, 22.01%)</title><rect x="371.3" y="515.0" width="259.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.3" y="526.0">ru/mail/polis/dao/alexander/marasho..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (19,180 samples, 7.67%)</title><rect x="371.3" y="499.0" width="90.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.3" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (19,180 samples, 7.67%)</title><rect x="371.3" y="483.0" width="90.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.3" y="494.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,647 samples, 4.66%)</title><rect x="371.3" y="467.0" width="54.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="374.3" y="478.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7,533 samples, 3.01%)</title><rect x="426.2" y="467.0" width="35.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.2" y="478.0">jav..</text>
</g>
<g>
<title>byte[] (7,533 samples, 3.01%)</title><rect x="426.2" y="451.0" width="35.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="429.2" y="462.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getIntFrom (17,961 samples, 7.18%)</title><rect x="461.7" y="499.0" width="84.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.7" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,961 samples, 7.18%)</title><rect x="461.7" y="483.0" width="84.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="494.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12,021 samples, 4.81%)</title><rect x="461.7" y="467.0" width="56.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="464.7" y="478.0">java.n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,940 samples, 2.37%)</title><rect x="518.5" y="467.0" width="28.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="521.5" y="478.0">ja..</text>
</g>
<g>
<title>byte[] (5,940 samples, 2.37%)</title><rect x="518.5" y="451.0" width="28.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="521.5" y="462.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getOffset (17,924 samples, 7.17%)</title><rect x="546.5" y="499.0" width="84.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.5" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,924 samples, 7.17%)</title><rect x="546.5" y="483.0" width="84.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.5" y="494.0">java/nio/B..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11,951 samples, 4.78%)</title><rect x="546.5" y="467.0" width="56.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="549.5" y="478.0">java.n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5,973 samples, 2.39%)</title><rect x="602.9" y="467.0" width="28.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.9" y="478.0">ja..</text>
</g>
<g>
<title>byte[] (5,973 samples, 2.39%)</title><rect x="602.9" y="451.0" width="28.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="605.9" y="462.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValueSerializer.serialize (3,203 samples, 1.28%)</title><rect x="631.0" y="595.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.0" y="606.0"></text>
</g>
<g>
<title>byte[] (118 samples, 0.05%)</title><rect x="631.0" y="579.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="634.0" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.CalcSizeStream (76 samples, 0.03%)</title><rect x="631.6" y="579.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="634.6" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.SerializeStream (119 samples, 0.05%)</title><rect x="631.9" y="579.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="634.9" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,383 samples, 0.55%)</title><rect x="632.5" y="579.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.calcSize (1,383 samples, 0.55%)</title><rect x="632.5" y="563.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="635.5" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.calcSize (1,383 samples, 0.55%)</title><rect x="632.5" y="547.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.5" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/CalcSizeStream.writeObject (1,383 samples, 0.55%)</title><rect x="632.5" y="531.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,383 samples, 0.55%)</title><rect x="632.5" y="515.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.5" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,383 samples, 0.55%)</title><rect x="632.5" y="499.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="510.0"></text>
</g>
<g>
<title>int[] (701 samples, 0.28%)</title><rect x="632.5" y="483.0" width="3.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="635.5" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (682 samples, 0.27%)</title><rect x="635.8" y="483.0" width="3.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="638.8" y="494.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.&lt;init&gt; (79 samples, 0.03%)</title><rect x="639.0" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.0" y="590.0"></text>
</g>
<g>
<title>one.nio.serial.SerializationContext (79 samples, 0.03%)</title><rect x="639.0" y="563.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="642.0" y="574.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,365 samples, 0.55%)</title><rect x="639.4" y="579.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.4" y="590.0"></text>
</g>
<g>
<title>one/nio/serial/GeneratedSerializer.write (1,365 samples, 0.55%)</title><rect x="639.4" y="563.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.4" y="574.0"></text>
</g>
<g>
<title>sun/reflect/Delegate0_SerializableValue.write (1,365 samples, 0.55%)</title><rect x="639.4" y="547.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.4" y="558.0"></text>
</g>
<g>
<title>one/nio/serial/SerializeStream.writeObject (1,365 samples, 0.55%)</title><rect x="639.4" y="531.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.4" y="542.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.put (1,365 samples, 0.55%)</title><rect x="639.4" y="515.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.4" y="526.0"></text>
</g>
<g>
<title>one/nio/serial/SerializationContext.init (1,365 samples, 0.55%)</title><rect x="639.4" y="499.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.4" y="510.0"></text>
</g>
<g>
<title>int[] (662 samples, 0.26%)</title><rect x="639.4" y="483.0" width="3.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="642.4" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (703 samples, 0.28%)</title><rect x="642.5" y="483.0" width="3.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="645.5" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValueSerializer$SerializableValue (63 samples, 0.03%)</title><rect x="645.8" y="579.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="648.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (1,512 samples, 0.60%)</title><rect x="646.1" y="611.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.1" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,475 samples, 0.59%)</title><rect x="646.1" y="595.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="649.1" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,475 samples, 0.59%)</title><rect x="646.1" y="579.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$84/2037434908.get$Lambda (1,475 samples, 0.59%)</title><rect x="646.1" y="563.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="649.1" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$84 (1,475 samples, 0.59%)</title><rect x="646.1" y="547.0" width="7.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="649.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (330 samples, 0.13%)</title><rect x="653.3" y="611.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (330 samples, 0.13%)</title><rect x="653.3" y="595.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (330 samples, 0.13%)</title><rect x="653.3" y="579.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.3" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (330 samples, 0.13%)</title><rect x="653.3" y="563.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="656.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (6,732 samples, 2.69%)</title><rect x="654.8" y="611.0" width="31.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.8" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.privateGetResult (6,730 samples, 2.69%)</title><rect x="654.8" y="595.0" width="31.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.8" y="606.0">ru..</text>
</g>
<g>
<title>java/util/HashMap.entrySet (282 samples, 0.11%)</title><rect x="654.8" y="579.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.8" y="590.0"></text>
</g>
<g>
<title>java.util.HashMap$EntrySet (282 samples, 0.11%)</title><rect x="654.8" y="563.0" width="1.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="657.8" y="574.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,164 samples, 0.47%)</title><rect x="656.2" y="579.0" width="5.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="659.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5,284 samples, 2.11%)</title><rect x="661.7" y="579.0" width="24.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.7" y="590.0">o..</text>
</g>
<g>
<title>byte[] (2,507 samples, 1.00%)</title><rect x="661.7" y="563.0" width="11.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="664.7" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (1,319 samples, 0.53%)</title><rect x="673.5" y="563.0" width="6.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="676.5" y="574.0"></text>
</g>
<g>
<title>java.lang.String (1,458 samples, 0.58%)</title><rect x="679.7" y="563.0" width="6.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="682.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzerGet.&lt;init&gt; (3,482 samples, 1.39%)</title><rect x="686.6" y="611.0" width="16.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.6" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap (2,000 samples, 0.80%)</title><rect x="686.6" y="595.0" width="9.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="689.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (1,482 samples, 0.59%)</title><rect x="696.0" y="595.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="699.0" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (439 samples, 0.18%)</title><rect x="696.0" y="579.0" width="2.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="699.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (701 samples, 0.28%)</title><rect x="698.1" y="579.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.1" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (701 samples, 0.28%)</title><rect x="698.1" y="563.0" width="3.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="701.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (342 samples, 0.14%)</title><rect x="701.4" y="579.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (342 samples, 0.14%)</title><rect x="701.4" y="563.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.4" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (342 samples, 0.14%)</title><rect x="701.4" y="547.0" width="1.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="704.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (6,164 samples, 2.46%)</title><rect x="703.0" y="611.0" width="29.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="706.0" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (6,164 samples, 2.46%)</title><rect x="703.0" y="595.0" width="29.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.0" y="606.0">ru..</text>
</g>
<g>
<title>java.lang.String[] (988 samples, 0.39%)</title><rect x="703.0" y="579.0" width="4.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="706.0" y="590.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (1,542 samples, 0.62%)</title><rect x="707.7" y="579.0" width="7.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="710.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (898 samples, 0.36%)</title><rect x="714.9" y="579.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.9" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (898 samples, 0.36%)</title><rect x="714.9" y="563.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.9" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (898 samples, 0.36%)</title><rect x="714.9" y="547.0" width="4.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="717.9" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (2,736 samples, 1.09%)</title><rect x="719.2" y="579.0" width="12.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="722.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (6,431 samples, 2.57%)</title><rect x="732.1" y="627.0" width="30.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="735.1" y="638.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6,431 samples, 2.57%)</title><rect x="732.1" y="611.0" width="30.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.1" y="622.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6,431 samples, 2.57%)</title><rect x="732.1" y="595.0" width="30.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.1" y="606.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4,957 samples, 1.98%)</title><rect x="732.1" y="579.0" width="23.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="735.1" y="590.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4,957 samples, 1.98%)</title><rect x="732.1" y="563.0" width="23.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.1" y="574.0">o..</text>
</g>
<g>
<title>byte[] (2,478 samples, 0.99%)</title><rect x="732.1" y="547.0" width="11.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="735.1" y="558.0"></text>
</g>
<g>
<title>byte[] (2,479 samples, 0.99%)</title><rect x="743.8" y="547.0" width="11.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="746.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,474 samples, 0.59%)</title><rect x="755.5" y="579.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.5" y="590.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,474 samples, 0.59%)</title><rect x="755.5" y="563.0" width="6.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="758.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (18,896 samples, 7.55%)</title><rect x="762.4" y="627.0" width="89.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="765.4" y="638.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,518 samples, 0.61%)</title><rect x="762.4" y="611.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="765.4" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,518 samples, 0.61%)</title><rect x="762.4" y="595.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="765.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,518 samples, 0.61%)</title><rect x="762.4" y="579.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="765.4" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,518 samples, 0.61%)</title><rect x="762.4" y="563.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.4" y="574.0"></text>
</g>
<g>
<title>byte[] (1,518 samples, 0.61%)</title><rect x="762.4" y="547.0" width="7.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="765.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,649 samples, 0.66%)</title><rect x="769.6" y="611.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,649 samples, 0.66%)</title><rect x="769.6" y="595.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.6" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,649 samples, 0.66%)</title><rect x="769.6" y="579.0" width="7.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="772.6" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (504 samples, 0.20%)</title><rect x="777.4" y="611.0" width="2.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="780.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (15,225 samples, 6.09%)</title><rect x="779.7" y="611.0" width="71.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.7" y="622.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (5,408 samples, 2.16%)</title><rect x="779.7" y="595.0" width="25.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.7" y="606.0">c..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (2,841 samples, 1.14%)</title><rect x="779.7" y="579.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.7" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (2,841 samples, 1.14%)</title><rect x="779.7" y="563.0" width="13.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="782.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2,567 samples, 1.03%)</title><rect x="793.1" y="579.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.1" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (681 samples, 0.27%)</title><rect x="793.1" y="563.0" width="3.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="796.1" y="574.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (1,886 samples, 0.75%)</title><rect x="796.4" y="563.0" width="8.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="799.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (9,817 samples, 3.92%)</title><rect x="805.3" y="595.0" width="46.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.3" y="606.0">com/..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (3,107 samples, 1.24%)</title><rect x="805.3" y="579.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="808.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (3,107 samples, 1.24%)</title><rect x="805.3" y="563.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.3" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (3,107 samples, 1.24%)</title><rect x="805.3" y="547.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="808.3" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (3,107 samples, 1.24%)</title><rect x="805.3" y="531.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (3,107 samples, 1.24%)</title><rect x="805.3" y="515.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,107 samples, 1.24%)</title><rect x="805.3" y="499.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="808.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,107 samples, 1.24%)</title><rect x="805.3" y="483.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.3" y="494.0"></text>
</g>
<g>
<title>java.lang.String (1,794 samples, 0.72%)</title><rect x="805.3" y="467.0" width="8.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="808.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,313 samples, 0.52%)</title><rect x="813.7" y="467.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.7" y="478.0"></text>
</g>
<g>
<title>byte[] (1,313 samples, 0.52%)</title><rect x="813.7" y="451.0" width="6.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="816.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (2,079 samples, 0.83%)</title><rect x="819.9" y="579.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (2,079 samples, 0.83%)</title><rect x="819.9" y="563.0" width="9.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (2,079 samples, 0.83%)</title><rect x="819.9" y="547.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="822.9" y="558.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (2,079 samples, 0.83%)</title><rect x="819.9" y="531.0" width="9.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="822.9" y="542.0"></text>
</g>
<g>
<title>java.util.ArrayList (1,333 samples, 0.53%)</title><rect x="829.7" y="579.0" width="6.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="832.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,924 samples, 0.77%)</title><rect x="836.0" y="579.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.0" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,924 samples, 0.77%)</title><rect x="836.0" y="563.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,924 samples, 0.77%)</title><rect x="836.0" y="547.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,924 samples, 0.77%)</title><rect x="836.0" y="531.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.0" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,924 samples, 0.77%)</title><rect x="836.0" y="515.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="839.0" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,464 samples, 0.59%)</title><rect x="836.0" y="499.0" width="6.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="839.0" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (460 samples, 0.18%)</title><rect x="842.9" y="499.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="845.9" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1,374 samples, 0.55%)</title><rect x="845.1" y="579.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="848.1" y="590.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (1,374 samples, 0.55%)</title><rect x="845.1" y="563.0" width="6.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="848.1" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2,614 samples, 1.04%)</title><rect x="851.6" y="659.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.6" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,614 samples, 1.04%)</title><rect x="851.6" y="643.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.6" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$118/752700863.run (2,614 samples, 1.04%)</title><rect x="851.6" y="627.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="854.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2,614 samples, 1.04%)</title><rect x="851.6" y="611.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.6" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2,614 samples, 1.04%)</title><rect x="851.6" y="595.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.6" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2,614 samples, 1.04%)</title><rect x="851.6" y="579.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.6" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2,571 samples, 1.03%)</title><rect x="851.8" y="563.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.8" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,461 samples, 0.98%)</title><rect x="851.8" y="547.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.8" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,461 samples, 0.98%)</title><rect x="851.8" y="531.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.8" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,461 samples, 0.98%)</title><rect x="851.8" y="515.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.8" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (2,461 samples, 0.98%)</title><rect x="851.8" y="499.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="854.8" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,590 samples, 0.64%)</title><rect x="851.8" y="483.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,590 samples, 0.64%)</title><rect x="851.8" y="467.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,585 samples, 0.63%)</title><rect x="851.8" y="451.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.8" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,585 samples, 0.63%)</title><rect x="851.8" y="435.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.8" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,525 samples, 0.61%)</title><rect x="851.8" y="419.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.8" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,525 samples, 0.61%)</title><rect x="851.8" y="403.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.8" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,525 samples, 0.61%)</title><rect x="851.8" y="387.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.8" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,525 samples, 0.61%)</title><rect x="851.8" y="371.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.8" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,525 samples, 0.61%)</title><rect x="851.8" y="355.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.8" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,525 samples, 0.61%)</title><rect x="851.8" y="339.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.8" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,525 samples, 0.61%)</title><rect x="851.8" y="323.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.8" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,525 samples, 0.61%)</title><rect x="851.8" y="307.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.8" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,525 samples, 0.61%)</title><rect x="851.8" y="291.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.8" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,525 samples, 0.61%)</title><rect x="851.8" y="275.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.8" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,525 samples, 0.61%)</title><rect x="851.8" y="259.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.8" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,525 samples, 0.61%)</title><rect x="851.8" y="243.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.8" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,525 samples, 0.61%)</title><rect x="851.8" y="227.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.8" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,388 samples, 0.55%)</title><rect x="851.8" y="211.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1,388 samples, 0.55%)</title><rect x="851.8" y="195.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,388 samples, 0.55%)</title><rect x="851.8" y="179.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1,388 samples, 0.55%)</title><rect x="851.8" y="163.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="854.8" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (523 samples, 0.21%)</title><rect x="851.8" y="147.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.8" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (427 samples, 0.17%)</title><rect x="851.8" y="131.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (394 samples, 0.16%)</title><rect x="851.8" y="115.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (394 samples, 0.16%)</title><rect x="851.8" y="99.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="110.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (219 samples, 0.09%)</title><rect x="852.0" y="83.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.0" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (182 samples, 0.07%)</title><rect x="852.1" y="67.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="855.1" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (164 samples, 0.07%)</title><rect x="852.2" y="51.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.2" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (164 samples, 0.07%)</title><rect x="852.2" y="35.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="855.2" y="46.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (131 samples, 0.05%)</title><rect x="853.0" y="83.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="856.0" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (131 samples, 0.05%)</title><rect x="853.0" y="67.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="856.0" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (96 samples, 0.04%)</title><rect x="853.8" y="131.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.8" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (60 samples, 0.02%)</title><rect x="853.9" y="115.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="856.9" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (458 samples, 0.18%)</title><rect x="854.5" y="147.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.5" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (423 samples, 0.17%)</title><rect x="854.7" y="131.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.7" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (397 samples, 0.16%)</title><rect x="854.8" y="115.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.8" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (397 samples, 0.16%)</title><rect x="854.8" y="99.0" width="1.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="857.8" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (347 samples, 0.14%)</title><rect x="856.7" y="147.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.7" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (311 samples, 0.12%)</title><rect x="856.7" y="131.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="859.7" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (137 samples, 0.05%)</title><rect x="858.3" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (137 samples, 0.05%)</title><rect x="858.3" y="195.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (137 samples, 0.05%)</title><rect x="858.3" y="179.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (137 samples, 0.05%)</title><rect x="858.3" y="163.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="861.3" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (137 samples, 0.05%)</title><rect x="858.3" y="147.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.3" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (137 samples, 0.05%)</title><rect x="858.3" y="131.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.3" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (137 samples, 0.05%)</title><rect x="858.3" y="115.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.3" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (137 samples, 0.05%)</title><rect x="858.3" y="99.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.3" y="110.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (137 samples, 0.05%)</title><rect x="858.3" y="83.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.3" y="94.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (137 samples, 0.05%)</title><rect x="858.3" y="67.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.3" y="78.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (54 samples, 0.02%)</title><rect x="858.5" y="51.0" width="0.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="861.5" y="62.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (54 samples, 0.02%)</title><rect x="858.7" y="51.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.7" y="62.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (54 samples, 0.02%)</title><rect x="858.7" y="35.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="861.7" y="46.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (58 samples, 0.02%)</title><rect x="859.0" y="419.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="862.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (661 samples, 0.26%)</title><rect x="859.3" y="483.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.3" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (661 samples, 0.26%)</title><rect x="859.3" y="467.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.3" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (661 samples, 0.26%)</title><rect x="859.3" y="451.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (658 samples, 0.26%)</title><rect x="859.3" y="435.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.3" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (658 samples, 0.26%)</title><rect x="859.3" y="419.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="862.3" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (640 samples, 0.26%)</title><rect x="859.3" y="403.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (638 samples, 0.26%)</title><rect x="859.3" y="387.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="862.3" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (638 samples, 0.26%)</title><rect x="859.3" y="371.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.3" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (620 samples, 0.25%)</title><rect x="859.4" y="355.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="862.4" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (596 samples, 0.24%)</title><rect x="859.4" y="339.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.4" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (593 samples, 0.24%)</title><rect x="859.4" y="323.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.4" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (545 samples, 0.22%)</title><rect x="859.6" y="307.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="862.6" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (534 samples, 0.21%)</title><rect x="859.7" y="291.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="862.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (534 samples, 0.21%)</title><rect x="859.7" y="275.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (534 samples, 0.21%)</title><rect x="859.7" y="259.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="862.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (534 samples, 0.21%)</title><rect x="859.7" y="243.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.7" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (518 samples, 0.21%)</title><rect x="859.7" y="227.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.7" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (518 samples, 0.21%)</title><rect x="859.7" y="211.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.7" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (210 samples, 0.08%)</title><rect x="859.7" y="195.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.7" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (183 samples, 0.07%)</title><rect x="859.8" y="179.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.8" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (168 samples, 0.07%)</title><rect x="859.8" y="163.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="862.8" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (69 samples, 0.03%)</title><rect x="859.8" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="862.8" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (58 samples, 0.02%)</title><rect x="859.8" y="131.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.8" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (99 samples, 0.04%)</title><rect x="860.1" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.1" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (99 samples, 0.04%)</title><rect x="860.1" y="131.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="863.1" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (85 samples, 0.03%)</title><rect x="860.2" y="115.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.2" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (70 samples, 0.03%)</title><rect x="860.2" y="99.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.2" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (65 samples, 0.03%)</title><rect x="860.2" y="83.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.2" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (157 samples, 0.06%)</title><rect x="860.7" y="195.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.7" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (139 samples, 0.06%)</title><rect x="860.8" y="179.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="863.8" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (139 samples, 0.06%)</title><rect x="860.8" y="163.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.8" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (135 samples, 0.05%)</title><rect x="860.8" y="147.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.8" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (131 samples, 0.05%)</title><rect x="860.8" y="131.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="863.8" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (53 samples, 0.02%)</title><rect x="860.8" y="115.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="863.8" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (53 samples, 0.02%)</title><rect x="860.8" y="99.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.8" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (78 samples, 0.03%)</title><rect x="861.0" y="115.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.0" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (72 samples, 0.03%)</title><rect x="861.1" y="99.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.1" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (59 samples, 0.02%)</title><rect x="861.1" y="83.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.1" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (59 samples, 0.02%)</title><rect x="861.1" y="67.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.1" y="78.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (59 samples, 0.02%)</title><rect x="861.1" y="51.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="864.1" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (59 samples, 0.02%)</title><rect x="861.1" y="35.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="864.1" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (138 samples, 0.06%)</title><rect x="861.5" y="195.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="864.5" y="206.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (138 samples, 0.06%)</title><rect x="861.5" y="179.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="864.5" y="190.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (77 samples, 0.03%)</title><rect x="862.4" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="865.4" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (77 samples, 0.03%)</title><rect x="862.4" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.4" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (77 samples, 0.03%)</title><rect x="862.4" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="865.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (77 samples, 0.03%)</title><rect x="862.4" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="865.4" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (132 samples, 0.05%)</title><rect x="862.7" y="483.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="865.7" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (131 samples, 0.05%)</title><rect x="862.7" y="467.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="865.7" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (129 samples, 0.05%)</title><rect x="862.8" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="865.8" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (129 samples, 0.05%)</title><rect x="862.8" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="865.8" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (129 samples, 0.05%)</title><rect x="862.8" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.8" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (129 samples, 0.05%)</title><rect x="862.8" y="403.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="865.8" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (67 samples, 0.03%)</title><rect x="862.8" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="865.8" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (109 samples, 0.04%)</title><rect x="863.4" y="547.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="866.4" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (109 samples, 0.04%)</title><rect x="863.4" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.4" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (107 samples, 0.04%)</title><rect x="863.4" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="866.4" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (107 samples, 0.04%)</title><rect x="863.4" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="866.4" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (79 samples, 0.03%)</title><rect x="863.4" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.4" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (69,131 samples, 27.64%)</title><rect x="863.9" y="707.0" width="326.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.9" y="718.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5,027 samples, 2.01%)</title><rect x="863.9" y="691.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.9" y="702.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5,027 samples, 2.01%)</title><rect x="863.9" y="675.0" width="23.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="866.9" y="686.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (64,104 samples, 25.63%)</title><rect x="887.6" y="691.0" width="302.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.6" y="702.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (64,104 samples, 25.63%)</title><rect x="887.6" y="675.0" width="302.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="890.6" y="686.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (64,104 samples, 25.63%)</title><rect x="887.6" y="659.0" width="302.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="890.6" y="670.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (17,722 samples, 7.08%)</title><rect x="887.6" y="643.0" width="83.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="890.6" y="654.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (17,722 samples, 7.08%)</title><rect x="887.6" y="627.0" width="83.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="890.6" y="638.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (11,464 samples, 4.58%)</title><rect x="887.6" y="611.0" width="54.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="890.6" y="622.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,789 samples, 1.11%)</title><rect x="887.6" y="595.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="890.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,789 samples, 1.11%)</title><rect x="887.6" y="579.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="890.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,789 samples, 1.11%)</title><rect x="887.6" y="563.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="890.6" y="574.0"></text>
</g>
<g>
<title>java.lang.String (954 samples, 0.38%)</title><rect x="887.6" y="547.0" width="4.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="890.6" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,835 samples, 0.73%)</title><rect x="892.1" y="547.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="895.1" y="558.0"></text>
</g>
<g>
<title>byte[] (1,835 samples, 0.73%)</title><rect x="892.1" y="531.0" width="8.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="895.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6,255 samples, 2.50%)</title><rect x="900.8" y="595.0" width="29.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.8" y="606.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6,255 samples, 2.50%)</title><rect x="900.8" y="579.0" width="29.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.8" y="590.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (6,255 samples, 2.50%)</title><rect x="900.8" y="563.0" width="29.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.8" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,255 samples, 2.50%)</title><rect x="900.8" y="547.0" width="29.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.8" y="558.0">ja..</text>
</g>
<g>
<title>java.lang.String (4,154 samples, 1.66%)</title><rect x="900.8" y="531.0" width="19.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="903.8" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,101 samples, 0.84%)</title><rect x="920.4" y="531.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.4" y="542.0"></text>
</g>
<g>
<title>byte[] (2,101 samples, 0.84%)</title><rect x="920.4" y="515.0" width="9.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="923.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (2,420 samples, 0.97%)</title><rect x="930.3" y="595.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="933.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1455724367.linkToTargetMethod (2,371 samples, 0.95%)</title><rect x="930.3" y="579.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="933.3" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,371 samples, 0.95%)</title><rect x="930.3" y="563.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$148/1601371073.get$Lambda (2,371 samples, 0.95%)</title><rect x="930.3" y="547.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.3" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$148 (2,371 samples, 0.95%)</title><rect x="930.3" y="531.0" width="11.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="933.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6,258 samples, 2.50%)</title><rect x="941.7" y="611.0" width="29.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.7" y="622.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (6,258 samples, 2.50%)</title><rect x="941.7" y="595.0" width="29.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.7" y="606.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,258 samples, 2.50%)</title><rect x="941.7" y="579.0" width="29.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="944.7" y="590.0">ja..</text>
</g>
<g>
<title>java.lang.String (3,406 samples, 1.36%)</title><rect x="941.7" y="563.0" width="16.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="944.7" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,852 samples, 1.14%)</title><rect x="957.8" y="563.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.8" y="574.0"></text>
</g>
<g>
<title>byte[] (2,852 samples, 1.14%)</title><rect x="957.8" y="547.0" width="13.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="960.8" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (29,886 samples, 11.95%)</title><rect x="971.2" y="643.0" width="141.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.2" y="654.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one.nio.http.Request (3,633 samples, 1.45%)</title><rect x="971.2" y="627.0" width="17.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="974.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5,192 samples, 2.08%)</title><rect x="988.3" y="627.0" width="24.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="991.3" y="638.0">o..</text>
</g>
<g>
<title>java.lang.String[] (3,977 samples, 1.59%)</title><rect x="988.3" y="611.0" width="18.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="991.3" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (1,215 samples, 0.49%)</title><rect x="1007.1" y="611.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1010.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21,061 samples, 8.42%)</title><rect x="1012.8" y="627.0" width="99.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1015.8" y="638.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (21,061 samples, 8.42%)</title><rect x="1012.8" y="611.0" width="99.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.8" y="622.0">one/nio/util..</text>
</g>
<g>
<title>char[] (5,647 samples, 2.26%)</title><rect x="1012.8" y="595.0" width="26.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1015.8" y="606.0">c..</text>
</g>
<g>
<title>char[] (4,012 samples, 1.60%)</title><rect x="1039.5" y="595.0" width="18.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1042.5" y="606.0"></text>
</g>
<g>
<title>java.lang.String (1,410 samples, 0.56%)</title><rect x="1058.4" y="595.0" width="6.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1061.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,992 samples, 3.99%)</title><rect x="1065.0" y="595.0" width="47.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1068.0" y="606.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,992 samples, 3.99%)</title><rect x="1065.0" y="579.0" width="47.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1068.0" y="590.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (9,992 samples, 3.99%)</title><rect x="1065.0" y="563.0" width="47.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.0" y="574.0">java..</text>
</g>
<g>
<title>byte[] (9,984 samples, 3.99%)</title><rect x="1065.0" y="547.0" width="47.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1068.0" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,496 samples, 6.59%)</title><rect x="1112.2" y="643.0" width="77.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1115.2" y="654.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,496 samples, 6.59%)</title><rect x="1112.2" y="627.0" width="77.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.2" y="638.0">one/nio/u..</text>
</g>
<g>
<title>char[] (9,136 samples, 3.65%)</title><rect x="1112.2" y="611.0" width="43.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1115.2" y="622.0">char[]</text>
</g>
<g>
<title>char[] (364 samples, 0.15%)</title><rect x="1155.3" y="611.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1158.3" y="622.0"></text>
</g>
<g>
<title>java.lang.String (2,868 samples, 1.15%)</title><rect x="1157.0" y="611.0" width="13.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1160.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,128 samples, 1.65%)</title><rect x="1170.5" y="611.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1173.5" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,128 samples, 1.65%)</title><rect x="1170.5" y="595.0" width="19.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1173.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,128 samples, 1.65%)</title><rect x="1170.5" y="579.0" width="19.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1173.5" y="590.0"></text>
</g>
<g>
<title>byte[] (4,128 samples, 1.65%)</title><rect x="1170.5" y="563.0" width="19.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1173.5" y="574.0"></text>
</g>
</g>
</svg>
