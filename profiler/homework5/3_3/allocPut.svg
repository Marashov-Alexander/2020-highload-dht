<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (74,590 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (53,141 samples, 71.24%)</title><rect x="10.1" y="771.0" width="840.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (23 samples, 0.03%)</title><rect x="10.1" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.1" y="766.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (23 samples, 0.03%)</title><rect x="10.1" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/903563279.linkToTargetMethod (23 samples, 0.03%)</title><rect x="10.1" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/280610638.invoke (23 samples, 0.03%)</title><rect x="10.1" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (23 samples, 0.03%)</title><rect x="10.1" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53,118 samples, 71.21%)</title><rect x="10.5" y="755.0" width="840.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.5" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53,118 samples, 71.21%)</title><rect x="10.5" y="739.0" width="840.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,194 samples, 1.60%)</title><rect x="10.5" y="723.0" width="18.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,194 samples, 1.60%)</title><rect x="10.5" y="707.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,181 samples, 1.58%)</title><rect x="10.5" y="691.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,181 samples, 1.58%)</title><rect x="10.5" y="675.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.5" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,181 samples, 1.58%)</title><rect x="10.5" y="659.0" width="18.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="13.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$76/1984127695.run (284 samples, 0.38%)</title><rect x="29.3" y="723.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$2 (284 samples, 0.38%)</title><rect x="29.3" y="707.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (284 samples, 0.38%)</title><rect x="29.3" y="691.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.3" y="702.0"></text>
</g>
<g>
<title>one.nio.http.Response (23 samples, 0.03%)</title><rect x="29.3" y="675.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="32.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (81 samples, 0.11%)</title><rect x="29.7" y="675.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.7" y="686.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.04%)</title><rect x="29.7" y="659.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="32.7" y="670.0"></text>
</g>
<g>
<title>java.lang.String[] (26 samples, 0.03%)</title><rect x="30.2" y="659.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="33.2" y="670.0"></text>
</g>
<g>
<title>java.lang.String (26 samples, 0.03%)</title><rect x="30.6" y="659.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="33.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (180 samples, 0.24%)</title><rect x="31.0" y="675.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.0" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (119 samples, 0.16%)</title><rect x="31.0" y="659.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.0" y="670.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (119 samples, 0.16%)</title><rect x="31.0" y="643.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="34.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (16 samples, 0.02%)</title><rect x="32.9" y="659.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (16 samples, 0.02%)</title><rect x="32.9" y="643.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (16 samples, 0.02%)</title><rect x="32.9" y="627.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.upsert (45 samples, 0.06%)</title><rect x="33.1" y="659.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (31 samples, 0.04%)</title><rect x="33.1" y="643.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (31 samples, 0.04%)</title><rect x="33.1" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.1" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (18 samples, 0.02%)</title><rect x="33.3" y="611.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="36.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$84/2037434908.run (20,382 samples, 27.33%)</title><rect x="33.8" y="723.0" width="322.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.8" y="734.0">ru/mail/polis/service/alexander/marashov/Res..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$iterateOverNodes$6 (20,382 samples, 27.33%)</title><rect x="33.8" y="707.0" width="322.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.8" y="718.0">ru/mail/polis/service/alexander/marashov/Res..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$79/1012503319.accept (20,382 samples, 27.33%)</title><rect x="33.8" y="691.0" width="322.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.8" y="702.0">ru/mail/polis/service/alexander/marashov/Res..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.lambda$put$3 (20,382 samples, 27.33%)</title><rect x="33.8" y="675.0" width="322.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.8" y="686.0">ru/mail/polis/service/alexander/marashov/Res..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (20,356 samples, 27.29%)</title><rect x="33.8" y="659.0" width="322.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.8" y="670.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (20,356 samples, 27.29%)</title><rect x="33.8" y="643.0" width="322.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.8" y="654.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (58 samples, 0.08%)</title><rect x="33.8" y="627.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="36.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (18,752 samples, 25.14%)</title><rect x="34.8" y="627.0" width="296.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.8" y="638.0">one/nio/http/HttpClient$ResponseReader.&lt;..</text>
</g>
<g>
<title>byte[] (7,301 samples, 9.79%)</title><rect x="34.8" y="611.0" width="115.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="37.8" y="622.0">byte[]</text>
</g>
<g>
<title>byte[] (11,451 samples, 15.35%)</title><rect x="150.3" y="611.0" width="181.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="153.3" y="622.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,057 samples, 1.42%)</title><rect x="331.4" y="627.0" width="16.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="334.4" y="638.0"></text>
</g>
<g>
<title>byte[] (31 samples, 0.04%)</title><rect x="331.4" y="611.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="334.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (68 samples, 0.09%)</title><rect x="331.9" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (68 samples, 0.09%)</title><rect x="331.9" y="595.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.9" y="606.0"></text>
</g>
<g>
<title>java.lang.String (24 samples, 0.03%)</title><rect x="331.9" y="579.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="334.9" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (44 samples, 0.06%)</title><rect x="332.3" y="579.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.3" y="590.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.06%)</title><rect x="332.3" y="563.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="335.3" y="574.0"></text>
</g>
<g>
<title>one.nio.http.Response (24 samples, 0.03%)</title><rect x="333.0" y="611.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="336.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (818 samples, 1.10%)</title><rect x="333.4" y="611.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (818 samples, 1.10%)</title><rect x="333.4" y="595.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.4" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (818 samples, 1.10%)</title><rect x="333.4" y="579.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.4" y="590.0"></text>
</g>
<g>
<title>char[] (527 samples, 0.71%)</title><rect x="333.4" y="563.0" width="8.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="336.4" y="574.0"></text>
</g>
<g>
<title>java.lang.String (129 samples, 0.17%)</title><rect x="341.7" y="563.0" width="2.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="344.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (162 samples, 0.22%)</title><rect x="343.7" y="563.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (162 samples, 0.22%)</title><rect x="343.7" y="547.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (162 samples, 0.22%)</title><rect x="343.7" y="531.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.7" y="542.0"></text>
</g>
<g>
<title>byte[] (162 samples, 0.22%)</title><rect x="343.7" y="515.0" width="2.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="346.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (41 samples, 0.05%)</title><rect x="346.3" y="611.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.3" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (41 samples, 0.05%)</title><rect x="346.3" y="595.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="349.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (75 samples, 0.10%)</title><rect x="346.9" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (75 samples, 0.10%)</title><rect x="346.9" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (75 samples, 0.10%)</title><rect x="346.9" y="579.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.9" y="590.0"></text>
</g>
<g>
<title>java.lang.String (46 samples, 0.06%)</title><rect x="346.9" y="563.0" width="0.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="349.9" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (29 samples, 0.04%)</title><rect x="347.7" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.7" y="574.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.04%)</title><rect x="347.7" y="547.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="350.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (356 samples, 0.48%)</title><rect x="348.1" y="627.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.1" y="638.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (356 samples, 0.48%)</title><rect x="348.1" y="611.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.1" y="622.0"></text>
</g>
<g>
<title>byte[] (356 samples, 0.48%)</title><rect x="348.1" y="595.0" width="5.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="351.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (89 samples, 0.12%)</title><rect x="353.8" y="627.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (89 samples, 0.12%)</title><rect x="353.8" y="611.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (89 samples, 0.12%)</title><rect x="353.8" y="595.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.8" y="606.0"></text>
</g>
<g>
<title>java.lang.String (41 samples, 0.05%)</title><rect x="353.8" y="579.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="356.8" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (48 samples, 0.06%)</title><rect x="354.4" y="579.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.4" y="590.0"></text>
</g>
<g>
<title>byte[] (48 samples, 0.06%)</title><rect x="354.4" y="563.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="357.4" y="574.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (44 samples, 0.06%)</title><rect x="355.2" y="627.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.2" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (44 samples, 0.06%)</title><rect x="355.2" y="611.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.2" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (44 samples, 0.06%)</title><rect x="355.2" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.2" y="606.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (44 samples, 0.06%)</title><rect x="355.2" y="579.0" width="0.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="358.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.accept (26 samples, 0.03%)</title><rect x="355.9" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.signalAll (26 samples, 0.03%)</title><rect x="355.9" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signalAll (26 samples, 0.03%)</title><rect x="355.9" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignalAll (26 samples, 0.03%)</title><rect x="355.9" y="611.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 0.03%)</title><rect x="355.9" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (26 samples, 0.03%)</title><rect x="355.9" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.initializeSyncQueue (26 samples, 0.03%)</title><rect x="355.9" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.9" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (26 samples, 0.03%)</title><rect x="355.9" y="547.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="358.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/1400284883.run (29,582 samples, 39.66%)</title><rect x="356.3" y="723.0" width="468.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.3" y="734.0">ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$handleEntityPut$3 (29,582 samples, 39.66%)</title><rect x="356.3" y="707.0" width="468.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="359.3" y="718.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.lambda$hand..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,446 samples, 1.94%)</title><rect x="356.3" y="691.0" width="22.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.3" y="702.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,446 samples, 1.94%)</title><rect x="356.3" y="675.0" width="22.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.3" y="686.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,446 samples, 1.94%)</title><rect x="356.3" y="659.0" width="22.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="359.3" y="670.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.put (11,290 samples, 15.14%)</title><rect x="379.2" y="691.0" width="178.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.2" y="702.0">ru/mail/polis/service/a..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (508 samples, 0.68%)</title><rect x="379.2" y="675.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (508 samples, 0.68%)</title><rect x="379.2" y="659.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="382.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$76/1984127695.get$Lambda (296 samples, 0.40%)</title><rect x="379.2" y="643.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.2" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$76 (296 samples, 0.40%)</title><rect x="379.2" y="627.0" width="4.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="382.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$79/1012503319.get$Lambda (212 samples, 0.28%)</title><rect x="383.8" y="643.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.8" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$79 (212 samples, 0.28%)</title><rect x="383.8" y="627.0" width="3.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="386.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,011 samples, 1.36%)</title><rect x="387.2" y="675.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,011 samples, 1.36%)</title><rect x="387.2" y="659.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,011 samples, 1.36%)</title><rect x="387.2" y="643.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.2" y="654.0"></text>
</g>
<g>
<title>java.lang.String (515 samples, 0.69%)</title><rect x="387.2" y="627.0" width="8.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="390.2" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (496 samples, 0.66%)</title><rect x="395.3" y="627.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.3" y="638.0"></text>
</g>
<g>
<title>byte[] (496 samples, 0.66%)</title><rect x="395.3" y="611.0" width="7.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="398.3" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.analyzers.SimpleResponseAnalyzer (436 samples, 0.58%)</title><rect x="403.2" y="675.0" width="6.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="406.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/DaoManager.put (5,813 samples, 7.79%)</title><rect x="410.1" y="675.0" width="91.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.1" y="686.0">ru/mail/pol..</text>
</g>
<g>
<title>one.nio.http.Response (457 samples, 0.61%)</title><rect x="410.1" y="659.0" width="7.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="413.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,010 samples, 2.69%)</title><rect x="417.3" y="659.0" width="31.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.3" y="670.0">on..</text>
</g>
<g>
<title>byte[] (871 samples, 1.17%)</title><rect x="417.3" y="643.0" width="13.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="420.3" y="654.0"></text>
</g>
<g>
<title>java.lang.String[] (659 samples, 0.88%)</title><rect x="431.1" y="643.0" width="10.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="434.1" y="654.0"></text>
</g>
<g>
<title>java.lang.String (480 samples, 0.64%)</title><rect x="441.5" y="643.0" width="7.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="444.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.upsert (3,346 samples, 4.49%)</title><rect x="449.1" y="659.0" width="52.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.1" y="670.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2,091 samples, 2.80%)</title><rect x="449.1" y="643.0" width="33.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.1" y="654.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,091 samples, 2.80%)</title><rect x="449.1" y="627.0" width="33.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="452.1" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (31 samples, 0.04%)</title><rect x="482.2" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (31 samples, 0.04%)</title><rect x="482.2" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (31 samples, 0.04%)</title><rect x="482.2" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (29 samples, 0.04%)</title><rect x="482.2" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (29 samples, 0.04%)</title><rect x="482.2" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (20 samples, 0.03%)</title><rect x="482.2" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.2" y="574.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (20 samples, 0.03%)</title><rect x="482.2" y="547.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="485.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.upsert (1,222 samples, 1.64%)</title><rect x="482.7" y="643.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (754 samples, 1.01%)</title><rect x="482.7" y="627.0" width="11.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (754 samples, 1.01%)</title><rect x="482.7" y="611.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="485.7" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (250 samples, 0.34%)</title><rect x="482.7" y="595.0" width="4.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="485.7" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (504 samples, 0.68%)</title><rect x="486.7" y="595.0" width="7.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="489.7" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (468 samples, 0.63%)</title><rect x="494.6" y="627.0" width="7.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="497.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager.iterateOverNodes (450 samples, 0.60%)</title><rect x="502.0" y="675.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (440 samples, 0.59%)</title><rect x="502.0" y="659.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (440 samples, 0.59%)</title><rect x="502.0" y="643.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ResponseManager$$Lambda$84/2037434908.get$Lambda (440 samples, 0.59%)</title><rect x="502.0" y="627.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.0" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ResponseManager$$Lambda$84 (440 samples, 0.59%)</title><rect x="502.0" y="611.0" width="7.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="505.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.await (283 samples, 0.38%)</title><rect x="509.2" y="675.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (283 samples, 0.38%)</title><rect x="509.2" y="659.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (283 samples, 0.38%)</title><rect x="509.2" y="643.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.2" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (283 samples, 0.38%)</title><rect x="509.2" y="627.0" width="4.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="512.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.getResult (1,046 samples, 1.40%)</title><rect x="513.6" y="675.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.privateGetResult (1,046 samples, 1.40%)</title><rect x="513.6" y="659.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.6" y="670.0"></text>
</g>
<g>
<title>one.nio.http.Response (197 samples, 0.26%)</title><rect x="513.6" y="643.0" width="3.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="516.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (849 samples, 1.14%)</title><rect x="516.8" y="643.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.8" y="654.0"></text>
</g>
<g>
<title>byte[] (386 samples, 0.52%)</title><rect x="516.8" y="627.0" width="6.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="519.8" y="638.0"></text>
</g>
<g>
<title>java.lang.String[] (267 samples, 0.36%)</title><rect x="522.9" y="627.0" width="4.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="525.9" y="638.0"></text>
</g>
<g>
<title>java.lang.String (196 samples, 0.26%)</title><rect x="527.1" y="627.0" width="3.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="530.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/SimpleResponseAnalyzer.&lt;init&gt; (594 samples, 0.80%)</title><rect x="530.2" y="675.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/analyzers/ResponseAnalyzer.&lt;init&gt; (594 samples, 0.80%)</title><rect x="530.2" y="659.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.2" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock (142 samples, 0.19%)</title><rect x="530.2" y="643.0" width="2.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="533.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (269 samples, 0.36%)</title><rect x="532.4" y="643.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.4" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantLock$NonfairSync (269 samples, 0.36%)</title><rect x="532.4" y="627.0" width="4.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="535.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.newCondition (183 samples, 0.25%)</title><rect x="536.7" y="643.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.newCondition (183 samples, 0.25%)</title><rect x="536.7" y="627.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.7" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject (183 samples, 0.25%)</title><rect x="536.7" y="611.0" width="2.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="539.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,149 samples, 1.54%)</title><rect x="539.6" y="675.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="542.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/topologies/RendezvousTopology.primariesFor (1,149 samples, 1.54%)</title><rect x="539.6" y="659.0" width="18.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.6" y="670.0"></text>
</g>
<g>
<title>java.lang.String[] (239 samples, 0.32%)</title><rect x="539.6" y="643.0" width="3.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="542.6" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (270 samples, 0.36%)</title><rect x="543.4" y="643.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="546.4" y="654.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (270 samples, 0.36%)</title><rect x="543.4" y="627.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.4" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (270 samples, 0.36%)</title><rect x="543.4" y="611.0" width="4.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="546.4" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.topologies.RendezvousTopology$NodeKeyPair (640 samples, 0.86%)</title><rect x="547.6" y="643.0" width="10.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="550.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.trySendAnswer (3,869 samples, 5.19%)</title><rect x="557.8" y="691.0" width="61.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.8" y="702.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,869 samples, 5.19%)</title><rect x="557.8" y="675.0" width="61.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="560.8" y="686.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3,869 samples, 5.19%)</title><rect x="557.8" y="659.0" width="61.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.8" y="670.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,724 samples, 3.65%)</title><rect x="557.8" y="643.0" width="43.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="560.8" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,724 samples, 3.65%)</title><rect x="557.8" y="627.0" width="43.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="560.8" y="638.0">one/..</text>
</g>
<g>
<title>byte[] (2,698 samples, 3.62%)</title><rect x="557.8" y="611.0" width="42.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="560.8" y="622.0">byte[]</text>
</g>
<g>
<title>byte[] (26 samples, 0.03%)</title><rect x="600.4" y="611.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="603.4" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,145 samples, 1.54%)</title><rect x="600.9" y="643.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="603.9" y="654.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,145 samples, 1.54%)</title><rect x="600.9" y="627.0" width="18.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="603.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.validateParameters (12,977 samples, 17.40%)</title><rect x="619.0" y="691.0" width="205.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.0" y="702.0">ru/mail/polis/service/alexa..</text>
</g>
<g>
<title>java/lang/String.getBytes (925 samples, 1.24%)</title><rect x="619.0" y="675.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="622.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (925 samples, 1.24%)</title><rect x="619.0" y="659.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (925 samples, 1.24%)</title><rect x="619.0" y="643.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (925 samples, 1.24%)</title><rect x="619.0" y="627.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.0" y="638.0"></text>
</g>
<g>
<title>byte[] (925 samples, 1.24%)</title><rect x="619.0" y="611.0" width="14.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="622.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,401 samples, 1.88%)</title><rect x="633.6" y="675.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.6" y="686.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,401 samples, 1.88%)</title><rect x="633.6" y="659.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.6" y="670.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,401 samples, 1.88%)</title><rect x="633.6" y="643.0" width="22.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="636.6" y="654.0">j..</text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ValidatedParameters (736 samples, 0.99%)</title><rect x="655.8" y="675.0" width="11.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="658.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ValidatedParameters.unpackReplicasParameter (9,915 samples, 13.29%)</title><rect x="667.4" y="675.0" width="156.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.4" y="686.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2,371 samples, 3.18%)</title><rect x="667.4" y="659.0" width="37.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.4" y="670.0">com..</text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (876 samples, 1.17%)</title><rect x="667.4" y="643.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.4" y="654.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (876 samples, 1.17%)</title><rect x="667.4" y="627.0" width="13.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="670.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (1,495 samples, 2.00%)</title><rect x="681.3" y="643.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.3" y="654.0">c..</text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (492 samples, 0.66%)</title><rect x="681.3" y="627.0" width="7.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="684.3" y="638.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (1,003 samples, 1.34%)</title><rect x="689.0" y="627.0" width="15.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="692.0" y="638.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (7,544 samples, 10.11%)</title><rect x="704.9" y="659.0" width="119.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.9" y="670.0">com/google/comm..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2,838 samples, 3.80%)</title><rect x="704.9" y="643.0" width="44.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.9" y="654.0">com/..</text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2,838 samples, 3.80%)</title><rect x="704.9" y="627.0" width="44.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="707.9" y="638.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,838 samples, 3.80%)</title><rect x="704.9" y="611.0" width="44.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.9" y="622.0">com/..</text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,838 samples, 3.80%)</title><rect x="704.9" y="595.0" width="44.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="707.9" y="606.0">com/..</text>
</g>
<g>
<title>java/lang/String.subSequence (2,838 samples, 3.80%)</title><rect x="704.9" y="579.0" width="44.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.9" y="590.0">java..</text>
</g>
<g>
<title>java/lang/String.substring (2,838 samples, 3.80%)</title><rect x="704.9" y="563.0" width="44.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.9" y="574.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,838 samples, 3.80%)</title><rect x="704.9" y="547.0" width="44.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.9" y="558.0">java..</text>
</g>
<g>
<title>java.lang.String (1,458 samples, 1.95%)</title><rect x="704.9" y="531.0" width="23.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="707.9" y="542.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,380 samples, 1.85%)</title><rect x="728.0" y="531.0" width="21.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.0" y="542.0">j..</text>
</g>
<g>
<title>byte[] (1,380 samples, 1.85%)</title><rect x="728.0" y="515.0" width="21.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="731.0" y="526.0">b..</text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1,462 samples, 1.96%)</title><rect x="749.8" y="643.0" width="23.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.8" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,462 samples, 1.96%)</title><rect x="749.8" y="627.0" width="23.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.8" y="638.0">c..</text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1,462 samples, 1.96%)</title><rect x="749.8" y="611.0" width="23.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.8" y="622.0">c..</text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (1,462 samples, 1.96%)</title><rect x="749.8" y="595.0" width="23.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="752.8" y="606.0">c..</text>
</g>
<g>
<title>java.util.ArrayList (774 samples, 1.04%)</title><rect x="772.9" y="643.0" width="12.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="775.9" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,708 samples, 2.29%)</title><rect x="785.2" y="643.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.2" y="654.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.add (1,708 samples, 2.29%)</title><rect x="785.2" y="627.0" width="27.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.2" y="638.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,708 samples, 2.29%)</title><rect x="785.2" y="611.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.2" y="622.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (1,708 samples, 2.29%)</title><rect x="785.2" y="595.0" width="27.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.2" y="606.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,708 samples, 2.29%)</title><rect x="785.2" y="579.0" width="27.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.2" y="590.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (1,705 samples, 2.29%)</title><rect x="785.2" y="563.0" width="27.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="788.2" y="574.0">j..</text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (762 samples, 1.02%)</title><rect x="812.2" y="643.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.2" y="654.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (762 samples, 1.02%)</title><rect x="812.2" y="627.0" width="12.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="815.2" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (1,676 samples, 2.25%)</title><rect x="824.3" y="723.0" width="26.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="827.3" y="734.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,676 samples, 2.25%)</title><rect x="824.3" y="707.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.3" y="718.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$118/752700863.run (1,676 samples, 2.25%)</title><rect x="824.3" y="691.0" width="26.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.3" y="702.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (1,676 samples, 2.25%)</title><rect x="824.3" y="675.0" width="26.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.3" y="686.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (1,676 samples, 2.25%)</title><rect x="824.3" y="659.0" width="26.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.3" y="670.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (1,676 samples, 2.25%)</title><rect x="824.3" y="643.0" width="26.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.3" y="654.0">s..</text>
</g>
<g>
<title>java.io.DataOutputStream (18 samples, 0.02%)</title><rect x="824.3" y="627.0" width="0.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="827.3" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (1,656 samples, 2.22%)</title><rect x="824.6" y="627.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.6" y="638.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,588 samples, 2.13%)</title><rect x="824.6" y="611.0" width="25.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.6" y="622.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,588 samples, 2.13%)</title><rect x="824.6" y="595.0" width="25.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.6" y="606.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,588 samples, 2.13%)</title><rect x="824.6" y="579.0" width="25.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.6" y="590.0">s..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1,588 samples, 2.13%)</title><rect x="824.6" y="563.0" width="25.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.6" y="574.0">s..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,069 samples, 1.43%)</title><rect x="824.6" y="547.0" width="16.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="827.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,069 samples, 1.43%)</title><rect x="824.6" y="531.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,060 samples, 1.42%)</title><rect x="824.6" y="515.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="827.6" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,060 samples, 1.42%)</title><rect x="824.6" y="499.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="827.6" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,014 samples, 1.36%)</title><rect x="824.6" y="483.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.6" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,014 samples, 1.36%)</title><rect x="824.6" y="467.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="827.6" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,014 samples, 1.36%)</title><rect x="824.6" y="451.0" width="16.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.6" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,014 samples, 1.36%)</title><rect x="824.6" y="435.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.6" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,014 samples, 1.36%)</title><rect x="824.6" y="419.0" width="16.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.6" y="430.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,013 samples, 1.36%)</title><rect x="824.7" y="403.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.7" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,013 samples, 1.36%)</title><rect x="824.7" y="387.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.7" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,013 samples, 1.36%)</title><rect x="824.7" y="371.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="827.7" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,013 samples, 1.36%)</title><rect x="824.7" y="355.0" width="16.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="827.7" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,013 samples, 1.36%)</title><rect x="824.7" y="339.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.7" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,013 samples, 1.36%)</title><rect x="824.7" y="323.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="827.7" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,013 samples, 1.36%)</title><rect x="824.7" y="307.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.7" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,013 samples, 1.36%)</title><rect x="824.7" y="291.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.7" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (918 samples, 1.23%)</title><rect x="824.7" y="275.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.7" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (918 samples, 1.23%)</title><rect x="824.7" y="259.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.7" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (918 samples, 1.23%)</title><rect x="824.7" y="243.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="827.7" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (918 samples, 1.23%)</title><rect x="824.7" y="227.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="827.7" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (363 samples, 0.49%)</title><rect x="824.7" y="211.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.7" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (311 samples, 0.42%)</title><rect x="824.7" y="195.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.7" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (296 samples, 0.40%)</title><rect x="824.7" y="179.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="827.7" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (296 samples, 0.40%)</title><rect x="824.7" y="163.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="827.7" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (19 samples, 0.03%)</title><rect x="824.7" y="147.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="827.7" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (153 samples, 0.21%)</title><rect x="825.1" y="147.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.1" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (27 samples, 0.04%)</title><rect x="825.1" y="131.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.1" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (126 samples, 0.17%)</title><rect x="825.5" y="131.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.5" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (113 samples, 0.15%)</title><rect x="825.7" y="115.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.7" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (113 samples, 0.15%)</title><rect x="825.7" y="99.0" width="1.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="828.7" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (114 samples, 0.15%)</title><rect x="827.5" y="147.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.5" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (114 samples, 0.15%)</title><rect x="827.5" y="131.0" width="1.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="830.5" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (52 samples, 0.07%)</title><rect x="829.6" y="195.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.6" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (32 samples, 0.04%)</title><rect x="829.7" y="179.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.7" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (24 samples, 0.03%)</title><rect x="829.9" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.9" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (18 samples, 0.02%)</title><rect x="830.0" y="147.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="833.0" y="158.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (18 samples, 0.02%)</title><rect x="830.0" y="131.0" width="0.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="833.0" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (28 samples, 0.04%)</title><rect x="830.4" y="211.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="833.4" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (294 samples, 0.39%)</title><rect x="831.0" y="211.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.0" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (37 samples, 0.05%)</title><rect x="831.0" y="195.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.0" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (257 samples, 0.34%)</title><rect x="831.6" y="195.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.6" y="206.0"></text>
</g>
<g>
<title>java.util.TreeMap (17 samples, 0.02%)</title><rect x="831.6" y="179.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="834.6" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (240 samples, 0.32%)</title><rect x="831.9" y="179.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="834.9" y="190.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (240 samples, 0.32%)</title><rect x="831.9" y="163.0" width="3.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="834.9" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (221 samples, 0.30%)</title><rect x="835.7" y="211.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.7" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (199 samples, 0.27%)</title><rect x="835.7" y="195.0" width="3.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="838.7" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (22 samples, 0.03%)</title><rect x="838.8" y="195.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (22 samples, 0.03%)</title><rect x="838.8" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.8" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (22 samples, 0.03%)</title><rect x="838.8" y="163.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.8" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (22 samples, 0.03%)</title><rect x="838.8" y="147.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.8" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (22 samples, 0.03%)</title><rect x="838.8" y="131.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="841.8" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (22 samples, 0.03%)</title><rect x="838.8" y="115.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.8" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (95 samples, 0.13%)</title><rect x="839.2" y="275.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="842.2" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (95 samples, 0.13%)</title><rect x="839.2" y="259.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (95 samples, 0.13%)</title><rect x="839.2" y="243.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="842.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (95 samples, 0.13%)</title><rect x="839.2" y="227.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.2" y="238.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (95 samples, 0.13%)</title><rect x="839.2" y="211.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.2" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (95 samples, 0.13%)</title><rect x="839.2" y="195.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (95 samples, 0.13%)</title><rect x="839.2" y="179.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="842.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (95 samples, 0.13%)</title><rect x="839.2" y="163.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="842.2" y="174.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (95 samples, 0.13%)</title><rect x="839.2" y="147.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="842.2" y="158.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (93 samples, 0.12%)</title><rect x="839.2" y="131.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.2" y="142.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement (26 samples, 0.03%)</title><rect x="839.3" y="115.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="842.3" y="126.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (33 samples, 0.04%)</title><rect x="839.7" y="115.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="842.7" y="126.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (23 samples, 0.03%)</title><rect x="840.3" y="115.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.3" y="126.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (23 samples, 0.03%)</title><rect x="840.3" y="99.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="843.3" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 0.02%)</title><rect x="840.4" y="83.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.4" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (18 samples, 0.02%)</title><rect x="840.4" y="67.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.4" y="78.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/662822946.invoke (18 samples, 0.02%)</title><rect x="840.4" y="51.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.4" y="62.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.02%)</title><rect x="840.4" y="35.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.4" y="46.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (44 samples, 0.06%)</title><rect x="840.7" y="483.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.7" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (31 samples, 0.04%)</title><rect x="840.9" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.9" y="478.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (31 samples, 0.04%)</title><rect x="840.9" y="451.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="843.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (17 samples, 0.02%)</title><rect x="841.0" y="435.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (17 samples, 0.02%)</title><rect x="841.0" y="419.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.0" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (17 samples, 0.02%)</title><rect x="841.0" y="403.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="844.0" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (17 samples, 0.02%)</title><rect x="841.0" y="387.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.0" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (17 samples, 0.02%)</title><rect x="841.0" y="371.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.0" y="382.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (381 samples, 0.51%)</title><rect x="841.5" y="547.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="844.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (381 samples, 0.51%)</title><rect x="841.5" y="531.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (381 samples, 0.51%)</title><rect x="841.5" y="515.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (378 samples, 0.51%)</title><rect x="841.5" y="499.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (378 samples, 0.51%)</title><rect x="841.5" y="483.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (367 samples, 0.49%)</title><rect x="841.5" y="467.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="844.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (362 samples, 0.49%)</title><rect x="841.6" y="451.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.6" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (362 samples, 0.49%)</title><rect x="841.6" y="435.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.6" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (356 samples, 0.48%)</title><rect x="841.7" y="419.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.7" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (341 samples, 0.46%)</title><rect x="841.7" y="403.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.7" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (335 samples, 0.45%)</title><rect x="841.8" y="387.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.8" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (19 samples, 0.03%)</title><rect x="842.0" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.0" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (19 samples, 0.03%)</title><rect x="842.0" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.0" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (19 samples, 0.03%)</title><rect x="842.0" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.0" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (19 samples, 0.03%)</title><rect x="842.0" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="845.0" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (19 samples, 0.03%)</title><rect x="842.0" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.0" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (19 samples, 0.03%)</title><rect x="842.0" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (19 samples, 0.03%)</title><rect x="842.0" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (19 samples, 0.03%)</title><rect x="842.0" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (19 samples, 0.03%)</title><rect x="842.0" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (19 samples, 0.03%)</title><rect x="842.0" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (19 samples, 0.03%)</title><rect x="842.0" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.0" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (301 samples, 0.40%)</title><rect x="842.3" y="371.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="845.3" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (291 samples, 0.39%)</title><rect x="842.5" y="355.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (291 samples, 0.39%)</title><rect x="842.5" y="339.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (291 samples, 0.39%)</title><rect x="842.5" y="323.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="845.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (291 samples, 0.39%)</title><rect x="842.5" y="307.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (277 samples, 0.37%)</title><rect x="842.6" y="291.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.6" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (277 samples, 0.37%)</title><rect x="842.6" y="275.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.6" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (115 samples, 0.15%)</title><rect x="842.6" y="259.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.6" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (100 samples, 0.13%)</title><rect x="842.9" y="243.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (83 samples, 0.11%)</title><rect x="842.9" y="227.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (77 samples, 0.10%)</title><rect x="843.0" y="211.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="846.0" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (77 samples, 0.10%)</title><rect x="843.0" y="195.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.0" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (72 samples, 0.10%)</title><rect x="843.1" y="179.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.1" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (60 samples, 0.08%)</title><rect x="843.1" y="163.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.1" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (48 samples, 0.06%)</title><rect x="843.2" y="147.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.2" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (38 samples, 0.05%)</title><rect x="843.4" y="131.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.4" y="142.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (28 samples, 0.04%)</title><rect x="843.6" y="115.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.6" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (28 samples, 0.04%)</title><rect x="843.6" y="99.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.6" y="110.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (28 samples, 0.04%)</title><rect x="843.6" y="83.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.6" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (28 samples, 0.04%)</title><rect x="843.6" y="67.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="846.6" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (17 samples, 0.02%)</title><rect x="844.2" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="847.2" y="238.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (17 samples, 0.02%)</title><rect x="844.2" y="211.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="847.2" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (72 samples, 0.10%)</title><rect x="844.5" y="259.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="847.5" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (17 samples, 0.02%)</title><rect x="844.5" y="243.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.5" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (55 samples, 0.07%)</title><rect x="844.7" y="243.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.7" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (55 samples, 0.07%)</title><rect x="844.7" y="227.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.7" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (51 samples, 0.07%)</title><rect x="844.8" y="211.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="847.8" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (47 samples, 0.06%)</title><rect x="844.8" y="195.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="847.8" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (43 samples, 0.06%)</title><rect x="844.9" y="179.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="847.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (37 samples, 0.05%)</title><rect x="845.0" y="163.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="848.0" y="174.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (31 samples, 0.04%)</title><rect x="845.0" y="147.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (31 samples, 0.04%)</title><rect x="845.0" y="131.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (31 samples, 0.04%)</title><rect x="845.0" y="115.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.0" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (31 samples, 0.04%)</title><rect x="845.0" y="99.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="848.0" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (20 samples, 0.03%)</title><rect x="845.2" y="83.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.2" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (20 samples, 0.03%)</title><rect x="845.2" y="67.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.2" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (78 samples, 0.10%)</title><rect x="845.8" y="259.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.8" y="270.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (78 samples, 0.10%)</title><rect x="845.8" y="243.0" width="1.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="848.8" y="254.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (59 samples, 0.08%)</title><rect x="847.5" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (58 samples, 0.08%)</title><rect x="847.5" y="531.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="850.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (58 samples, 0.08%)</title><rect x="847.5" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (58 samples, 0.08%)</title><rect x="847.5" y="499.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (48 samples, 0.06%)</title><rect x="847.7" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.7" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (35 samples, 0.05%)</title><rect x="847.9" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="850.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (30 samples, 0.04%)</title><rect x="848.0" y="451.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.0" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (30 samples, 0.04%)</title><rect x="848.0" y="435.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="851.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (30 samples, 0.04%)</title><rect x="848.0" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (23 samples, 0.03%)</title><rect x="848.0" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.0" y="414.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (23 samples, 0.03%)</title><rect x="848.0" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.0" y="398.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (20 samples, 0.03%)</title><rect x="848.0" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.0" y="382.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (78 samples, 0.10%)</title><rect x="848.5" y="547.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.5" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (76 samples, 0.10%)</title><rect x="848.5" y="531.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.5" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (76 samples, 0.10%)</title><rect x="848.5" y="515.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.5" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (75 samples, 0.10%)</title><rect x="848.5" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.5" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (75 samples, 0.10%)</title><rect x="848.5" y="483.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (75 samples, 0.10%)</title><rect x="848.5" y="467.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (45 samples, 0.06%)</title><rect x="848.5" y="451.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.5" y="462.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.02%)</title><rect x="848.6" y="435.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="851.6" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (16 samples, 0.02%)</title><rect x="849.4" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.4" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (66 samples, 0.09%)</title><rect x="849.7" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.7" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (65 samples, 0.09%)</title><rect x="849.7" y="595.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.7" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (65 samples, 0.09%)</title><rect x="849.7" y="579.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.7" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (64 samples, 0.09%)</title><rect x="849.7" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.7" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (48 samples, 0.06%)</title><rect x="849.8" y="547.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.8" y="558.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (21,310 samples, 28.57%)</title><rect x="850.8" y="771.0" width="337.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="853.8" y="782.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (827 samples, 1.11%)</title><rect x="850.8" y="755.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.8" y="766.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (827 samples, 1.11%)</title><rect x="850.8" y="739.0" width="13.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="853.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (20,483 samples, 27.46%)</title><rect x="863.9" y="755.0" width="324.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.9" y="766.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (20,483 samples, 27.46%)</title><rect x="863.9" y="739.0" width="324.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.9" y="750.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (20,483 samples, 27.46%)</title><rect x="863.9" y="723.0" width="324.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="866.9" y="734.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,354 samples, 5.84%)</title><rect x="863.9" y="707.0" width="68.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.9" y="718.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,354 samples, 5.84%)</title><rect x="863.9" y="691.0" width="68.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.9" y="702.0">one/nio..</text>
</g>
<g>
<title>RequestHandler2_handleEntityPut.handleRequest (3,172 samples, 4.25%)</title><rect x="863.9" y="675.0" width="50.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.9" y="686.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,070 samples, 1.43%)</title><rect x="863.9" y="659.0" width="16.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,070 samples, 1.43%)</title><rect x="863.9" y="643.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,070 samples, 1.43%)</title><rect x="863.9" y="627.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.9" y="638.0"></text>
</g>
<g>
<title>java.lang.String (582 samples, 0.78%)</title><rect x="863.9" y="611.0" width="9.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="866.9" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (488 samples, 0.65%)</title><rect x="873.1" y="611.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.1" y="622.0"></text>
</g>
<g>
<title>byte[] (488 samples, 0.65%)</title><rect x="873.1" y="595.0" width="7.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="876.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,182 samples, 1.58%)</title><rect x="880.8" y="659.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,182 samples, 1.58%)</title><rect x="880.8" y="643.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,182 samples, 1.58%)</title><rect x="880.8" y="627.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,182 samples, 1.58%)</title><rect x="880.8" y="611.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.8" y="622.0"></text>
</g>
<g>
<title>java.lang.String (653 samples, 0.88%)</title><rect x="880.8" y="595.0" width="10.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="883.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (529 samples, 0.71%)</title><rect x="891.1" y="595.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="894.1" y="606.0"></text>
</g>
<g>
<title>byte[] (529 samples, 0.71%)</title><rect x="891.1" y="579.0" width="8.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="894.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityPut (920 samples, 1.23%)</title><rect x="899.5" y="659.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1455724367.linkToTargetMethod (912 samples, 1.22%)</title><rect x="899.5" y="643.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (912 samples, 1.22%)</title><rect x="899.5" y="627.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="902.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl$$Lambda$75/1400284883.get$Lambda (912 samples, 1.22%)</title><rect x="899.5" y="611.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="902.5" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.service.alexander.marashov.ServiceImpl$$Lambda$75 (912 samples, 1.22%)</title><rect x="899.5" y="595.0" width="14.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="902.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,182 samples, 1.58%)</title><rect x="914.0" y="675.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="917.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,182 samples, 1.58%)</title><rect x="914.0" y="659.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,182 samples, 1.58%)</title><rect x="914.0" y="643.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.0" y="654.0"></text>
</g>
<g>
<title>java.lang.String (500 samples, 0.67%)</title><rect x="914.0" y="627.0" width="7.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="917.0" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (682 samples, 0.91%)</title><rect x="921.9" y="627.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.9" y="638.0"></text>
</g>
<g>
<title>byte[] (682 samples, 0.91%)</title><rect x="921.9" y="611.0" width="10.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="924.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7,408 samples, 9.93%)</title><rect x="932.7" y="707.0" width="117.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.7" y="718.0">one/nio/http/H..</text>
</g>
<g>
<title>one.nio.http.Request (1,129 samples, 1.51%)</title><rect x="932.7" y="691.0" width="17.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="935.7" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,900 samples, 2.55%)</title><rect x="950.6" y="691.0" width="30.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.6" y="702.0">on..</text>
</g>
<g>
<title>java.lang.String[] (1,879 samples, 2.52%)</title><rect x="950.6" y="675.0" width="29.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="953.6" y="686.0">ja..</text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.03%)</title><rect x="980.3" y="675.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="983.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,379 samples, 5.87%)</title><rect x="980.7" y="691.0" width="69.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="983.7" y="702.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,379 samples, 5.87%)</title><rect x="980.7" y="675.0" width="69.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="983.7" y="686.0">one/nio..</text>
</g>
<g>
<title>char[] (2,619 samples, 3.51%)</title><rect x="980.7" y="659.0" width="41.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="983.7" y="670.0">cha..</text>
</g>
<g>
<title>char[] (101 samples, 0.14%)</title><rect x="1022.1" y="659.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1025.1" y="670.0"></text>
</g>
<g>
<title>java.lang.String (520 samples, 0.70%)</title><rect x="1023.7" y="659.0" width="8.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1026.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,139 samples, 1.53%)</title><rect x="1031.9" y="659.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1034.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,139 samples, 1.53%)</title><rect x="1031.9" y="643.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1034.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,139 samples, 1.53%)</title><rect x="1031.9" y="627.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1034.9" y="638.0"></text>
</g>
<g>
<title>byte[] (1,138 samples, 1.53%)</title><rect x="1031.9" y="611.0" width="18.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1034.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,021 samples, 1.37%)</title><rect x="1049.9" y="707.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.9" y="718.0"></text>
</g>
<g>
<title>byte[] (1,021 samples, 1.37%)</title><rect x="1049.9" y="691.0" width="16.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1052.9" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,099 samples, 1.47%)</title><rect x="1066.1" y="707.0" width="17.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1069.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,099 samples, 1.47%)</title><rect x="1066.1" y="691.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1069.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,099 samples, 1.47%)</title><rect x="1066.1" y="675.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1069.1" y="686.0"></text>
</g>
<g>
<title>java.lang.String (503 samples, 0.67%)</title><rect x="1066.1" y="659.0" width="7.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1069.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (596 samples, 0.80%)</title><rect x="1074.0" y="659.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.0" y="670.0"></text>
</g>
<g>
<title>byte[] (596 samples, 0.80%)</title><rect x="1074.0" y="643.0" width="9.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1077.0" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,601 samples, 8.85%)</title><rect x="1083.5" y="707.0" width="104.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.5" y="718.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,601 samples, 8.85%)</title><rect x="1083.5" y="691.0" width="104.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1086.5" y="702.0">one/nio/util..</text>
</g>
<g>
<title>char[] (3,469 samples, 4.65%)</title><rect x="1083.5" y="675.0" width="54.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1086.5" y="686.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,250 samples, 1.68%)</title><rect x="1138.4" y="675.0" width="19.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1141.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,879 samples, 2.52%)</title><rect x="1158.2" y="675.0" width="29.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1161.2" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,879 samples, 2.52%)</title><rect x="1158.2" y="659.0" width="29.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1161.2" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,879 samples, 2.52%)</title><rect x="1158.2" y="643.0" width="29.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1161.2" y="654.0">ja..</text>
</g>
<g>
<title>byte[] (1,879 samples, 2.52%)</title><rect x="1158.2" y="627.0" width="29.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1161.2" y="638.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Flusher.run (133 samples, 0.18%)</title><rect x="1187.9" y="771.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.serialize (129 samples, 0.17%)</title><rect x="1188.0" y="755.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (126 samples, 0.17%)</title><rect x="1188.0" y="739.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1191.0" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (79 samples, 0.11%)</title><rect x="1188.0" y="723.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1191.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (79 samples, 0.11%)</title><rect x="1188.0" y="707.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (79 samples, 0.11%)</title><rect x="1188.0" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1191.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (79 samples, 0.11%)</title><rect x="1188.0" y="675.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$143/1248898623.getAsBoolean (79 samples, 0.11%)</title><rect x="1188.0" y="659.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (79 samples, 0.11%)</title><rect x="1188.0" y="643.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (79 samples, 0.11%)</title><rect x="1188.0" y="627.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (72 samples, 0.10%)</title><rect x="1188.1" y="611.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$131/1875641432.apply (72 samples, 0.10%)</title><rect x="1188.1" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (72 samples, 0.10%)</title><rect x="1188.1" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1191.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (50 samples, 0.07%)</title><rect x="1188.1" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1191.1" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (50 samples, 0.07%)</title><rect x="1188.1" y="547.0" width="0.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1191.1" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (22 samples, 0.03%)</title><rect x="1188.9" y="563.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1191.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$$Lambda$138/1696968646.accept (47 samples, 0.06%)</title><rect x="1189.3" y="723.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.lambda$serialize$0 (47 samples, 0.06%)</title><rect x="1189.3" y="707.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (29 samples, 0.04%)</title><rect x="1189.5" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.5" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (29 samples, 0.04%)</title><rect x="1189.5" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.5" y="686.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (29 samples, 0.04%)</title><rect x="1189.5" y="659.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1192.5" y="670.0"></text>
</g>
</g>
</svg>
