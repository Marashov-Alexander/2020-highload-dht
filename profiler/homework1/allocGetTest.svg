<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (324 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (13 samples, 4.01%)</title><rect x="10.0" y="675.0" width="47.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="686.0">java..</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.62%)</title><rect x="10.0" y="659.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (2 samples, 0.62%)</title><rect x="10.0" y="643.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1839893528.linkToTargetMethod (2 samples, 0.62%)</title><rect x="10.0" y="627.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/757865708.invoke (2 samples, 0.62%)</title><rect x="10.0" y="611.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.62%)</title><rect x="10.0" y="595.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.62%)</title><rect x="10.0" y="579.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.62%)</title><rect x="10.0" y="563.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.62%)</title><rect x="10.0" y="547.0" width="7.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (11 samples, 3.40%)</title><rect x="17.3" y="659.0" width="40.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.3" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (11 samples, 3.40%)</title><rect x="17.3" y="643.0" width="40.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.3" y="654.0">jav..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (11 samples, 3.40%)</title><rect x="17.3" y="627.0" width="40.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.3" y="638.0">sun..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (11 samples, 3.40%)</title><rect x="17.3" y="611.0" width="40.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.3" y="622.0">jav..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$91/1348033445.run (11 samples, 3.40%)</title><rect x="17.3" y="595.0" width="40.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.3" y="606.0">sun..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (11 samples, 3.40%)</title><rect x="17.3" y="579.0" width="40.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="590.0">sun..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (11 samples, 3.40%)</title><rect x="17.3" y="563.0" width="40.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.3" y="574.0">sun..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (11 samples, 3.40%)</title><rect x="17.3" y="547.0" width="40.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.3" y="558.0">sun..</text>
</g>
<g>
<title>java.io.DataOutputStream (1 samples, 0.31%)</title><rect x="17.3" y="531.0" width="3.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="20.3" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (10 samples, 3.09%)</title><rect x="20.9" y="531.0" width="36.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.9" y="542.0">sun..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (9 samples, 2.78%)</title><rect x="20.9" y="515.0" width="32.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.9" y="526.0">ja..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (9 samples, 2.78%)</title><rect x="20.9" y="499.0" width="32.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="510.0">su..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (9 samples, 2.78%)</title><rect x="20.9" y="483.0" width="32.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.9" y="494.0">su..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (9 samples, 2.78%)</title><rect x="20.9" y="467.0" width="32.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.9" y="478.0">su..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 1.54%)</title><rect x="20.9" y="451.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 1.54%)</title><rect x="20.9" y="435.0" width="18.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (5 samples, 1.54%)</title><rect x="20.9" y="419.0" width="18.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.9" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 1.54%)</title><rect x="20.9" y="403.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (4 samples, 1.23%)</title><rect x="20.9" y="387.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.9" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (4 samples, 1.23%)</title><rect x="20.9" y="371.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (4 samples, 1.23%)</title><rect x="20.9" y="355.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.9" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (4 samples, 1.23%)</title><rect x="20.9" y="339.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.9" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (4 samples, 1.23%)</title><rect x="20.9" y="323.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.9" y="334.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (4 samples, 1.23%)</title><rect x="20.9" y="307.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (4 samples, 1.23%)</title><rect x="20.9" y="291.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (4 samples, 1.23%)</title><rect x="20.9" y="275.0" width="14.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.9" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (4 samples, 1.23%)</title><rect x="20.9" y="259.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.9" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (4 samples, 1.23%)</title><rect x="20.9" y="243.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.9" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (4 samples, 1.23%)</title><rect x="20.9" y="227.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.9" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (4 samples, 1.23%)</title><rect x="20.9" y="211.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (4 samples, 1.23%)</title><rect x="20.9" y="195.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (4 samples, 1.23%)</title><rect x="20.9" y="179.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (4 samples, 1.23%)</title><rect x="20.9" y="163.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (4 samples, 1.23%)</title><rect x="20.9" y="147.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (4 samples, 1.23%)</title><rect x="20.9" y="131.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.9" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.62%)</title><rect x="20.9" y="115.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.62%)</title><rect x="20.9" y="99.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.62%)</title><rect x="20.9" y="83.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.9" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2 samples, 0.62%)</title><rect x="20.9" y="67.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.9" y="78.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.31%)</title><rect x="20.9" y="51.0" width="3.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="23.9" y="62.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.31%)</title><rect x="24.6" y="51.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.6" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.31%)</title><rect x="24.6" y="35.0" width="3.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="27.6" y="46.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.62%)</title><rect x="28.2" y="115.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.2" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (2 samples, 0.62%)</title><rect x="28.2" y="99.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.2" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.62%)</title><rect x="28.2" y="83.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.2" y="94.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (2 samples, 0.62%)</title><rect x="28.2" y="67.0" width="7.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="31.2" y="78.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.31%)</title><rect x="35.5" y="387.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.5" y="398.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.31%)</title><rect x="35.5" y="371.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.5" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.31%)</title><rect x="35.5" y="355.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.5" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.31%)</title><rect x="35.5" y="339.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.5" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader.&lt;init&gt; (1 samples, 0.31%)</title><rect x="35.5" y="323.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.5" y="334.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.31%)</title><rect x="35.5" y="307.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.5" y="318.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.31%)</title><rect x="35.5" y="291.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.5" y="302.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (1 samples, 0.31%)</title><rect x="35.5" y="275.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.31%)</title><rect x="35.5" y="259.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.31%)</title><rect x="35.5" y="243.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.31%)</title><rect x="35.5" y="227.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.5" y="238.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.31%)</title><rect x="35.5" y="211.0" width="3.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="38.5" y="222.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2 samples, 0.62%)</title><rect x="39.1" y="451.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.1" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.62%)</title><rect x="39.1" y="435.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.1" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.62%)</title><rect x="39.1" y="419.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.62%)</title><rect x="39.1" y="403.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.62%)</title><rect x="39.1" y="387.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="42.1" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.62%)</title><rect x="39.1" y="371.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.62%)</title><rect x="39.1" y="355.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.62%)</title><rect x="39.1" y="339.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.62%)</title><rect x="39.1" y="323.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.62%)</title><rect x="39.1" y="307.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.1" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (2 samples, 0.62%)</title><rect x="39.1" y="291.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (2 samples, 0.62%)</title><rect x="39.1" y="275.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.1" y="286.0"></text>
</g>
<g>
<title>int[] (1 samples, 0.31%)</title><rect x="39.1" y="259.0" width="3.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="42.1" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.31%)</title><rect x="42.8" y="259.0" width="3.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="45.8" y="270.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (2 samples, 0.62%)</title><rect x="46.4" y="451.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.62%)</title><rect x="46.4" y="435.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.62%)</title><rect x="46.4" y="419.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.62%)</title><rect x="46.4" y="403.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.62%)</title><rect x="46.4" y="387.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.31%)</title><rect x="46.4" y="371.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.31%)</title><rect x="46.4" y="355.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.4" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (1 samples, 0.31%)</title><rect x="46.4" y="339.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.4" y="350.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (1 samples, 0.31%)</title><rect x="46.4" y="323.0" width="3.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="49.4" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.31%)</title><rect x="50.1" y="371.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.31%)</title><rect x="50.1" y="355.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.1" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.31%)</title><rect x="50.1" y="339.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.31%)</title><rect x="50.1" y="323.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (1 samples, 0.31%)</title><rect x="50.1" y="307.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.1" y="318.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (1 samples, 0.31%)</title><rect x="50.1" y="291.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.1" y="302.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (1 samples, 0.31%)</title><rect x="50.1" y="275.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.toCharArray (1 samples, 0.31%)</title><rect x="50.1" y="259.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toChars (1 samples, 0.31%)</title><rect x="50.1" y="243.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.1" y="254.0"></text>
</g>
<g>
<title>char[] (1 samples, 0.31%)</title><rect x="50.1" y="227.0" width="3.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="53.1" y="238.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (1 samples, 0.31%)</title><rect x="53.7" y="515.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.7" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (1 samples, 0.31%)</title><rect x="53.7" y="499.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.7" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (1 samples, 0.31%)</title><rect x="53.7" y="483.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.7" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (1 samples, 0.31%)</title><rect x="53.7" y="467.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.7" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (1 samples, 0.31%)</title><rect x="53.7" y="451.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.7" y="462.0"></text>
</g>
<g>
<title>char[] (1 samples, 0.31%)</title><rect x="53.7" y="435.0" width="3.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="56.7" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (311 samples, 95.99%)</title><rect x="57.3" y="675.0" width="1132.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.3" y="686.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (311 samples, 95.99%)</title><rect x="57.3" y="659.0" width="1132.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.3" y="670.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (311 samples, 95.99%)</title><rect x="57.3" y="643.0" width="1132.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.3" y="654.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (311 samples, 95.99%)</title><rect x="57.3" y="627.0" width="1132.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="60.3" y="638.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (272 samples, 83.95%)</title><rect x="57.3" y="611.0" width="990.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.3" y="622.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (272 samples, 83.95%)</title><rect x="57.3" y="595.0" width="990.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.3" y="606.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (272 samples, 83.95%)</title><rect x="57.3" y="579.0" width="990.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.3" y="590.0">RequestHandler1_handleEntityGet.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.31%)</title><rect x="57.3" y="563.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1 samples, 0.31%)</title><rect x="57.3" y="547.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.31%)</title><rect x="57.3" y="531.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.3" y="542.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1 samples, 0.31%)</title><rect x="57.3" y="515.0" width="3.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="60.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (271 samples, 83.64%)</title><rect x="61.0" y="563.0" width="987.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.0" y="574.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet</text>
</g>
<g>
<title>java/lang/String.format (96 samples, 29.63%)</title><rect x="61.0" y="547.0" width="349.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.0" y="558.0">java/lang/String.format</text>
</g>
<g>
<title>java.util.Formatter (1 samples, 0.31%)</title><rect x="61.0" y="531.0" width="3.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="64.0" y="542.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (3 samples, 0.93%)</title><rect x="64.6" y="531.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.31%)</title><rect x="64.6" y="515.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.31%)</title><rect x="64.6" y="499.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.6" y="510.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.31%)</title><rect x="64.6" y="483.0" width="3.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="67.6" y="494.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (2 samples, 0.62%)</title><rect x="68.3" y="515.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.3" y="526.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (2 samples, 0.62%)</title><rect x="68.3" y="499.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.3" y="510.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (2 samples, 0.62%)</title><rect x="68.3" y="483.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.3" y="494.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (2 samples, 0.62%)</title><rect x="68.3" y="467.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.3" y="478.0"></text>
</g>
<g>
<title>java.text.DecimalFormatSymbols (2 samples, 0.62%)</title><rect x="68.3" y="451.0" width="7.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="71.3" y="462.0"></text>
</g>
<g>
<title>java/util/Formatter.format (88 samples, 27.16%)</title><rect x="75.6" y="531.0" width="320.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.6" y="542.0">java/util/Formatter.format</text>
</g>
<g>
<title>java/util/Formatter.format (88 samples, 27.16%)</title><rect x="75.6" y="515.0" width="320.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.6" y="526.0">java/util/Formatter.format</text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (16 samples, 4.94%)</title><rect x="75.6" y="499.0" width="58.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.6" y="510.0">java/u..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 4.94%)</title><rect x="75.6" y="483.0" width="58.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.6" y="494.0">java/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 4.94%)</title><rect x="75.6" y="467.0" width="58.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.6" y="478.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 4.94%)</title><rect x="75.6" y="451.0" width="58.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.6" y="462.0">java/l..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (16 samples, 4.94%)</title><rect x="75.6" y="435.0" width="58.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.6" y="446.0">java/l..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (16 samples, 4.94%)</title><rect x="75.6" y="419.0" width="58.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.6" y="430.0">java/u..</text>
</g>
<g>
<title>byte[] (16 samples, 4.94%)</title><rect x="75.6" y="403.0" width="58.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="78.6" y="414.0">byte[]</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.62%)</title><rect x="133.8" y="499.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.8" y="510.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (2 samples, 0.62%)</title><rect x="133.8" y="483.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.8" y="494.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.62%)</title><rect x="133.8" y="467.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.8" y="478.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (2 samples, 0.62%)</title><rect x="133.8" y="451.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="435.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="419.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.8" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="403.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="387.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="371.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.8" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.62%)</title><rect x="133.8" y="355.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.8" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.62%)</title><rect x="133.8" y="339.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.8" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.62%)</title><rect x="133.8" y="323.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.8" y="334.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.62%)</title><rect x="133.8" y="307.0" width="7.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="136.8" y="318.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (70 samples, 21.60%)</title><rect x="141.1" y="499.0" width="254.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.1" y="510.0">java/util/Formatter.parse</text>
</g>
<g>
<title>java.util.ArrayList (1 samples, 0.31%)</title><rect x="141.1" y="483.0" width="3.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="144.1" y="494.0"></text>
</g>
<g>
<title>java.util.Formatter$FixedString (28 samples, 8.64%)</title><rect x="144.8" y="483.0" width="101.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="147.8" y="494.0">java.util.Fo..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (14 samples, 4.32%)</title><rect x="246.7" y="483.0" width="51.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.7" y="494.0">java/..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkGeneral (12 samples, 3.70%)</title><rect x="246.7" y="467.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.7" y="478.0">java..</text>
</g>
<g>
<title>java.util.Formatter$Flags[] (12 samples, 3.70%)</title><rect x="246.7" y="451.0" width="43.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="249.7" y="462.0">java..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.flags (2 samples, 0.62%)</title><rect x="290.4" y="467.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.4" y="478.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.parse (2 samples, 0.62%)</title><rect x="290.4" y="451.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.4" y="462.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags (2 samples, 0.62%)</title><rect x="290.4" y="435.0" width="7.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="293.4" y="446.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (27 samples, 8.33%)</title><rect x="297.7" y="483.0" width="98.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.7" y="494.0">java/util/re..</text>
</g>
<g>
<title>java.util.regex.Matcher (1 samples, 0.31%)</title><rect x="297.7" y="467.0" width="3.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="300.7" y="478.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (26 samples, 8.02%)</title><rect x="301.4" y="467.0" width="94.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.4" y="478.0">java/util/r..</text>
</g>
<g>
<title>int[] (26 samples, 8.02%)</title><rect x="301.4" y="451.0" width="94.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="304.4" y="462.0">int[]</text>
</g>
<g>
<title>java/util/Formatter.toString (4 samples, 1.23%)</title><rect x="396.0" y="531.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 1.23%)</title><rect x="396.0" y="515.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 1.23%)</title><rect x="396.0" y="499.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.0" y="510.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.62%)</title><rect x="396.0" y="483.0" width="7.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="399.0" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.62%)</title><rect x="403.3" y="483.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="494.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.62%)</title><rect x="403.3" y="467.0" width="7.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="406.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (38 samples, 11.73%)</title><rect x="410.6" y="547.0" width="138.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.6" y="558.0">java/nio/ByteBuff..</text>
</g>
<g>
<title>java/lang/StringBuffer.append (24 samples, 7.41%)</title><rect x="410.6" y="531.0" width="87.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.6" y="542.0">java/lang/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 7.41%)</title><rect x="410.6" y="515.0" width="87.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.6" y="526.0">java/lang/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (24 samples, 7.41%)</title><rect x="410.6" y="499.0" width="87.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.6" y="510.0">java/lang/..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 7.41%)</title><rect x="410.6" y="483.0" width="87.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.6" y="494.0">java/util/..</text>
</g>
<g>
<title>byte[] (24 samples, 7.41%)</title><rect x="410.6" y="467.0" width="87.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="413.6" y="478.0">byte[]</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (14 samples, 4.32%)</title><rect x="498.0" y="531.0" width="51.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="501.0" y="542.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 4.32%)</title><rect x="498.0" y="515.0" width="51.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.0" y="526.0">java/..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14 samples, 4.32%)</title><rect x="498.0" y="499.0" width="51.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.0" y="510.0">java/..</text>
</g>
<g>
<title>byte[] (14 samples, 4.32%)</title><rect x="498.0" y="483.0" width="51.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="501.0" y="494.0">byte[]</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.31%)</title><rect x="549.0" y="547.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.31%)</title><rect x="549.0" y="531.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="552.0" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1 samples, 0.31%)</title><rect x="549.0" y="515.0" width="3.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="552.0" y="526.0"></text>
</g>
<g>
<title>org/apache/commons/logging/impl/Log4JLogger.debug (80 samples, 24.69%)</title><rect x="552.7" y="547.0" width="291.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.7" y="558.0">org/apache/commons/logging/impl/Log4JLo..</text>
</g>
<g>
<title>org/apache/log4j/Category.log (80 samples, 24.69%)</title><rect x="552.7" y="531.0" width="291.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.7" y="542.0">org/apache/log4j/Category.log</text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (80 samples, 24.69%)</title><rect x="552.7" y="515.0" width="291.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.7" y="526.0">org/apache/log4j/Category.forcedLog</text>
</g>
<g>
<title>org.apache.log4j.spi.LoggingEvent (1 samples, 0.31%)</title><rect x="552.7" y="499.0" width="3.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="555.7" y="510.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (79 samples, 24.38%)</title><rect x="556.3" y="499.0" width="287.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="559.3" y="510.0">org/apache/log4j/Category.callAppenders</text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (79 samples, 24.38%)</title><rect x="556.3" y="483.0" width="287.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.3" y="494.0">org/apache/log4j/helpers/AppenderAttach..</text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (79 samples, 24.38%)</title><rect x="556.3" y="467.0" width="287.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.3" y="478.0">org/apache/log4j/AppenderSkeleton.doApp..</text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (79 samples, 24.38%)</title><rect x="556.3" y="451.0" width="287.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.3" y="462.0">org/apache/log4j/WriterAppender.append</text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (79 samples, 24.38%)</title><rect x="556.3" y="435.0" width="287.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.3" y="446.0">org/apache/log4j/WriterAppender.subAppend</text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (37 samples, 11.42%)</title><rect x="556.3" y="419.0" width="134.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.3" y="430.0">org/apache/log4j/..</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (25 samples, 7.72%)</title><rect x="556.3" y="403.0" width="91.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.3" y="414.0">java/lang/S..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (25 samples, 7.72%)</title><rect x="556.3" y="387.0" width="91.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="559.3" y="398.0">java/lang/S..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (25 samples, 7.72%)</title><rect x="556.3" y="371.0" width="91.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.3" y="382.0">java/util/A..</text>
</g>
<g>
<title>byte[] (25 samples, 7.72%)</title><rect x="556.3" y="355.0" width="91.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="559.3" y="366.0">byte[]</text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (12 samples, 3.70%)</title><rect x="647.3" y="403.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.3" y="414.0">org/..</text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$BasicPatternConverter.convert (12 samples, 3.70%)</title><rect x="647.3" y="387.0" width="43.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="650.3" y="398.0">org/..</text>
</g>
<g>
<title>java/lang/Long.toString (12 samples, 3.70%)</title><rect x="647.3" y="371.0" width="43.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.3" y="382.0">java..</text>
</g>
<g>
<title>java.lang.String (12 samples, 3.70%)</title><rect x="647.3" y="355.0" width="43.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="650.3" y="366.0">java..</text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.write (42 samples, 12.96%)</title><rect x="691.0" y="419.0" width="153.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.0" y="430.0">org/apache/log4j/he..</text>
</g>
<g>
<title>java/io/Writer.write (42 samples, 12.96%)</title><rect x="691.0" y="403.0" width="153.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="694.0" y="414.0">java/io/Writer.write</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (42 samples, 12.96%)</title><rect x="691.0" y="387.0" width="153.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.0" y="398.0">java/io/OutputStrea..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (42 samples, 12.96%)</title><rect x="691.0" y="371.0" width="153.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.0" y="382.0">sun/nio/cs/StreamEn..</text>
</g>
<g>
<title>char[] (42 samples, 12.96%)</title><rect x="691.0" y="355.0" width="153.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="694.0" y="366.0">char[]</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (56 samples, 17.28%)</title><rect x="844.0" y="547.0" width="204.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.0" y="558.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.31%)</title><rect x="844.0" y="531.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="847.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.31%)</title><rect x="844.0" y="515.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="847.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.31%)</title><rect x="844.0" y="499.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="847.0" y="510.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.31%)</title><rect x="844.0" y="483.0" width="3.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="847.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (1 samples, 0.31%)</title><rect x="847.7" y="531.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.31%)</title><rect x="847.7" y="515.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.31%)</title><rect x="847.7" y="499.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.7" y="510.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.31%)</title><rect x="847.7" y="483.0" width="3.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="850.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.iterator (54 samples, 16.67%)</title><rect x="851.3" y="531.0" width="196.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="854.3" y="542.0">ru/mail/polis/dao/alexande..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (1 samples, 0.31%)</title><rect x="851.3" y="515.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.3" y="526.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (1 samples, 0.31%)</title><rect x="851.3" y="499.0" width="3.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="854.3" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (46 samples, 14.20%)</title><rect x="854.9" y="515.0" width="167.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.9" y="526.0">com/google/common/col..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (46 samples, 14.20%)</title><rect x="854.9" y="499.0" width="167.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.9" y="510.0">com/google/common/col..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (13 samples, 4.01%)</title><rect x="854.9" y="483.0" width="47.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="857.9" y="494.0">com...</text>
</g>
<g>
<title>java.util.PriorityQueue (13 samples, 4.01%)</title><rect x="902.3" y="483.0" width="47.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="905.3" y="494.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.31%)</title><rect x="949.6" y="483.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.6" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.31%)</title><rect x="949.6" y="467.0" width="3.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="952.6" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (19 samples, 5.86%)</title><rect x="953.3" y="483.0" width="69.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.3" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (19 samples, 5.86%)</title><rect x="953.3" y="467.0" width="69.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.3" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (19 samples, 5.86%)</title><rect x="953.3" y="451.0" width="69.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.3" y="462.0">java/ut..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (19 samples, 5.86%)</title><rect x="953.3" y="435.0" width="69.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.3" y="446.0">java/ut..</text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (5 samples, 1.54%)</title><rect x="953.3" y="419.0" width="18.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="956.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.31%)</title><rect x="971.5" y="419.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="974.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.31%)</title><rect x="971.5" y="403.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="974.5" y="414.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (1 samples, 0.31%)</title><rect x="971.5" y="387.0" width="3.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="974.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (13 samples, 4.01%)</title><rect x="975.1" y="419.0" width="47.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.1" y="430.0">java..</text>
</g>
<g>
<title>java.lang.Object[] (13 samples, 4.01%)</title><rect x="975.1" y="403.0" width="47.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="978.1" y="414.0">java..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.93%)</title><rect x="1022.5" y="515.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.5" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.93%)</title><rect x="1022.5" y="499.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1025.5" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (3 samples, 0.93%)</title><rect x="1022.5" y="483.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.5" y="494.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (3 samples, 0.93%)</title><rect x="1022.5" y="467.0" width="10.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1025.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.62%)</title><rect x="1033.4" y="515.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1036.4" y="526.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (1 samples, 0.31%)</title><rect x="1033.4" y="499.0" width="3.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1036.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.31%)</title><rect x="1037.0" y="499.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.0" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.31%)</title><rect x="1037.0" y="483.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1040.0" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.31%)</title><rect x="1037.0" y="467.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.0" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.31%)</title><rect x="1037.0" y="451.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.31%)</title><rect x="1037.0" y="435.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.31%)</title><rect x="1037.0" y="419.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1040.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.31%)</title><rect x="1037.0" y="403.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1040.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$115/713990033.getAsBoolean (1 samples, 0.31%)</title><rect x="1037.0" y="387.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1040.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.31%)</title><rect x="1037.0" y="371.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.0" y="382.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.31%)</title><rect x="1037.0" y="355.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1040.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.31%)</title><rect x="1037.0" y="339.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1040.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable$$Lambda$110/1714362129.apply (1 samples, 0.31%)</title><rect x="1037.0" y="323.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.lambda$iterator$0 (1 samples, 0.31%)</title><rect x="1037.0" y="307.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.0" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (1 samples, 0.31%)</title><rect x="1037.0" y="291.0" width="3.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1040.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (2 samples, 0.62%)</title><rect x="1040.7" y="515.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2 samples, 0.62%)</title><rect x="1040.7" y="499.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.7" y="510.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (2 samples, 0.62%)</title><rect x="1040.7" y="483.0" width="7.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1043.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (28 samples, 8.64%)</title><rect x="1048.0" y="611.0" width="101.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.0" y="622.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (1 samples, 0.31%)</title><rect x="1048.0" y="595.0" width="3.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1051.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.93%)</title><rect x="1051.6" y="595.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1054.6" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (3 samples, 0.93%)</title><rect x="1051.6" y="579.0" width="10.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1054.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 7.41%)</title><rect x="1062.5" y="595.0" width="87.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.5" y="606.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 7.41%)</title><rect x="1062.5" y="579.0" width="87.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.5" y="590.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (15 samples, 4.63%)</title><rect x="1062.5" y="563.0" width="54.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1065.5" y="574.0">char[]</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 2.78%)</title><rect x="1117.2" y="563.0" width="32.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.2" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 2.78%)</title><rect x="1117.2" y="547.0" width="32.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.2" y="558.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (9 samples, 2.78%)</title><rect x="1117.2" y="531.0" width="32.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1120.2" y="542.0">ja..</text>
</g>
<g>
<title>byte[] (9 samples, 2.78%)</title><rect x="1117.2" y="515.0" width="32.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1120.2" y="526.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 3.40%)</title><rect x="1149.9" y="611.0" width="40.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1152.9" y="622.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 3.40%)</title><rect x="1149.9" y="595.0" width="40.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.9" y="606.0">one..</text>
</g>
<g>
<title>char[] (8 samples, 2.47%)</title><rect x="1149.9" y="579.0" width="29.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1152.9" y="590.0">ch..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.93%)</title><rect x="1179.1" y="579.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1182.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.93%)</title><rect x="1179.1" y="563.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.93%)</title><rect x="1179.1" y="547.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.93%)</title><rect x="1179.1" y="531.0" width="10.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
</g>
</svg>
