<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (609 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (609 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="414.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (609 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="398.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (609 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="382.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (609 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="366.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (573 samples, 94.09%)</title><rect x="10.0" y="339.0" width="1110.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (573 samples, 94.09%)</title><rect x="10.0" y="323.0" width="1110.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="334.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_handleEntityGet.handleRequest (570 samples, 93.60%)</title><rect x="10.0" y="307.0" width="1104.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="318.0">RequestHandler1_handleEntityGet.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 1.64%)</title><rect x="10.0" y="291.0" width="19.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 1.64%)</title><rect x="10.0" y="275.0" width="19.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 1.15%)</title><rect x="10.0" y="259.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (7 samples, 1.15%)</title><rect x="10.0" y="243.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>byte[] (7 samples, 1.15%)</title><rect x="10.0" y="227.0" width="13.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.49%)</title><rect x="23.6" y="259.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.6" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (3 samples, 0.49%)</title><rect x="23.6" y="243.0" width="5.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="26.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.16%)</title><rect x="29.4" y="291.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.16%)</title><rect x="29.4" y="275.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.16%)</title><rect x="29.4" y="259.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.16%)</title><rect x="29.4" y="243.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.4" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.16%)</title><rect x="29.4" y="227.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.4" y="238.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="29.4" y="211.0" width="1.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="32.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet (559 samples, 91.79%)</title><rect x="31.3" y="291.0" width="1083.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.3" y="302.0">ru/mail/polis/service/alexander/marashov/ServiceImpl.handleEntityGet</text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.16%)</title><rect x="31.3" y="275.0" width="2.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="34.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.format (176 samples, 28.90%)</title><rect x="33.3" y="275.0" width="341.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.3" y="286.0">java/lang/String.format</text>
</g>
<g>
<title>java.util.Formatter (10 samples, 1.64%)</title><rect x="33.3" y="259.0" width="19.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="36.3" y="270.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (27 samples, 4.43%)</title><rect x="52.6" y="259.0" width="52.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.6" y="270.0">java/..</text>
</g>
<g>
<title>java.lang.StringBuilder (5 samples, 0.82%)</title><rect x="52.6" y="243.0" width="9.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="55.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (7 samples, 1.15%)</title><rect x="62.3" y="243.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.3" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (7 samples, 1.15%)</title><rect x="62.3" y="227.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.3" y="238.0"></text>
</g>
<g>
<title>byte[] (7 samples, 1.15%)</title><rect x="62.3" y="211.0" width="13.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="65.3" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (15 samples, 2.46%)</title><rect x="75.9" y="243.0" width="29.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.9" y="254.0">ja..</text>
</g>
<g>
<title>java/util/Formatter.getZero (15 samples, 2.46%)</title><rect x="75.9" y="227.0" width="29.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.9" y="238.0">ja..</text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (15 samples, 2.46%)</title><rect x="75.9" y="211.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.9" y="222.0">ja..</text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (15 samples, 2.46%)</title><rect x="75.9" y="195.0" width="29.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.9" y="206.0">su..</text>
</g>
<g>
<title>java.text.DecimalFormatSymbols (15 samples, 2.46%)</title><rect x="75.9" y="179.0" width="29.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="78.9" y="190.0">ja..</text>
</g>
<g>
<title>java/util/Formatter.format (116 samples, 19.05%)</title><rect x="104.9" y="259.0" width="224.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.9" y="270.0">java/util/Formatter.format</text>
</g>
<g>
<title>java/util/Formatter.format (116 samples, 19.05%)</title><rect x="104.9" y="243.0" width="224.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.9" y="254.0">java/util/Formatter.format</text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (21 samples, 3.45%)</title><rect x="104.9" y="227.0" width="40.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.9" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 3.45%)</title><rect x="104.9" y="211.0" width="40.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.9" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 3.45%)</title><rect x="104.9" y="195.0" width="40.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.9" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 3.45%)</title><rect x="104.9" y="179.0" width="40.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.9" y="190.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (21 samples, 3.45%)</title><rect x="104.9" y="163.0" width="40.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.9" y="174.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 3.45%)</title><rect x="104.9" y="147.0" width="40.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.9" y="158.0">jav..</text>
</g>
<g>
<title>byte[] (21 samples, 3.45%)</title><rect x="104.9" y="131.0" width="40.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="107.9" y="142.0">byt..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (15 samples, 2.46%)</title><rect x="145.6" y="227.0" width="29.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.6" y="238.0">ja..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (15 samples, 2.46%)</title><rect x="145.6" y="211.0" width="29.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.6" y="222.0">ja..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (15 samples, 2.46%)</title><rect x="145.6" y="195.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.6" y="206.0">ja..</text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (15 samples, 2.46%)</title><rect x="145.6" y="179.0" width="29.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.6" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="163.0" width="29.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.6" y="174.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="147.0" width="29.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="148.6" y="158.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="131.0" width="29.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.6" y="142.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="115.0" width="29.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.6" y="126.0">ja..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="99.0" width="29.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.6" y="110.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 2.46%)</title><rect x="145.6" y="83.0" width="29.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.6" y="94.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 2.46%)</title><rect x="145.6" y="67.0" width="29.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.6" y="78.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 2.46%)</title><rect x="145.6" y="51.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.6" y="62.0">ja..</text>
</g>
<g>
<title>byte[] (15 samples, 2.46%)</title><rect x="145.6" y="35.0" width="29.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="148.6" y="46.0">by..</text>
</g>
<g>
<title>java/util/Formatter.parse (80 samples, 13.14%)</title><rect x="174.7" y="227.0" width="155.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.7" y="238.0">java/util/Formatter...</text>
</g>
<g>
<title>java.util.Formatter$FixedString (13 samples, 2.13%)</title><rect x="174.7" y="211.0" width="25.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="177.7" y="222.0">j..</text>
</g>
<g>
<title>java.util.Formatter$FormatSpecifier (10 samples, 1.64%)</title><rect x="199.9" y="211.0" width="19.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="202.9" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 1.48%)</title><rect x="219.3" y="211.0" width="17.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.3" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (9 samples, 1.48%)</title><rect x="219.3" y="195.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.3" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (9 samples, 1.48%)</title><rect x="219.3" y="179.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.3" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (9 samples, 1.48%)</title><rect x="219.3" y="163.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.3" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 1.48%)</title><rect x="219.3" y="147.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.3" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (9 samples, 1.48%)</title><rect x="219.3" y="131.0" width="17.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="222.3" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (8 samples, 1.31%)</title><rect x="236.7" y="211.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkGeneral (7 samples, 1.15%)</title><rect x="236.7" y="195.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.7" y="206.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags[] (7 samples, 1.15%)</title><rect x="236.7" y="179.0" width="13.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="239.7" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.flags (1 samples, 0.16%)</title><rect x="250.3" y="195.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.3" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.parse (1 samples, 0.16%)</title><rect x="250.3" y="179.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.3" y="190.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags (1 samples, 0.16%)</title><rect x="250.3" y="163.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="253.3" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (40 samples, 6.57%)</title><rect x="252.2" y="211.0" width="77.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.2" y="222.0">java/util..</text>
</g>
<g>
<title>java.util.regex.Matcher (7 samples, 1.15%)</title><rect x="252.2" y="195.0" width="13.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="255.2" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (33 samples, 5.42%)</title><rect x="265.8" y="195.0" width="63.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.8" y="206.0">java/ut..</text>
</g>
<g>
<title>int[] (32 samples, 5.25%)</title><rect x="265.8" y="179.0" width="62.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="268.8" y="190.0">int[]</text>
</g>
<g>
<title>java.util.regex.IntHashSet[] (1 samples, 0.16%)</title><rect x="327.8" y="179.0" width="1.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="330.8" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (23 samples, 3.78%)</title><rect x="329.7" y="259.0" width="44.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.7" y="270.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.toString (23 samples, 3.78%)</title><rect x="329.7" y="243.0" width="44.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.7" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (23 samples, 3.78%)</title><rect x="329.7" y="227.0" width="44.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="238.0">java..</text>
</g>
<g>
<title>java.lang.String (1 samples, 0.16%)</title><rect x="329.7" y="211.0" width="1.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="332.7" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 3.61%)</title><rect x="331.6" y="211.0" width="42.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.6" y="222.0">java..</text>
</g>
<g>
<title>byte[] (22 samples, 3.61%)</title><rect x="331.6" y="195.0" width="42.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="334.6" y="206.0">byte[]</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.16%)</title><rect x="374.3" y="275.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.16%)</title><rect x="374.3" y="259.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.16%)</title><rect x="374.3" y="243.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.3" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.16%)</title><rect x="374.3" y="227.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.3" y="238.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="374.3" y="211.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="377.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (26 samples, 4.27%)</title><rect x="376.2" y="275.0" width="50.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.2" y="286.0">java/..</text>
</g>
<g>
<title>java.lang.StringBuffer (5 samples, 0.82%)</title><rect x="376.2" y="259.0" width="9.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="379.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (3 samples, 0.49%)</title><rect x="385.9" y="259.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.9" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.49%)</title><rect x="385.9" y="243.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.9" y="254.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.49%)</title><rect x="385.9" y="227.0" width="5.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="388.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (10 samples, 1.64%)</title><rect x="391.7" y="259.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.7" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 1.64%)</title><rect x="391.7" y="243.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.7" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 1.64%)</title><rect x="391.7" y="227.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="394.7" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 1.64%)</title><rect x="391.7" y="211.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.7" y="222.0"></text>
</g>
<g>
<title>byte[] (10 samples, 1.64%)</title><rect x="391.7" y="195.0" width="19.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="394.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (8 samples, 1.31%)</title><rect x="411.1" y="259.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 1.31%)</title><rect x="411.1" y="243.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.1" y="254.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.66%)</title><rect x="411.1" y="227.0" width="7.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="414.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.66%)</title><rect x="418.8" y="227.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="421.8" y="238.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.66%)</title><rect x="418.8" y="211.0" width="7.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="421.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.33%)</title><rect x="426.6" y="275.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.33%)</title><rect x="426.6" y="259.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.6" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.33%)</title><rect x="426.6" y="243.0" width="3.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="429.6" y="254.0"></text>
</g>
<g>
<title>one.nio.http.Response (3 samples, 0.49%)</title><rect x="430.5" y="275.0" width="5.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="433.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 1.48%)</title><rect x="436.3" y="275.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.3" y="286.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.99%)</title><rect x="436.3" y="259.0" width="11.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="439.3" y="270.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.49%)</title><rect x="447.9" y="259.0" width="5.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="450.9" y="270.0"></text>
</g>
<g>
<title>org/apache/commons/logging/impl/Log4JLogger.debug (106 samples, 17.41%)</title><rect x="453.7" y="275.0" width="205.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.7" y="286.0">org/apache/commons/logging/..</text>
</g>
<g>
<title>org/apache/log4j/Category.log (106 samples, 17.41%)</title><rect x="453.7" y="259.0" width="205.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.7" y="270.0">org/apache/log4j/Category.log</text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (106 samples, 17.41%)</title><rect x="453.7" y="243.0" width="205.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.7" y="254.0">org/apache/log4j/Category.f..</text>
</g>
<g>
<title>org.apache.log4j.spi.LoggingEvent (11 samples, 1.81%)</title><rect x="453.7" y="227.0" width="21.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="456.7" y="238.0">o..</text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (95 samples, 15.60%)</title><rect x="475.0" y="227.0" width="184.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.0" y="238.0">org/apache/log4j/Categor..</text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (95 samples, 15.60%)</title><rect x="475.0" y="211.0" width="184.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.0" y="222.0">org/apache/log4j/helpers..</text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (95 samples, 15.60%)</title><rect x="475.0" y="195.0" width="184.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.0" y="206.0">org/apache/log4j/Appende..</text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (95 samples, 15.60%)</title><rect x="475.0" y="179.0" width="184.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.0" y="190.0">org/apache/log4j/WriterA..</text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (95 samples, 15.60%)</title><rect x="475.0" y="163.0" width="184.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="478.0" y="174.0">org/apache/log4j/WriterA..</text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (32 samples, 5.25%)</title><rect x="475.0" y="147.0" width="62.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.0" y="158.0">org/ap..</text>
</g>
<g>
<title>java/lang/StringBuffer.toString (26 samples, 4.27%)</title><rect x="475.0" y="131.0" width="50.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.0" y="142.0">java/..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 4.27%)</title><rect x="475.0" y="115.0" width="50.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.0" y="126.0">java/..</text>
</g>
<g>
<title>java.lang.String (3 samples, 0.49%)</title><rect x="475.0" y="99.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="478.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (23 samples, 3.78%)</title><rect x="480.8" y="99.0" width="44.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.8" y="110.0">java..</text>
</g>
<g>
<title>byte[] (23 samples, 3.78%)</title><rect x="480.8" y="83.0" width="44.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="483.8" y="94.0">byte[]</text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (6 samples, 0.99%)</title><rect x="525.4" y="131.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.4" y="142.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$BasicPatternConverter.convert (6 samples, 0.99%)</title><rect x="525.4" y="115.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.4" y="126.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.99%)</title><rect x="525.4" y="99.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.4" y="110.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.33%)</title><rect x="525.4" y="83.0" width="3.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="528.4" y="94.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.66%)</title><rect x="529.3" y="83.0" width="7.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="532.3" y="94.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.write (63 samples, 10.34%)</title><rect x="537.0" y="147.0" width="122.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.0" y="158.0">org/apache/log4..</text>
</g>
<g>
<title>java/io/Writer.write (63 samples, 10.34%)</title><rect x="537.0" y="131.0" width="122.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.0" y="142.0">java/io/Writer...</text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (63 samples, 10.34%)</title><rect x="537.0" y="115.0" width="122.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.0" y="126.0">java/io/OutputS..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (63 samples, 10.34%)</title><rect x="537.0" y="99.0" width="122.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.0" y="110.0">sun/nio/cs/Stre..</text>
</g>
<g>
<title>char[] (51 samples, 8.37%)</title><rect x="537.0" y="83.0" width="98.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="540.0" y="94.0">char[]</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (12 samples, 1.97%)</title><rect x="635.8" y="83.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.8" y="94.0">s..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (12 samples, 1.97%)</title><rect x="635.8" y="67.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.8" y="78.0">s..</text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (12 samples, 1.97%)</title><rect x="635.8" y="51.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.8" y="62.0">j..</text>
</g>
<g>
<title>java.nio.HeapCharBuffer (12 samples, 1.97%)</title><rect x="635.8" y="35.0" width="23.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="638.8" y="46.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (232 samples, 38.10%)</title><rect x="659.1" y="275.0" width="449.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.1" y="286.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (22 samples, 3.61%)</title><rect x="659.1" y="259.0" width="42.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.1" y="270.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (22 samples, 3.61%)</title><rect x="659.1" y="243.0" width="42.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="662.1" y="254.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (22 samples, 3.61%)</title><rect x="659.1" y="227.0" width="42.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.1" y="238.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (22 samples, 3.61%)</title><rect x="659.1" y="211.0" width="42.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.1" y="222.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (22 samples, 3.61%)</title><rect x="659.1" y="195.0" width="42.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="662.1" y="206.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (22 samples, 3.61%)</title><rect x="659.1" y="179.0" width="42.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.1" y="190.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (22 samples, 3.61%)</title><rect x="659.1" y="163.0" width="42.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.1" y="174.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (22 samples, 3.61%)</title><rect x="659.1" y="147.0" width="42.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="662.1" y="158.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (22 samples, 3.61%)</title><rect x="659.1" y="131.0" width="42.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.1" y="142.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.33%)</title><rect x="659.1" y="115.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.1" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.33%)</title><rect x="659.1" y="99.0" width="3.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="662.1" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (1 samples, 0.16%)</title><rect x="663.0" y="115.0" width="1.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="666.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (8 samples, 1.31%)</title><rect x="664.9" y="115.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (8 samples, 1.31%)</title><rect x="664.9" y="99.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 1.31%)</title><rect x="664.9" y="83.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.9" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.49%)</title><rect x="664.9" y="67.0" width="5.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="667.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.82%)</title><rect x="670.7" y="67.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.7" y="78.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.82%)</title><rect x="670.7" y="51.0" width="9.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="673.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (11 samples, 1.81%)</title><rect x="680.4" y="115.0" width="21.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.4" y="126.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (3 samples, 0.49%)</title><rect x="680.4" y="99.0" width="5.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="683.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (8 samples, 1.31%)</title><rect x="686.2" y="99.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="689.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 1.31%)</title><rect x="686.2" y="83.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.82%)</title><rect x="686.2" y="67.0" width="9.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="689.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.49%)</title><rect x="695.9" y="67.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="698.9" y="78.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.49%)</title><rect x="695.9" y="51.0" width="5.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="698.9" y="62.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (5 samples, 0.82%)</title><rect x="701.7" y="259.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.7" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (5 samples, 0.82%)</title><rect x="701.7" y="243.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl$$Lambda$75/1578066794.apply (5 samples, 0.82%)</title><rect x="701.7" y="227.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.lambda$iterator$2 (5 samples, 0.82%)</title><rect x="701.7" y="211.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (2 samples, 0.33%)</title><rect x="701.7" y="195.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.7" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (2 samples, 0.33%)</title><rect x="701.7" y="179.0" width="3.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="704.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/Value.getData (3 samples, 0.49%)</title><rect x="705.6" y="195.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="708.6" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.49%)</title><rect x="705.6" y="179.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.6" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.49%)</title><rect x="705.6" y="163.0" width="5.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="708.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (4 samples, 0.66%)</title><rect x="711.4" y="259.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.4" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.66%)</title><rect x="711.4" y="243.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.4" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.66%)</title><rect x="711.4" y="227.0" width="7.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="714.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (4 samples, 0.66%)</title><rect x="719.2" y="259.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="722.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.66%)</title><rect x="719.2" y="243.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.2" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.66%)</title><rect x="719.2" y="227.0" width="7.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="722.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/DAOImpl.iterator (197 samples, 32.35%)</title><rect x="726.9" y="259.0" width="381.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.9" y="270.0">ru/mail/polis/dao/alexander/marashov/DAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (5 samples, 0.82%)</title><rect x="726.9" y="243.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.9" y="254.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (5 samples, 0.82%)</title><rect x="726.9" y="227.0" width="9.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="729.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (25 samples, 4.11%)</title><rect x="736.6" y="243.0" width="48.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.6" y="254.0">com/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (4 samples, 0.66%)</title><rect x="736.6" y="227.0" width="7.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="739.6" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (21 samples, 3.45%)</title><rect x="744.4" y="227.0" width="40.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.4" y="238.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (1 samples, 0.16%)</title><rect x="744.4" y="211.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="747.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (3 samples, 0.49%)</title><rect x="746.3" y="211.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="749.3" y="222.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (3 samples, 0.49%)</title><rect x="746.3" y="195.0" width="5.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="749.3" y="206.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (3 samples, 0.49%)</title><rect x="752.1" y="211.0" width="5.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="755.1" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.49%)</title><rect x="757.9" y="211.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="760.9" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.49%)</title><rect x="757.9" y="195.0" width="5.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="760.9" y="206.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (11 samples, 1.81%)</title><rect x="763.7" y="211.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.7" y="222.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (11 samples, 1.81%)</title><rect x="763.7" y="195.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.7" y="206.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (11 samples, 1.81%)</title><rect x="763.7" y="179.0" width="21.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.7" y="190.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (11 samples, 1.81%)</title><rect x="763.7" y="163.0" width="21.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="766.7" y="174.0">j..</text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (1 samples, 0.16%)</title><rect x="763.7" y="147.0" width="2.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="766.7" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.33%)</title><rect x="765.7" y="147.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.7" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.33%)</title><rect x="765.7" y="131.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.7" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$68/605649658.get$Lambda (1 samples, 0.16%)</title><rect x="765.7" y="115.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.7" y="126.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$68 (1 samples, 0.16%)</title><rect x="765.7" y="99.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="768.7" y="110.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$69/492168832.get$Lambda (1 samples, 0.16%)</title><rect x="767.6" y="115.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.6" y="126.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$69 (1 samples, 0.16%)</title><rect x="767.6" y="99.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="770.6" y="110.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.33%)</title><rect x="769.5" y="147.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (2 samples, 0.33%)</title><rect x="769.5" y="131.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.5" y="142.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (2 samples, 0.33%)</title><rect x="769.5" y="115.0" width="3.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="772.5" y="126.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (6 samples, 0.99%)</title><rect x="773.4" y="147.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.4" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.99%)</title><rect x="773.4" y="131.0" width="11.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="776.4" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList (2 samples, 0.33%)</title><rect x="785.0" y="243.0" width="3.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="788.0" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.16%)</title><rect x="788.9" y="243.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.9" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.16%)</title><rect x="788.9" y="227.0" width="2.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="791.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (6 samples, 0.99%)</title><rect x="790.9" y="243.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.9" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (6 samples, 0.99%)</title><rect x="790.9" y="227.0" width="11.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="793.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (17 samples, 2.79%)</title><rect x="802.5" y="243.0" width="32.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.5" y="254.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (2 samples, 0.33%)</title><rect x="802.5" y="227.0" width="3.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="805.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (15 samples, 2.46%)</title><rect x="806.4" y="227.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.4" y="238.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 2.46%)</title><rect x="806.4" y="211.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.4" y="222.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (15 samples, 2.46%)</title><rect x="806.4" y="195.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.4" y="206.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (15 samples, 2.46%)</title><rect x="806.4" y="179.0" width="29.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.4" y="190.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.next (15 samples, 2.46%)</title><rect x="806.4" y="163.0" width="29.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.4" y="174.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.33%)</title><rect x="806.4" y="147.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.4" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.33%)</title><rect x="806.4" y="131.0" width="3.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="809.4" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Cell (2 samples, 0.33%)</title><rect x="810.2" y="147.0" width="3.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="813.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (7 samples, 1.15%)</title><rect x="814.1" y="147.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (7 samples, 1.15%)</title><rect x="814.1" y="131.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 1.15%)</title><rect x="814.1" y="115.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.1" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.82%)</title><rect x="814.1" y="99.0" width="9.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="817.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.33%)</title><rect x="823.8" y="99.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.8" y="110.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.33%)</title><rect x="823.8" y="83.0" width="3.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="826.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.value (4 samples, 0.66%)</title><rect x="827.7" y="147.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.7" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.Value (2 samples, 0.33%)</title><rect x="827.7" y="131.0" width="3.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="830.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (2 samples, 0.33%)</title><rect x="831.5" y="131.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.33%)</title><rect x="831.5" y="115.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="834.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.33%)</title><rect x="831.5" y="99.0" width="3.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="834.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/MemTable.iterator (30 samples, 4.93%)</title><rect x="835.4" y="243.0" width="58.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.4" y="254.0">ru/mai..</text>
</g>
<g>
<title>java/util/Collection.stream (9 samples, 1.48%)</title><rect x="835.4" y="227.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (8 samples, 1.31%)</title><rect x="835.4" y="211.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="838.4" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (8 samples, 1.31%)</title><rect x="835.4" y="195.0" width="15.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="838.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.16%)</title><rect x="850.9" y="211.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="853.9" y="222.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (1 samples, 0.16%)</title><rect x="850.9" y="195.0" width="2.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="853.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (2 samples, 0.33%)</title><rect x="852.9" y="227.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.9" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (2 samples, 0.33%)</title><rect x="852.9" y="211.0" width="3.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="855.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 0.82%)</title><rect x="856.7" y="227.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="859.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 0.82%)</title><rect x="856.7" y="211.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="859.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 0.82%)</title><rect x="856.7" y="195.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.7" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (5 samples, 0.82%)</title><rect x="856.7" y="179.0" width="9.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="859.7" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (8 samples, 1.31%)</title><rect x="866.4" y="227.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.4" y="238.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (2 samples, 0.33%)</title><rect x="866.4" y="211.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="869.4" y="222.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (2 samples, 0.33%)</title><rect x="866.4" y="195.0" width="3.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="869.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (6 samples, 0.99%)</title><rect x="870.3" y="211.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="873.3" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.33%)</title><rect x="870.3" y="195.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="873.3" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.33%)</title><rect x="870.3" y="179.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="873.3" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$66/1673289092.get$Lambda (2 samples, 0.33%)</title><rect x="870.3" y="163.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="873.3" y="174.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$66 (2 samples, 0.33%)</title><rect x="870.3" y="147.0" width="3.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="873.3" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (4 samples, 0.66%)</title><rect x="874.2" y="195.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="877.2" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (4 samples, 0.66%)</title><rect x="874.2" y="179.0" width="7.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="877.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (6 samples, 0.99%)</title><rect x="881.9" y="227.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.9" y="238.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (6 samples, 0.99%)</title><rect x="881.9" y="211.0" width="11.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="884.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.iterator (111 samples, 18.23%)</title><rect x="893.5" y="243.0" width="215.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="896.5" y="254.0">ru/mail/polis/dao/alexander/..</text>
</g>
<g>
<title>ru.mail.polis.dao.alexander.marashov.SSTable$1 (2 samples, 0.33%)</title><rect x="893.5" y="227.0" width="3.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="896.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable$1.&lt;init&gt; (109 samples, 17.90%)</title><rect x="897.4" y="227.0" width="211.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="900.4" y="238.0">ru/mail/polis/dao/alexander/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.binarySearch (109 samples, 17.90%)</title><rect x="897.4" y="211.0" width="211.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="900.4" y="222.0">ru/mail/polis/dao/alexander/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.key (109 samples, 17.90%)</title><rect x="897.4" y="195.0" width="211.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="900.4" y="206.0">ru/mail/polis/dao/alexander/..</text>
</g>
<g>
<title>ru/mail/polis/dao/alexander/marashov/SSTable.getFrom (109 samples, 17.90%)</title><rect x="897.4" y="179.0" width="211.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="900.4" y="190.0">ru/mail/polis/dao/alexander/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (109 samples, 17.90%)</title><rect x="897.4" y="163.0" width="211.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.4" y="174.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (71 samples, 11.66%)</title><rect x="897.4" y="147.0" width="137.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="900.4" y="158.0">java.nio.HeapByte..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (38 samples, 6.24%)</title><rect x="1035.0" y="147.0" width="73.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.0" y="158.0">java/nio..</text>
</g>
<g>
<title>byte[] (38 samples, 6.24%)</title><rect x="1035.0" y="131.0" width="73.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1038.0" y="142.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/service/alexander/marashov/ServiceImpl.getBytes (3 samples, 0.49%)</title><rect x="1108.6" y="275.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1111.6" y="286.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.49%)</title><rect x="1108.6" y="259.0" width="5.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1111.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.49%)</title><rect x="1114.4" y="307.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1117.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.49%)</title><rect x="1114.4" y="291.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.49%)</title><rect x="1114.4" y="275.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.4" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.49%)</title><rect x="1114.4" y="259.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.4" y="270.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.49%)</title><rect x="1114.4" y="243.0" width="5.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1117.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (29 samples, 4.76%)</title><rect x="1120.2" y="339.0" width="56.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1123.2" y="350.0">one/ni..</text>
</g>
<g>
<title>one.nio.http.Request (2 samples, 0.33%)</title><rect x="1120.2" y="323.0" width="3.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1123.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 2.30%)</title><rect x="1124.1" y="323.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.1" y="334.0">o..</text>
</g>
<g>
<title>java.lang.String[] (14 samples, 2.30%)</title><rect x="1124.1" y="307.0" width="27.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1127.1" y="318.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 2.13%)</title><rect x="1151.2" y="323.0" width="25.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1154.2" y="334.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 2.13%)</title><rect x="1151.2" y="307.0" width="25.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1154.2" y="318.0">o..</text>
</g>
<g>
<title>char[] (6 samples, 0.99%)</title><rect x="1151.2" y="291.0" width="11.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1154.2" y="302.0"></text>
</g>
<g>
<title>java.lang.String (5 samples, 0.82%)</title><rect x="1162.9" y="291.0" width="9.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1165.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.33%)</title><rect x="1172.6" y="291.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1175.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.33%)</title><rect x="1172.6" y="275.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1175.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.33%)</title><rect x="1172.6" y="259.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1175.6" y="270.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.33%)</title><rect x="1172.6" y="243.0" width="3.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1175.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 1.15%)</title><rect x="1176.4" y="339.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1179.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 1.15%)</title><rect x="1176.4" y="323.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>char[] (2 samples, 0.33%)</title><rect x="1176.4" y="307.0" width="3.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.49%)</title><rect x="1180.3" y="307.0" width="5.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1183.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.33%)</title><rect x="1186.1" y="307.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.33%)</title><rect x="1186.1" y="291.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.33%)</title><rect x="1186.1" y="275.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.1" y="286.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.33%)</title><rect x="1186.1" y="259.0" width="3.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1189.1" y="270.0"></text>
</g>
</g>
</svg>
